// TEAM: bookings

syntax = "proto3";

package flexport.booking.requestforquotes.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "RequestForQuotesProto";
option java_package = "com.flexport.booking.requestforquotes.v1beta1";
option ruby_package = "Flexport::Booking::RequestForQuotes::V1Beta1";

import "flexport/booking/cargo/v1beta1/cargo.proto";
import "flexport/booking/enums/declared_as_dangerous/v1beta1/declared_as_dangerous.proto";
import "flexport/booking/product/v1beta1/product.proto";
import "flexport/executioncoordinator/types/enums/v1/shipment_priority.proto";
import "flexport/os/v1/types/incoterm/v1/incoterm.proto";

// A Kinesis event signifying a request for quotes has been created.
message RequestForQuotesCreated {
  // FID of the Request for Quotes, used to aggregate events
  string agg_rfq_fid = 1;
  // FID of the Booking the RFQ belongs to. Needed almost exclusively for legacy monolith adapter.
  string booking_fid = 3;
  // The reserved shipment Flex ID this RFQ belongs to. Also needed for the legacy monolith adapter.
  int64 shipment_flex_id = 4;
  // The User whos action created this request. Needed by the legacy monolith adapter.
  string created_by_user_fid = 5;
  // Current name of the associated booking. Needed for legacy monolith adapter.
  string booking_name = 6;
  // The order data to base the quotes on.
  oneof request {
    RequestForFreightQuotes freight_request = 2;
    RequestForVisibilityOnlyQuotes visibility_only_request = 10;
    RequestForCustomsOnlyQuotes customs_only_request = 11;
  }
}

// A request for quotes for a specific set of Flexport services.
message RequestForFreightQuotes {
  // Globally unique ID for an RFQ
  string fid = 1;
  // :WHO:
  // Company entity corresponding to the recipient of the shipment's goods.
  string consignee_entity_fid = 2;
  // Company shipping the goods.
  string shipper_entity_fid = 3;
  // Defines who is responsible for payment of which parts of the shipment.
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 4;
  // :WHAT: (see pt II at bottom as well)
  // Info about the packages in the shipment
  flexport.booking.cargo.v1beta1.Cargo cargo = 5;
  // How many of each size container is being shipped.
  ContainerCounts container_counts = 6;
  // How much of the shipment is dangerous goods (see enum options).
  flexport.booking.enums.declaredasdangerous.v1beta1.DeclaredAsDangerous declared_as_dangerous = 7;
  // List of all HS codes in this shipment.
  repeated string product_hs_codes = 8;
  // Interim field to contain full user-entered product data while we consider other solutions.
  repeated flexport.booking.product.v1beta1.Product products = 24;
  // :WHEN:
  // When cargo will be ready for pickup.
  string cargo_ready_date = 9;
  string target_delivery_date = 10;
  // :WHERE:
  // Final destination address.
  string destination_address_fid = 11;
  // Origin address
  string origin_address_fid = 12;
  string port_of_loading_fid = 13;
  string port_of_unloading_fid = 14;
  // :HOW:
  // Customer is interested in Air transport.
  bool allow_air = 15;
  // Customer is interested in Ocean FCL transport.
  bool allow_ocean_fcl = 16;
  // Customer is interested in Ocean LCL transport.
  bool allow_ocean_lcl = 17;
  // Customer is interested in Truck FTL transport.
  bool allow_truck_ftl = 18;
  // Customer is interested in Truck LTL transport.
  bool allow_truck_ltl = 19;
  bool wants_delivery_service = 20;
  bool wants_export_customs_service = 21;
  bool wants_pickup_service = 22;
  bool wants_hk_export_trade_declaration_service = 23;
  // These fields is only used for monolith adapter to generate docs.
  string eccn_codes = 25;
  string description_of_products = 26;
  // The priority level of this Booking.
  flexport.executioncoordinator.types.enums.v1.ShipmentPriority priority = 34;
  // Client-provided notes with additional context about the priority level.
  string priority_notes = 35;
  // Wants import customs service.
  bool wants_import_customs_service = 36 [deprecated = true];
  repeated string notify_party = 37;
}

// A request for quotes for a visibility only shipment.
message RequestForVisibilityOnlyQuotes {
  // Globally unique ID for an RFQ
  string fid = 1;
  // :WHO:
  // Company entity who is tracking the shipment
  string tracking_entity_fid = 2;
}

// A request for quotes for a customs only shipment.
message RequestForCustomsOnlyQuotes {
  // Globally unique ID for an RFQ
  string fid = 1;
  //
  // :WHO:
  // Company entity corresponding to the recipient of the shipment's goods.
  string consignee_entity_fid = 2;
  // Company shipping the goods.
  string shipper_entity_fid = 3;
  // Defines who is responsible for payment of which parts of the shipment.
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 4;
  //
  // :WHAT:
  // Info about the packages in the shipment
  flexport.booking.cargo.v1beta1.Cargo cargo = 5;
  // How many of each size container is being shipped.
  ContainerCounts container_counts = 6;
  // How much of the shipment is dangerous goods (see enum options).
  flexport.booking.enums.declaredasdangerous.v1beta1.DeclaredAsDangerous declared_as_dangerous = 7;
  // Interim field to contain full user-entered product data while we consider other solutions.
  repeated flexport.booking.product.v1beta1.Product products = 8;
  string eccn_codes = 9;
  string description_of_products = 10;
  //
  // :WHEN:
  string cargo_ready_date = 12;
  string target_delivery_date = 13;
  //
  // :WHERE:
  string destination_address_fid = 14;
  string origin_address_fid = 15;
  string port_of_loading_fid = 16;
  string port_of_unloading_fid = 17;
  //
  // :HOW:
  // Customer is using Air transport.
  bool air = 18;
  // Customer is using Ocean FCL transport.
  bool ocean_fcl = 19;
  // Customer is using Ocean LCL transport.
  bool ocean_lcl = 20;
  // Customer is using Truck FTL transport.
  bool truck_ftl = 21;
  // Customer is using Truck LTL transport.
  bool truck_ltl = 22;
  bool wants_delivery_service = 23;
  bool wants_pickup_service = 24;
  bool wants_export_customs_service = 25;
  bool wants_import_customs_service = 26 [deprecated = true];
  bool wants_hk_export_trade_declaration_service = 27;
  flexport.executioncoordinator.types.enums.v1.ShipmentPriority priority = 28;
  // Client-provided notes with additional context about the priority level.
  string priority_notes = 29;
  repeated string notify_party = 30;
}

// How many of what size containers the shipment has.
message ContainerCounts {
  int32 twenty_foot = 1;
  int32 forty_foot = 2;
  int32 forty_foot_high_cube = 3;
  int32 forty_five_foot_high_cube = 4;
}
