// TEAM: service_catalog

syntax = "proto3";

package flexport.catalog.grpc.dataauthority.offering.v1beta1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option java_package = "com.flexport.catalog.grpc.dataauthority.offering.v1beta1";
option ruby_package = "Flexport::Catalog::Grpc::DataAuthority::Offering::V1Beta1";

service OfferingAPI {
  // Creates an offering
  rpc CreateOffering(CreateOfferingRequest) returns (CreateOfferingResponse);

  // Updates the Pricing on a specific offering.
  // New schedule overwrites the overlapping part on old schedule and bumps the offering version.
  // Returns updated offering.
  rpc UpdatePricing(UpdatePricingRequest) returns (UpdatePricingResponse);

  // Updates the availability on a specific offering.
  // Returns updated offering.
  rpc UpdateAvailability(UpdateAvailabilityRequest) returns (UpdateAvailabilityResponse);

  // Updates the fulfillment context on a specific offering.
  // Returns updated offering.
  rpc UpdateFulfillmentContext(UpdateFulfillmentContextRequest) returns (UpdateFulfillmentContextResponse);

  // Archives a specific offering by Fid.
  rpc ArchiveOfferingByFid(ArchiveOfferingByFidRequest) returns (ArchiveOfferingByFidResponse);

  // Retrieves specific offering by Fid.
  rpc GetOfferingByFid(GetOfferingByFidRequest) returns (GetOfferingByFidResponse);

  // Retrieves a list of offering by query attributes.
  rpc ListOfferings(ListOfferingsRequest) returns (ListOfferingsResponse);

  // An API to upsert(create or update) both Product and Offering.
  // A major use case is that in ratesheet upload, all data are sent in for upsert.
  rpc UpsertOffering(UpsertOfferingRequest) returns (UpsertOfferingResponse);
}

message CreateOfferingRequest {
  reserved 1, 2;
  string freight_partner_fid = 3;
  string product_fid = 4;
  optional string client_fid = 5;

  reserved 6 to 9;
  repeated PricingPolicy pricing_policies = 10;
  Availability availability = 11;
  FulfillmentContext fulfillment_context = 12;
  google.protobuf.Struct metadata = 13;
}

message CreateOfferingResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message UpdatePricingRequest {
  string offering_fid = 1;
  repeated PricingPolicy pricing_policies = 2;
  optional bool overwrite = 3;
}

message UpdatePricingResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message UpdateAvailabilityRequest {
  string offering_fid = 1;
  Availability availability = 2;
}

message UpdateAvailabilityResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message UpdateFulfillmentContextRequest {
  string offering_fid = 1;
  FulfillmentContext fulfillment_context = 2;
}

message UpdateFulfillmentContextResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message GetOfferingByFidRequest {
  string offering_fid = 1;
}

message GetOfferingByFidResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message ArchiveOfferingByFidRequest {
  string offering_fid = 1;
}

message ArchiveOfferingByFidResponse {
  google.rpc.Status status = 1;
  optional OfferingInstance offering = 2;
}

message ListOfferingsRequest {
  repeated string offering_fids = 1;
  repeated string product_fids = 2;
  optional OfferingStatus status = 3;
  // more to be added such as pricing eligibility, client fid
}

message ListOfferingsResponse {
  google.rpc.Status status = 1;
  repeated OfferingInstance offerings = 2;
}

message UpsertOfferingRequest {
  string configuration_fid = 1;
  optional string distinct_key = 2;
  google.protobuf.Struct attributes = 3;
  string freight_partner_fid = 4;
  optional string client_fid = 5;

  reserved 6 to 9;

  optional Availability availability = 10;
  optional FulfillmentContext fulfillment_context = 11;
  repeated PricingPolicy pricing_policies = 12;
  google.protobuf.Struct metadata = 13;
}

message UpsertOfferingResponse {
  google.rpc.Status status = 1;
  OfferingInstance offering = 2;
}

message OfferingInstance {
  string offering_fid = 1;
  OfferingStatus status = 2;
  string freight_partner_fid = 3;
  string product_fid = 4;
  optional string client_fid = 5;
  // placeholder for future uses, such as SRT
  reserved 6 to 9;

  repeated PricingPolicy pricing_policies = 10;
  Availability availability = 11;
  FulfillmentContext fulfillment_context = 12;
  google.protobuf.Struct metadata = 13;
}

message Availability {
  string type = 1;
  string availability_id = 2;
}

message FulfillmentContext {
  string type = 1;
  google.protobuf.Struct context = 2;
}

message PricingPolicy {
  google.protobuf.Struct eligibility = 1;
  repeated PricingSchedule schedules = 2;
}

message PricingSchedule {
  google.protobuf.Timestamp effective_time = 1;
  google.protobuf.Timestamp expiration_time = 2;
  repeated Charge charges = 3;
  repeated Markup markups = 4;
  // Schedule source metadata for traceability.
  // This is used for data sync with monolith pricing window structure.
  // added here to matches the new API for a converter, which we want to deprecate, but this is faster short term
  optional string source_id = 7;
}

message Charge {
  string charge_type = 1;
  google.protobuf.Struct rate = 2;
  optional string charge_source = 3;
  optional string charge_source_id = 4;
}

message Markup {
  string charge_type = 1;
  google.protobuf.Struct rate = 2;
  optional string markup_source = 3;
  optional string markup_source_id = 4;
}

enum OfferingStatus {
  OFFERING_STATUS_INVALID = 0;
  OFFERING_STATUS_ACTIVE = 1;
  OFFERING_STATUS_ARCHIVED = 2;
}
