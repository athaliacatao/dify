// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executionoffering.v1;

import "flexport/executioncoordinator/executionoffering/v1/transit/common.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";

option java_multiple_files = true;
option java_outer_classname = "AuxiliaryTruckingProto";
option java_package = "com.flexport.executioncoordinator.executionoffering.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOffering::V1";

// An origin trucking pickup in support of a port-based ExecutionOffering.
message AuxiliaryTruckingPickup {
  string address_fid = 1;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate cargo_ready_date = 6;
  oneof carrier {
    SpecificCarrier specific_carrier = 3;
    OpenCarrier open_carrier = 4;
  }
  AuxiliaryTruckingRole role = 7;
  string freight_partner_fid = 5;
  TruckingServiceType specified_trucking_service_type = 8;
}

// A destination trucking delivery in support of a port-based ExecutionOffering.
message AuxiliaryTruckingDelivery {
  string address_fid = 1;
  oneof carrier {
    SpecificCarrier specific_carrier = 3;
    OpenCarrier open_carrier = 4;
  }
  AuxiliaryTruckingRole role = 7;
  string freight_partner_fid = 5;
  TruckingServiceType specified_trucking_service_type = 8;
}

message AuxiliaryOriginTransloadingTrucking {
  string origin_address_fid = 1;
  string transloading_address_fid = 2;
  oneof carrier {
    SpecificCarrier specific_carrier = 3;
    OpenCarrier open_carrier = 4;
  }
  AuxiliaryTruckingRole role = 7;
  string freight_partner_fid = 5;
  TruckingServiceType specified_trucking_service_type = 8;
}

message AuxiliaryDestinationTransloadingTrucking {
  string destination_address_fid = 1;
  string transloading_address_fid = 2;
  oneof carrier {
    SpecificCarrier specific_carrier = 3;
    OpenCarrier open_carrier = 4;
  }
  AuxiliaryTruckingRole role = 7;
  string freight_partner_fid = 5;
  TruckingServiceType specified_trucking_service_type = 8;
}

// The role Flexport has in origin/destination trucking.
//
// Note about edge case: if the client (1) has arranged their own contract with an external ocean
// carrier for main freight and (2) that contract has a service boundary to or from door, then
// the role on the trucking segments covered by the ocean carrier contract should match the role
// on the main freight contract. Example:
//
// Client has direct contract with ocean carrier with service boundary CY-to-door. Flexport's role
// in main freight is "booking agent". Flexport's role for the delivery must be "booking agent" as
// well.
enum AuxiliaryTruckingRole {
  AUXILIARY_TRUCKING_ROLE_INVALID = 0;
  //
  // Flexport coordinates trucking on a Flexport-arranged trucking carrier contract. This is the
  // standard case where we eg arrange trucking with JC Transport on our long-standing
  // forwarder/carrier contract with them.
  AUXILIARY_TRUCKING_ROLE_FULL_SERVICE = 1;
  //
  // Flexport coordinates trucking on a client-arranged contract eg sending delivery order,
  // arranging handoffs amongst trucker, warehouse, and terminal, etc.
  //
  // Note: This also includes the case where Flexport acts as a booking agent on a BCO a shipment
  // and one or more of that shipment's trucking legs are covered under the main freight
  // ocean contract. In this case, our role as coordinator will not involve actually sending
  // a DO, since that will be done by the ocean carrier under the scope of the MBL. However,
  // we may perform other trucking coordination tasks.
  AUXILIARY_TRUCKING_ROLE_COORDINATION_ONLY = 3;
  //
  // Flexport has no operational involvement in trucking. Visibility-only is included here.
  AUXILIARY_TRUCKING_ROLE_NO_INVOLVEMENT = 2;
  //
}
