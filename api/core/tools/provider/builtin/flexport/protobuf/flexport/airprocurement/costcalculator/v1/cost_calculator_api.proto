// TEAM: procurement

syntax = "proto3";

package flexport.airprocurement.costcalculator.v1;

import "flexport/airprocurement/costcalculator/v1/cost_calculator.proto";
import "flexport/airprocurement/costcalculator/v1/find_cost.proto";
import "flexport/airprocurement/rates/v1/universal_rates.proto";

option java_multiple_files = true;
option java_outer_classname = "CostCalculatorApiProto";
option java_package = "com.flexport.airprocurement.costcalculator.v1";
option ruby_package = "Flexport::AirProcurement::CostCalculator::V1";

// Cost Calculator API compatible with Procurement Rates.
service CostCalculatorAPI {
  // Calculates the cost for a given Procurement Rate and set of PricingVariables.
  rpc CalculateCost(CalculateCostRequest) returns (CalculateCostResponse);
  // Find cost for a batch of shipments given a set of rate search criteria and cargo information
  rpc FindCost(FindCostRequest) returns (FindCostResponse);
}

// Request for CalculateCost.
message CalculateCostRequest {
  flexport.airprocurement.rates.v1.Rate rate = 1;
  // Deprecated. Use bill_of_materials instead.
  repeated PricingVariable pricing_variables = 2 [deprecated = true];
  repeated BomItem bill_of_materials = 3;
  // Optional. The currency to convert the total amount to. Default is USD.
  string currency_code = 4;
  // Optional. Foreign exchange rates as of the given date will be applied.
  // Default is the current date.
  Date exchange_rates_date = 5;
  string origin_freight_partner_fid = 6;
  string destination_freight_partner_fid = 7;
}

// Response for CalculateCost.
message CalculateCostResponse {
  int64 total_amount_micros = 1;
  string total_amount_currency_code = 2;
  repeated CostItem cost_items = 3;
}

// Request for FindCost.
message FindCostRequest {
  repeated FindCostParameters find_cost_parameters = 1;
}

// Response for FindCost.
message FindCostResponse {
  repeated CostRecord costs = 1;
}
