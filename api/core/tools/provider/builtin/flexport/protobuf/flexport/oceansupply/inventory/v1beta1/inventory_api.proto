// TEAM: ocean_allocations

syntax = "proto3";

package flexport.oceansupply.inventory.v1beta1;

import "flexport/oceansupply/inventory/v1beta1/inventory.proto";
import "flexport/os/v1/types/cargo/v1/cargo.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";

option java_multiple_files = true;
option java_outer_classname = "InventoryApiProto";
option java_package = "com.flexport.oceansupply.inventory.v1beta1";
option ruby_package = "Flexport::OceanSupply::V1Beta1";

// An API for reading InventoryBuckets and Inventories.
service InventoryAPI {
  // Fetches Inventory objects.
  rpc FetchInventory(FetchInventoryRequest) returns (FetchInventoryResponse);
  // Fetch InventoryBucket objects.
  // NOTE: The returned InventoryBuckets do not include any inventories.
  rpc FetchInventoryBuckets(FetchInventoryBucketsRequest) returns (FetchInventoryBucketsResponse);
  // Fetch Inventory objects associated with a given InventoryBucket.
  rpc FetchInventoryForBucket(FetchInventoryForBucketRequest) returns (FetchInventoryForBucketResponse);
  // Fetch Inventory and InventoryBucket objects for ocean-planning
  rpc FetchInventoryAndBucket(FetchInventoryAndBucketRequest) returns (FetchInventoryAndBucketResponse);
  // get inventory by bucket fid and carrier week, in batch.
  rpc BatchGetInventoryByBucketFidAndCarrierWeek(BatchGetInventoryByBucketFidAndCarrierWeekRequest) returns (BatchGetInventoryByBucketFidAndCarrierWeekResponse);
  // Fetches the InventoryBucket for a given Inventory FID.
  rpc FetchParentBucket(FetchParentBucketRequest) returns (FetchParentBucketResponse);
  // Retrieves all inventory.
  rpc ListInventoryBuckets(ListInventoryBucketsRequest) returns (ListInventoryBucketsResponse);
  // Fetches inventory buckets that match the given criteria.
  // Uses ConnectingLegConfiguration to filter on pre-carriage/on-carriage/transshipment restrictions.
  // NOTE: The returned InventoryBuckets do not include any inventories.
  rpc FindMatchingBuckets(FindMatchingBucketsRequest) returns (FindMatchingBucketsResponse);
  // Fetches inventory buckets for a given list of POLs and PODs.
  // Similarly uses ConnectingLegConfig in the Request.
  // The returned InventoryBuckets do not include any inventories.
  rpc FindDirectBuckets(FindDirectBucketsRequest) returns (FindDirectBucketsResponse);
  //
  rpc UpsertBcoInventoryBuckets(UpsertBcoInventoryBucketsRequest) returns (UpsertBcoInventoryBucketsResponse);
  // Fetches inventory buckets by receiver fid.
  // Mainly used for regular(Flexport owned) carrier space generation.
  rpc FindBucketsByReceiverFid(FindBucketsByReceiverFidRequest) returns (FindBucketsByReceiverFidResponse);
  // Fetches inventory buckets by receiver fids.
  // Mainly used for BCO carrier space generation.
  rpc FindBucketsByReceiverFids(FindBucketsByReceiverFidsRequest) returns (FindBucketsByReceiverFidsResponse);
  // Decrease inventory for Ocean FCL by inventoryFid and add usage_fids
  rpc DecreaseInventory(DecreaseInventoryRequest) returns (DecreaseInventoryResponse);
  // Increase inventory for Ocean FCL by inventoryFid and remove usage_fids
  rpc IncreaseInventory(IncreaseInventoryRequest) returns (IncreaseInventoryResponse);
  // Fetches all receiver fids in the bucket
  rpc FetchAllReceiverFids(FetchAllReceiverFidsRequest) returns (FetchAllReceiverFidsResponse);
}

// Request to fetch inventories, by their FID.
message FetchInventoryRequest {
  repeated string fid = 1;
}

// Response containing the matching inventories. FIDs that weren't found will be skipped.
message FetchInventoryResponse {
  repeated Inventory inventory = 1;
}

// Request to fetch InventoryBuckets, by their FID.
message FetchInventoryBucketsRequest {
  repeated string fid = 1;
}

// Response containing the matching buckets. FIDs that weren't found will be skipped.
message FetchInventoryBucketsResponse {
  repeated InventoryBucket buckets = 1;
}

// Request to fetch the list of Inventories associated with a bucket.
// If the FID isn't found, an error will be thrown.
message FetchInventoryForBucketRequest {
  string bucket_fid = 1;
}

// Response containing the matching inventories.
message FetchInventoryForBucketResponse {
  repeated Inventory inventories = 1;
}

// Request to fetch Inventory and InventoryBucket
message FetchInventoryAndBucketRequest {
  repeated string inventory_fid = 1;
  repeated string bucket_fid = 2;
}

// Response containing the matching inventories and inventory buckets
message FetchInventoryAndBucketResponse {
  map<string, Inventory> inventory_fid_to_inventory = 1;
  map<string, InventoryBucket> bucket_fid_to_bucket = 2;
}

message BatchGetInventoryByBucketFidAndCarrierWeekRequest {
  repeated GetInventoryByBucketFidAndCarrierWeekRequest batched_requests = 1;
}

message GetInventoryByBucketFidAndCarrierWeekRequest {
  string bucket_fid = 1;
  int32 carrier_week = 2;
  int32 carrier_year = 3;
}

message BatchGetInventoryByBucketFidAndCarrierWeekResponse {
  repeated Inventory batched_results = 1;
}

// Request to fetch an inventory bucket for a given Inventory FID.
message FetchParentBucketRequest {
  string inventory_fid = 1;
}

// Response containing the matching bucket, if found.
message FetchParentBucketResponse {
  InventoryBucket inventory_bucket = 1;
}

// The request for ListInventoryBuckets.
message ListInventoryBucketsRequest {
  flexport.os.v1.types.walltimedate.v1.WallTimeDate start_date = 1;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate end_date = 2;
  // All normal prod data has receiver:Flexport, we enabled a way to create demo data, they all have receiver:vandelay_west,
  // passing true to this parameter allows this endpoint to return all demo data.
  bool use_demo_data = 3;
  FmtRegion fmt_region = 4 [deprecated = true];
  FmtTradeLane fmt_tradelane = 5;
  int32 first = 6;
  string cursor = 7;
}

// The response for ListInventoryBuckets.
message ListInventoryBucketsResponse {
  repeated flexport.oceansupply.inventory.v1beta1.InventoryBucket inventory_buckets = 1;
  string cursor = 2;
}

// Request for FindMatchingBuckets.
message FindMatchingBucketsRequest {
  string origin_port_fid = 1;
  string origin_via_port_fid = 2;
  string destination_via_port_fid = 3;
  string destination_port_fid = 4;
  repeated InventorySearchClause clauses = 5;
  ConnectingLegConfiguration connecting_leg_configuration = 6 [deprecated = true];
}

// Response for FindMatchingBuckets.
message FindMatchingBucketsResponse {
  // NOTE: The returned InventoryBuckets from this method do not include any inventories.
  repeated InventoryBucket buckets = 1;
}

// Request for FindDirectBuckets.
message FindDirectBucketsRequest {
  repeated string origin_port_fids = 1;
  repeated string destination_port_fids = 2;
  repeated InventorySearchClause clauses = 3;
  int64 offset = 4;
  int64 limit = 5;
  ConnectingLegConfiguration connecting_leg_configuration = 6;
}

// Response for FindDirectBuckets.
message FindDirectBucketsResponse {
  // NOTE: The returned InventoryBuckets from this method do not include any inventories.
  repeated InventoryBucket buckets = 1;
}

message UpsertBcoInventoryBucketsRequest {
  repeated UpsertBcoInventoryBucketRequest upsert_bco_inventory_buckets = 1;
  // The user (eg a Flexport Account Manager) submitting the request
  // must have permissions to edit inventory buckets for the receiver
  // company fids included in the bucket requests.
  string user_fid = 2; // required
}

enum InventoryPrefillStartOption {
  INVENTORY_PREFILL_START_OPTION_INVALID = 0;
  INVENTORY_PREFILL_START_OPTION_CURRENT_WEEK = 1;
  INVENTORY_PREFILL_START_OPTION_CONTRACT_START = 2;
}

message UpsertBcoInventoryBucketRequest {
  string carrier_fid = 1; // required
  string receiver_fid = 2; // required
  string contract_fid = 3; // required
  string port_of_loading_port_fid = 4 [deprecated = true]; // deprecated port_of_loading_port_fid field in favour of port_of_loading_port_fids
  BaseportRestriction origin_connecting_leg_restriction = 5; // optional, default: no restriction
  PortFilter origin_port_fids = 6; // optional, default: exclude none
  string port_of_discharge_port_fid = 7 [deprecated = true]; // deprecated port_of_discharge_port_fid field in favour of port_of_discharge_port_fids
  BaseportRestriction destination_connecting_leg_restriction = 8; // optional, default: no restriction
  PortFilter destination_port_fids = 9; // optional, default: exclude none
  int32 weekly_teus = 10; // optional, default: 0
  string notes = 11; // optional
  // Yearly TEUs for this bucket.
  int32 rolling_teus = 12; // optional, default: 0
  repeated flexport.os.v1.types.cargo.v1.Iso6346ContainerSize equipment_types = 13; // required
  ServiceType service_type = 14; // required
  InventoryPrefillStartOption inventory_prefill_start_option = 15; // optional, default: current week
  repeated string port_of_loading_port_fids = 16; // required
  repeated string port_of_discharge_port_fids = 17; // required
}

message UpsertBcoInventoryBucketsResponse {
  repeated UpsertBcoInventoryBucketResponse upserted_buckets = 1;
  repeated UpsertBcoInventoryBucketsError errors = 2;
}

message UpsertBcoInventoryBucketsError {
  oneof error {
    // Any receiver company id that the requesting user does not have permission to edit buckets for
    // gets returned as one of these errors.
    string invalid_receiver_company_fid = 1;
  }
}

message UpsertBcoInventoryBucketResponse {
  string upserted_bucket_fid = 1;
}

message FindBucketsByReceiverFidRequest {
  string receiver_fid = 2;
}

message FindBucketsByReceiverFidResponse {
  repeated InventoryBucket buckets = 1;
}

message FindBucketsByReceiverFidsRequest {
  repeated string receiver_fids = 1;
}

message FindBucketsByReceiverFidsResponse {
  repeated InventoryBucket buckets = 1;
}

message PortFilter {
  // Whether to include or exclude the listed ports.
  bool is_inclusive = 1;
  // Port fids to include/exclude.
  repeated string values = 2;
}

// Request to decrease inventory and add usage_fids
message DecreaseInventoryRequest {
  string inventory_fid = 1;
  int32 requested_teus = 2;
  string shipment_fid = 3;
  string assignment_fid = 4;
  bool is_over_allocation_allowed = 5;
}

// Response for decrease inventory request
message DecreaseInventoryResponse {
  bool success = 1;
}

// Request to increase inventory and remove usage_fids
message IncreaseInventoryRequest {
  string inventory_fid = 1;
  int32 requested_teus = 2;
  string shipment_fid = 3;
  string assignment_fid = 4;
}

// Response for increase inventory request
message IncreaseInventoryResponse {
  bool success = 1;
}

message FetchAllReceiverFidsRequest {}

message FetchAllReceiverFidsResponse {
  repeated string receiver_fids = 1;
}
