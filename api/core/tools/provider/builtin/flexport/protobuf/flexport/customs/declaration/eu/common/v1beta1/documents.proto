// TEAM: customs_platform
syntax = "proto3";

package flexport.customs.declaration.eu.common.v1beta1;

import "google/type/date.proto";
import "google/type/money.proto";

option java_multiple_files = true;
option java_package = "com.flexport.customs.declaration.eu.common.v1beta1";
option ruby_package = "Flexport::Customs::Declaration::EU::Common::V1Beta1";

// Details relating to the previous document.
// [Data Element: 12 01 000 000]
message PreviousDocument {
  // The identification number or another recognisable reference of the document.
  //
  // [Data Element: 12 01 001 000]
  string reference_number = 1;

  enum Type {
    TYPE_INVALID = 0;
    // TODO: Add more types as needed.
    // MBL number for FCL shipments only.
    TYPE_N705 = 1;
  }
  // The type of the document.
  //
  // [Data Element: 12 01 002 000]
  Type type = 2;
  // The following previous document fields are generally on used on the
  // item level. Please refer to the regulation for more details.
  //
  // For import procedures the fields are mandatory on the
  // Goods Item level.
  //
  // [Data Element: 12 01 003 000]
  string type_of_packages = 3;
  // [Data Element: 12 01 004 000]
  int32 number_of_packages = 4;
  // [Data Element: 12 01 005 000]
  string measurement_unit_qualifier = 5;
  // [Data Element: 12 01 006 000]
  double quantity = 6;
}

// [Data Element: 12 03 000 000]
message SupportingDocument {
  // Identification or reference number of Union or international documents or certificates produced in support of the declaration.
  //
  // [Data Element: 12 03 001 000]
  string reference_number = 1;

  enum Type {
    TYPE_INVALID = 0;
    // Invoice number.
    TYPE_N935 = 1;
    // EUR1 certificate number.
    TYPE_N954 = 2;
    // Registered exporter number.
    TYPE_C100 = 3;
    // Origin certificate number.
    TYPE_U165 = 4;
    // Invoice or origin certificate number exporter.
    TYPE_N864 = 5;
    // ATR certificate number.
    TYPE_N018 = 6;
  }

  // Type of supporting document.
  //
  // [Data Element: 12 03 002 000]
  Type type = 2;
  // Reference to the authority issuing the license or certificate concerned.
  //
  // [Data Element: 12 03 010 000]
  string issuing_authority_name = 3;
  // The measurement units laid down in Union legislation, as published in TARIC shall be used.
  // Data element required at the Government Agency Goods Item level for Import and Export procedures.
  //
  // [Data Element: 12 03 005 000]
  string measurement_unit_and_qualifier = 4;
  // The the relevant writing-off quantity.
  // Data element required at the Government Agency Goods Item level for Import and Export procedures.
  //
  // [Data Element: 12 03 006 000]
  double quantity = 5;
  // The end date of validity of the license or certificate concerned.
  //
  // [Data Element: 12 03 011 000]
  google.type.Date validity_end_date = 6;
  // Currency and amount of the write-off.
  // Data element required at the Government Agency Goods Item level for Import and Export procedures.
  //
  // [Data Element: 12 03 012 000] and [Data Element: 12 03 014 000]
  google.type.Money monetary_amount = 7;
  // The sequential number of the item in the supporting document
  // (e.g. certificate, license, permit, entry document etc.), corresponding to the item in question.
  //
  // [Data Element: 12 03 013 000]
  int32 document_line_item_number = 8;
  // Complement of information concerning the supporting document.
  // Data element required at the Government Agency Goods Item level for Import and Export procedures.
  //
  // [Data Element: 12 03 079 000]
  string complement_of_information = 9;
}

// This data element includes the type and reference of the transport document.
// [Data Element: 12 05 000 000]
message TransportDocument {
  // This information shall refer to the transport document with which
  // the goods have been brought into the customs territory of the Union.
  //
  // [Data Element: 12 05 001 000]
  string reference_number = 1;

  enum Type {
    TYPE_INVALID = 0;
    // MBL number for FCL shipments only.
    TYPE_N705 = 1;
    // TODO: Add more types as needed.
  }

  // Using the relevant codes, indicate the type of the document.
  //
  // [Data Element: 12 05 002 000]
  Type type = 2;
}
