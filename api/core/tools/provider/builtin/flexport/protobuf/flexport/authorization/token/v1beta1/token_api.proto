// TEAM: iam_platform

syntax = "proto3";

package flexport.authorization.token.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "TokenApiProto";
option java_package = "com.flexport.authorization.token.v1beta1";
option ruby_package = "Flexport::Authorization::Token::V1Beta1";

import "flexport/authorization/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// Retrieve operations and resources relevant to permissions.
service TokenAPI {
  // Used by the monolith for fetching the IAM JWT for a user. Will be replaced by access tokens.
  // Passes in user data, returns encoded & signed IAM JWT.
  rpc GetIamTokenForUserInfo(GetIamTokenForUserInfoRequest) returns (GetIamTokenForUserInfoResponse);
  // Used to verify a token as return an IAM JWT for that token.
  rpc ExchangeIamTokenForToken(ExchangeIamTokenForTokenRequest) returns (ExchangeIamTokenForTokenResponse) {
    option (google.api.http) = {
      post: "/v1beta1/token-api/exchange-token"
    };
  }
  // Used to fetch the IAM jwt public key in JWKS format. This is meant to to replace the practice of
  // storing the key in application configuration, by providing an API to fetch the most recent copy of
  // the key on-demand.
  rpc GetIamTokenPublicKeyJwks(GetIamTokenPublicKeyJwksRequest) returns (GetIamTokenPublicKeyJwksResponse);
}

message GetIamTokenForUserInfoRequest {
  google.protobuf.StringValue subject_fid = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue email = 3;
  // The domain of the request. Valid options core, client, origin, operations, dispatch, warehouse, api
  google.protobuf.StringValue flexport_app = 4;
  google.protobuf.StringValue user_fid = 5;
  google.protobuf.StringValue company_fid = 6;
  google.protobuf.StringValue impersonator_fid = 7;
  google.protobuf.StringValue client_fid = 8;
  google.protobuf.StringValue public_api_version = 9;
}

message GetIamTokenForUserInfoResponse {
  string encoded_jwt = 1;
}

message ExchangeIamTokenForTokenRequest {
  string token = 1;
  flexport.authorization.v1.TokenType token_type = 2;
  // For now the only piece of information we can't get from the token is the app.
  // The domain of the request. Valid options core, client, origin, operations, dispatch, warehouse, api
  google.protobuf.StringValue flexport_app = 3;
  // Optional field for setting the expected audiences of the token. If any audiences are passed in, then the token
  // being passed in must have an audience field that matches one of values
  repeated string audiences = 4;
}

message ExchangeIamTokenForTokenResponse {
  string encoded_jwt = 1;
}

message GetIamTokenPublicKeyJwksRequest {}

message GetIamTokenPublicKeyJwksResponse {
  google.protobuf.Struct jwks = 1;
}
