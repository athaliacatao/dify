// TEAM: work_management

syntax = "proto3";

package flexport.operatingprocedures.workitemruleconfiguration.v1beta1;

import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_outer_classname = "WorkItemRuleConfigurationApiProto";
option java_package = "com.flexport.operatingprocedures.workitemruleconfiguration.v1beta1";
option ruby_package = "Flexport::OperatingProcedures::WorkItemRuleConfiguration::V1Beta1";

// API for work item configuration related gRPC endpoints.
service WorkItemRuleConfigurationAPI {
  // Get work item rule configurations based on work_item_type and a map of attribute key-values.
  rpc GetWorkItemRuleConfigurations(GetWorkItemRuleConfigurationsRequest) returns (GetWorkItemRuleConfigurationsResponse);
}

// The request payload when getting work item rule configurations.
message GetWorkItemRuleConfigurationsRequest {
  // For example, import_confirm_actual_arrival_date, export_confirm_initial_schedule.
  string work_item_type = 1;
  // attribute_map contains attribute key and value.
  // For example, key-value pairs can be mode:fcl, persona:flex_go, consolidation_type:general_fcl.
  map<string, string> attribute_map = 2;
}

// The response contains the rule configurations for a given work_item_type
// with some specific attribute values. There can be sla_rule, applicability_rule,
// ready_for_work_rule, etc. For the first use case, we will only have sla_rule.
message GetWorkItemRuleConfigurationsResponse {
  google.protobuf.Struct sla_rule = 1;
}
