// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executiontaskstateevent.v1;

option java_multiple_files = true;
option java_outer_classname = "ExecutionTaskRevisionProcessedProto";
option java_package = "com.flexport.executioncoordinator.executiontaskstateevent.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionTaskStateEvent::V1";

// A revision of an ExecutionTask has been processed by an ExecutionProvider.
// This event is the recommended trigger for external systems to know when a provider's
// representation of the world has updated, for purposes of snapshotting or otherwise
// reacting.
message ExecutionTaskRevisionProcessed {
  // A provider-specific block from the entity which processed the ExecutionTask revision.
  // The providers below correspond to the groupings in event_details of
  // ExecutionTaskStateEvent - see there for the provider mapping
  oneof provider_info {
    TruckingInfo trucking_info = 4;
  }
}

// Information from the Trucking provider.
message TruckingInfo {
  // The DeliveryOrder which was created or updated after processing the revision.
  string delivery_order_fid = 1;
  // The deliveries on the DeliveryOrder after processing the revision
  repeated string delivery_fids = 2;
}
