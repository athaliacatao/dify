// TEAM: tetrominos

syntax = "proto3";

package flexport.freightrouting.realtimestitching.v1beta1;

import "flexport/freightrouting/realtimestitching/v1beta1/realtime_stitching.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "RealtimeStitchingApiProto";
option java_package = "com.flexport.freightrouting.realtimestitching.v1beta1";
option ruby_package = "Flexport::FreightRouting::RealtimeStitching::V1Beta1";

// API for realtime stitching
service RealtimeStitchingAPI {
  // Fetch CFS-to-Port mappings
  rpc ListCfsToPortMappings(ListCfsToPortMappingsRequest) returns (ListCfsToPortMappingsResponse);

  // Fetch the stitched LCL routes
  rpc ListLclStitchedRoutes(ListLclStitchedRoutesRequest) returns (ListLclStitchedRoutesResponse);

  // Fetch the stitched FCL routes
  rpc ListFclStitchedRoutes(ListFclStitchedRoutesRequest) returns (ListFclStitchedRoutesResponse);

  // Fetch the stitched Air routes
  rpc ListAirStitchedRoutes(ListAirStitchedRoutesRequest) returns (ListAirStitchedRoutesResponse);
}

message ListCfsToPortMappingsRequest {
  repeated string port_fids = 1;
  repeated string cfs_fids = 2;
  repeated string carrier_fids = 3;
  google.protobuf.BoolValue supports_import = 4;
  google.protobuf.BoolValue supports_export = 5;
}

message ListCfsToPortMappingsResponse {
  string request_id = 1;
  repeated CfsToPortMapping mappings = 2;
}

// Request to fetch the stitched LCL routes
message ListLclStitchedRoutesRequest {
  // The route to be stitched
  Route route = 1;

  // The freight type
  FreightType freight_type = 2;

  // The quote attributes
  QuoteAttributes quote_attributes = 3;

  // The charge attributes
  ChargeAttributes charge_attributes = 4;

  // The cargo details
  LclCargoDetails cargo_details = 5;

  // The filters
  LclFilters filters = 6;
}

// Stitched LCL routes response
message ListLclStitchedRoutesResponse {
  // The request id
  string request_id = 1;

  // The stitched routes
  repeated StitchedRoute stitched_route = 2;

  // The additional stitcher data, will contain all possible routes and all offerings used for stitching
  AdditionalStitcherData additional_stitcher_data = 3;
}

// Request to fetch the stitched FCL routes
message ListFclStitchedRoutesRequest {
  // The route to be stitched
  Route route = 1;

  // The freight type
  FreightType freight_type = 2;

  // The quote attributes
  QuoteAttributes quote_attributes = 3;

  // The charge attributes
  ChargeAttributes charge_attributes = 4;

  // The cargo details
  FclCargoDetails cargo_details = 5;

  // The filters
  FclFilters filters = 6;
}

// Stitched FCL routes response
message ListFclStitchedRoutesResponse {
  // The request id
  string request_id = 1;

  // The stitched routes
  repeated StitchedRoute stitched_route = 2;

  // The additional stitcher data, will contain all possible routes and all offerings used for stitching
  AdditionalStitcherData additional_stitcher_data = 3;
}

// Request to fetch the stitched Air routes
message ListAirStitchedRoutesRequest {
  // The route to be stitched
  Route route = 1;

  // The freight type
  FreightType freight_type = 2;

  // The quote attributes
  QuoteAttributes quote_attributes = 3;

  // The charge attributes
  ChargeAttributes charge_attributes = 4;

  // The cargo details
  AirCargoDetails cargo_details = 5;

  // The filters
  AirFilters filters = 6;
}

// Stitched Air routes response
message ListAirStitchedRoutesResponse {
  // The request id
  string request_id = 1;

  // The stitched routes
  repeated StitchedRoute stitched_route = 2;

  // The additional stitcher data, will contain all possible routes and all offerings used for stitching
  AdditionalStitcherData additional_stitcher_data = 3;
}
