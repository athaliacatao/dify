// TEAM: order_management

syntax = "proto3";

package flexport.ordermanagement.loadplan.v1beta1;

option java_multiple_files = true;
option java_package = "com.flexport.ordermanagement.loadplan.v1beta1";
option ruby_package = "Flexport::OrderManagement::LoadPlan::V1Beta1";

// Grpc endpoint for the Load Plan service
// https://github.com/flexport/load-plan
service LoadPlanServiceAPI {
  // Set the load plan expected status for a shipment.
  rpc SetLoadPlanExpected(SetLoadPlanExpectedRequest) returns (SetLoadPlanExpectedResponse) {}

  // Get load plan information about a shipment.
  rpc GetShipmentLoadPlanInfo(GetShipmentLoadPlanInfoRequest) returns (GetShipmentLoadPlanInfoResponse) {}

  // Trigger asynchronous automated digitization for a shipment. Returns an empty response immediately.
  // This endpoint gathers all documents that do not already have a partial load plan and digitizes them before
  // marking the "Digitize CLR" work item as ready for manual work.
  rpc TriggerAutomatedDigitization(TriggerAutomatedDigitizationRequest) returns (TriggerAutomatedDigitizationResponse) {}
}

message SetLoadPlanExpectedRequest {
  // The flex id (FLEX-1234) of the shipment to update.
  string shipment_flex_id = 1;
  // The new load plan expected status for the shipment.
  bool load_plan_expected = 2;
}

message SetLoadPlanExpectedResponse {
  // The previous load plan expected status for the shipment.
  bool previous_load_plan_expected = 1;
}

message GetShipmentLoadPlanInfoRequest {
  // The flex id (FLEX-1234) of the shipment to get information for.
  string shipment_flex_id = 1;
}

message GetShipmentLoadPlanInfoResponse {
  // The load plan expected status for the shipment.
  // Generally we expect a load plan for FCL shipments that have purchase orders attached for clients
  // that have the load plan feature enabled.
  bool load_plan_expected = 1;
  // The load plan associated with this shipment.
  // Not set if there is no load plan for this shipment.
  optional LoadPlan load_plan = 2;
}

message TriggerAutomatedDigitizationRequest {
  // The flex id (FLEX-1234) of the shipment to trigger automated digitization for.
  string shipment_flex_id = 1;
}

message TriggerAutomatedDigitizationResponse {
  // Intentionally empty.
}

message LoadPlan {
  string load_plan_fid = 1;
  // Load plans go through a review process before being confirmed.
  // This state represents their current status in that review process.
  LoadPlanState load_plan_state = 2;
}

enum LoadPlanState {
  LOAD_PLAN_STATE_INVALID = 0;
  LOAD_PLAN_STATE_PENDING = 1;
  LOAD_PLAN_STATE_CONFIRMED = 2;
  LOAD_PLAN_STATE_REJECTED = 3;
}
