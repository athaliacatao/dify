// TEAM: perseus

syntax = "proto3";

package flexport.consolplanningmanager.shipmentconsolidationinstruction.v1beta1;

import "flexport/os/grpc/type/datetime/v1beta1/iso_8601_datetime.proto";
import "flexport/os/v1/types/cargo/v1/cargo.proto";

option java_multiple_files = true;
option java_outer_classname = "ShipmentConsolidationInstructionProto";
option java_package = "com.flexport.consolplanningmanager.shipmentconsolidationinstruction.v1beta1";
option ruby_package = "Flexport::ConsolPlanningManager::ShipmentConsolidationInstruction::V1Beta1";

enum InstructionType {
  INSTRUCTION_TYPE_INVALID = 0;
  INSTRUCTION_TYPE_SHIPMENT_CONSTRAINT = 1;
}

message Affinity {
  // The target utilization rate of the container, 0.0 to 1.0, optional
  optional float utilization = 1;
  // Specifies an ISO6346 container size, optional
  optional flexport.os.v1.types.cargo.v1.Iso6346ContainerSize container_size = 2;
  // shipment in same group. uuid format
  string shipping_group_id = 3;
}

message ShipmentConstraintDetail {
  string shipment_fid = 1;
  // The time by which the shipment must arrive at the destination
  flexport.os.grpc.type.datetime.v1beta1.Iso8601Datetime must_arrive_by_date = 2;
  // The time by which the shipment must be ready for consolidation
  flexport.os.grpc.type.datetime.v1beta1.Iso8601Datetime first_consolidation_date = 3;
  optional Affinity affinity = 4;
}

message Instruction {
  InstructionType type = 1;
  // The service name of the source of the instruction
  string source = 2;
  // The client reference id of the source of the instruction, sender can use this to obtain the instruction status
  optional string client_reference_id = 3;
  oneof detail {
    ShipmentConstraintDetail shipment_constraint_detail = 4;
  }
}

message MessageBody {
  repeated Instruction instructions = 1;
}
