// TEAM: network_entities

syntax = "proto3";

package flexport.network.v1beta1;

import "flexport/executioncoordinator/types/query/v1/filters.proto";
import "flexport/network/v1beta1/address.proto";
import "flexport/network/v1beta1/carrier.proto";
import "flexport/network/v1beta1/client.proto";
import "flexport/network/v1beta1/company.proto";
import "flexport/network/v1beta1/company_entity.proto";
import "flexport/network/v1beta1/contact.proto";
import "flexport/network/v1beta1/freight_partner.proto";
import "flexport/network/v1beta1/location.proto";
import "flexport/network/v1beta1/network_api_helpers.proto";
import "flexport/network/v1beta1/network_connection.proto";
import "flexport/network/v1beta1/network_filters.proto";
import "flexport/network/v1beta1/network_location.proto";
import "flexport/network/v1beta1/network_order_by.proto";
import "flexport/network/v1beta1/tz_world.proto";
import "flexport/network/v1beta1/vessel.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "NetworkApiProto";
option java_package = "com.flexport.network.v1beta1";
option ruby_package = "Flexport::Network::V1Beta1";

// All RPCs that the Network engine serves go here.
service NetworkAPI {
  // Fetch a single Address.
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse);
  // Fetch multiple Addresses.
  rpc ListAddresses(ListAddressesRequest) returns (ListAddressesResponse);
  // Fetch Addresses corresponding to Clients.
  rpc GetAddressesForClients(GetAddressesForClientsRequest) returns (GetAddressesForClientsResponse);
  // Fetch addresses by fuzzy search.
  rpc SearchAddresses(SearchAddressesRequest) returns (SearchAddressesResponse);
  // Fetch a single Carrier.
  rpc GetCarrier(GetCarrierRequest) returns (GetCarrierResponse);
  // Fetch multiple Carriers.
  rpc ListCarriers(ListCarriersRequest) returns (ListCarriersResponse);
  // Update a single Carrier.
  rpc UpdateCarrier(UpdateCarrierRequest) returns (UpdateCarrierResponse);
  // Fetch a single Client.
  rpc GetClient(GetClientRequest) returns (GetClientResponse);
  // Fetch multiple Clients.
  rpc ListClients(ListClientsRequest) returns (ListClientsResponse);
  // Create a Client.
  rpc CreateClient(CreateClientRequest) returns (CreateClientResponse);
  // Fetch a single Company.
  rpc GetCompany(GetCompanyRequest) returns (GetCompanyResponse);
  // Fetch multiple Companies.
  rpc ListCompanies(ListCompaniesRequest) returns (ListCompaniesResponse);
  // Create a Company.
  rpc CreateCompany(CreateCompanyRequest) returns (CreateCompanyResponse);
  // Fetch a single Company Entity.
  rpc GetCompanyEntity(GetCompanyEntityRequest) returns (GetCompanyEntityResponse);
  // Fetch multiple Company Entities.
  rpc ListCompanyEntities(ListCompanyEntitiesRequest) returns (ListCompanyEntitiesResponse);
  // Create a company entity.
  rpc CreateCompanyEntity(CreateCompanyEntityRequest) returns (CreateCompanyEntityResponse);
  // Update a company entity.
  rpc UpdateCompanyEntity(UpdateCompanyEntityRequest) returns (UpdateCompanyEntityResponse);
  // Fetch a single NetworkConnection.
  rpc GetNetworkConnection(GetNetworkConnectionRequest) returns (GetNetworkConnectionResponse);
  // Fetch multiple NetworkConnections.
  rpc ListNetworkConnections(ListNetworkConnectionsRequest) returns (ListNetworkConnectionsResponse);
  // Fetch a single NetworkLocation.
  rpc GetNetworkLocation(GetNetworkLocationRequest) returns (GetNetworkLocationResponse);
  // Fetch multiple NetworkLocations.
  rpc ListNetworkLocations(ListNetworkLocationsRequest) returns (ListNetworkLocationsResponse);
  // Fetch a single Contact.
  rpc GetContact(GetContactRequest) returns (GetContactResponse);
  // Fetch multiple Contacts.
  rpc ListContacts(ListContactsRequest) returns (ListContactsResponse);
  // Creates an existing Contact.
  rpc CreateContact(CreateContactRequest) returns (CreateContactResponse);
  // Updates an existing Contact.
  rpc UpdateContact(UpdateContactRequest) returns (UpdateContactResponse);
  // Fetch a single Freight Partner.
  rpc GetFreightPartner(GetFreightPartnerRequest) returns (GetFreightPartnerResponse);
  // Fetch multiple Freight Partners.
  rpc ListFreightPartners(ListFreightPartnersRequest) returns (ListFreightPartnersResponse);
  // Fetch a single Location.
  rpc GetLocation(GetLocationRequest) returns (GetLocationResponse);
  // Fetch multiple Locations.
  rpc ListLocations(ListLocationsRequest) returns (ListLocationsResponse);
  // Create a location.
  rpc CreateLocation(CreateLocationRequest) returns (CreateLocationResponse);
  // Update a location.
  rpc UpdateLocation(UpdateLocationRequest) returns (UpdateLocationResponse);
  // Fetch a single TZWorld.
  rpc GetTZWorld(GetTZWorldRequest) returns (GetTZWorldResponse);
  // Fetch multiple TZWorlds.
  rpc ListTZWorlds(ListTZWorldsRequest) returns (ListTZWorldsResponse);
  // Fetch a single Vessel.
  rpc GetVessel(GetVesselRequest) returns (GetVesselResponse);
  // Fetch multiple Vessels.
  rpc ListVessels(ListVesselsRequest) returns (ListVesselsResponse);
  // Fetch squads assigned to a client
  rpc GetSquadsByClientFid(GetSquadsByClientFidRequest) returns (GetSquadsByClientFidResponse);
}

message GetAddressRequest {
  oneof criteria {
    int32 address_id = 1;
    string address_fid = 2;
  }
  //
  // If provided, pretend the Address doesn't exist if it's not visible to this actor.
  VisibilityFilter visibility_filter = 3;
}

message GetAddressResponse {
  Address address = 1;
}

message ListAddressesRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // The order of the results. Default is undefined.
  oneof order_by {
    OrderByName order_by_name = 2;
    OrderByDistance order_by_distance = 3;
    OrderByAddressDistance order_by_address_distance = 35;
  }
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 4;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 5;
    string fid = 6;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 7;
  }
  oneof name_discriminator {
    string name = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter name_filter = 9;
  }
  oneof country_code_discriminator {
    string country_code = 10;
    flexport.executioncoordinator.types.query.v1.StringFilter country_code_filter = 11;
  }
  flexport.executioncoordinator.types.query.v1.NearestFilter nearest_filter = 12;
  oneof location_id_discriminator {
    int32 location_id = 13;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter location_id_filter = 14;
    string location_fid = 15;
    flexport.executioncoordinator.types.query.v1.StringFilter location_fid_filter = 16;
  }
  oneof company_id_discriminator {
    int32 company_id = 17;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 18;
    string company_fid = 19;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 20;
  }
  BoolFilter archived_filter = 27;
  BoolFilter verified_filter = 34;
  oneof iata_code_discriminator {
    string iata_code = 28;
    flexport.executioncoordinator.types.query.v1.StringFilter iata_code_filter = 29;
  }
  oneof loc_code_discriminator {
    string loc_code = 30;
    flexport.executioncoordinator.types.query.v1.StringFilter loc_code_filter = 31;
  }
  oneof city_discriminator {
    string city = 32;
    flexport.executioncoordinator.types.query.v1.StringFilter city_filter = 33;
  }
  VisibilityFilter visibility_filter = 21;
  oneof type_discriminator {
    AddressType type = 22;
    AddressTypeFilter type_filter = 23;
  }
  FactoryFilter factory_filter = 24;
  PortFilter port_filter = 25;
  TerminalOrCfsFilter terminal_or_cfs_filter = 26;
}

message ListAddressesResponse {
  repeated Address addresses = 1;
}

message SearchAddressesRequest {
  uint32 limit = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue street_address = 3;
  google.protobuf.StringValue street_address2 = 4;
  google.protobuf.StringValue city = 5;
  google.protobuf.StringValue state = 6;
  google.protobuf.StringValue zip = 7;
  google.protobuf.StringValue country_code = 8;
  AddressType type = 9;
  google.protobuf.StringValue company_fid = 10;
  float min_similarity = 11;
}

message SearchAddressesResponse {
  repeated Address addresses = 1;
}

message GetAddressesForClientsRequest {
  repeated string client_fids = 1;
}

message GetAddressesForClientsResponse {
  repeated ClientFidToAddresses client_fid_to_addresses = 1;
}

message GetCarrierRequest {
  oneof criteria {
    int32 carrier_id = 1;
    string carrier_fid = 2;
  }
}

message GetCarrierResponse {
  Carrier carrier = 1;
}

message ListCarriersRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof company_id_discriminator {
    int32 company_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 7;
    string company_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 9;
  }
  oneof scac_code_discriminator {
    string scac_code = 11;
    flexport.executioncoordinator.types.query.v1.StringFilter scac_code_filter = 12;
  }
  oneof iata_code_discriminator {
    string iata_code = 13;
    flexport.executioncoordinator.types.query.v1.StringFilter iata_code_filter = 14;
  }
  oneof awb_prefix_discriminator {
    string awb_prefix = 15;
    flexport.executioncoordinator.types.query.v1.StringFilter awb_prefix_filter = 16;
  }

  RateSheetQueryFilter rate_sheet_query_filter = 10;
}

message ListCarriersResponse {
  repeated Carrier carriers = 1;
}

message UpdateCarrierRequest {
  oneof criteria {
    int32 carrier_id = 1;
    string carrier_fid = 2;
  }
  google.protobuf.StringValue scac_code = 3;
  repeated string aliases = 4;
  google.protobuf.Timestamp self_billing_at = 5;
}

message UpdateCarrierResponse {
  Carrier carrier = 1;
}

message GetClientRequest {
  oneof criteria {
    int32 client_id = 1;
    string client_fid = 2;
  }
}

message GetClientResponse {
  Client client = 1;
}

message ListClientsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof company_id_discriminator {
    int32 company_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 7;
    string company_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 9;
  }
  oneof company_entity_id_discriminator {
    int32 company_entity_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_entity_id_filter = 11;
    string company_entity_fid = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter company_entity_fid_filter = 13;
  }
}

message ListClientsResponse {
  repeated Client clients = 1;
}

message CreateClientRequest {
  oneof criteria {
    int32 company_id = 1;
    string company_fid = 2;
  }
}

message CreateClientResponse {
  Client client = 1;
}

message GetCompanyRequest {
  oneof criteria {
    int32 company_id = 1;
    string company_fid = 2;
  }
  // If provided, pretend the Company doesn't exist if it's not visible to this actor.
  VisibilityFilter visibility_filter = 3;
}

message GetCompanyResponse {
  Company company = 1;
}

message ListCompaniesRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof client_id_discriminator {
    int32 client_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter client_id_filter = 7;
    string client_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter client_fid_filter = 9;
  }
  oneof warehouse_partner_id_discriminator {
    int32 warehouse_partner_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter warehouse_partner_id_filter = 11;
  }
  oneof freight_partner_id_discriminator {
    int32 freight_partner_id = 12;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter freight_partner_id_filter = 13;
    string freight_partner_fid = 14;
    flexport.executioncoordinator.types.query.v1.StringFilter freight_partner_fid_filter = 15;
  }
  oneof carrier_id_discriminator {
    int32 carrier_id = 16;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter carrier_id_filter = 17;
    string carrier_fid = 18;
    flexport.executioncoordinator.types.query.v1.StringFilter carrier_fid_filter = 19;
  }
  VisibilityFilter visibility_filter = 20;
  // Return from_companies that share this to_company.
  oneof to_company_id_discriminator {
    int32 to_company_id = 21;
    string to_company_fid = 22;
  }
  // Return to_companies that share this from_company.
  oneof from_company_id_discriminator {
    int32 from_company_id = 23;
    string from_company_fid = 24;
  }
  oneof company_entity_id_discriminator {
    int32 company_entity_id = 25;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_entity_id_filter = 26;
    string company_entity_fid = 27;
    flexport.executioncoordinator.types.query.v1.StringFilter company_entity_fid_filter = 28;
  }
}

message ListCompaniesResponse {
  repeated Company companies = 1;
}

message CreateCompanyRequest {
  string legal_name = 1;
}

message CreateCompanyResponse {
  Company company = 1;
}

message GetCompanyEntityRequest {
  oneof criteria {
    int32 company_entity_id = 1;
    string company_entity_fid = 2;
    ExternalRef company_entity_external_ref = 3;
  }
}

/** An external reference used by a specific company to refer to an entity. */
message ExternalRef {
  google.protobuf.StringValue external_ref = 1;
  // The company that uses this external ref to refer to the entity
  google.protobuf.StringValue for_company_fid = 2;
}

message GetCompanyEntityResponse {
  CompanyEntity company_entity = 1;
}

message ListCompanyEntitiesRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // The order of the results. Default is undefined.
  oneof order_by {
    OrderByName order_by_legal_name = 2;
  }
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 3;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 4;
    string fid = 5;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 6;
  }
  oneof legal_name_discriminator {
    string legal_name = 7;
    flexport.executioncoordinator.types.query.v1.StringFilter legal_name_filter = 8;
  }
  oneof company_id_discriminator {
    int32 company_id = 9;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 10;
    string company_fid = 11;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 12;
  }
  BoolFilter is_primary_filter = 21;
  BoolFilter archived_filter = 22;
  oneof address_id_discriminator {
    int32 address_id = 23;
    string address_fid = 24;
  }
}

message ListCompanyEntitiesResponse {
  repeated CompanyEntity company_entities = 1;
}

message CreateCompanyEntityRequest {
  string company_type = 1;
  oneof criteria {
    int32 company_id = 2;
    string company_fid = 3;
  }
  string legal_name = 4;
}

message CreateCompanyEntityResponse {
  CompanyEntity company_entity = 1;
}

message UpdateCompanyEntityRequest {
  oneof criteria {
    int32 company_entity_id = 1;
    string company_entity_fid = 2;
  }
  int32 company_id = 3;
  bool is_primary = 4;
  string company_type = 5;
  string legal_name = 6;
  google.protobuf.StringValue business_registration_country_code = 7;
  google.protobuf.StringValue qcc_key_no = 8;
  google.protobuf.StringValue registered_address_in_business_license = 9;
  google.protobuf.StringValue registered_name_in_business_license = 10;
  google.protobuf.StringValue registration_number_of_business_license = 11;
  bool agree_dg_declaration = 12;
  google.protobuf.StringValue agent_iata_code = 13;
  google.protobuf.StringValue business_registered_in = 14;
  bool compliant_for_destination_agent = 15;
  bool compliant_for_origin_agent = 16;
  google.protobuf.StringValue doing_business_as = 17;
  google.protobuf.StringValue duns_number = 18;
  google.protobuf.StringValue eori_number = 19;
  bool eori_resident_entity = 20;
  google.protobuf.StringValue fcc_number = 21;
  google.protobuf.Int32Value hk_known_shipper_status = 22;
  google.protobuf.StringValue hk_ra_number = 24;
  bool is_subject_to_export_control = 25;
  google.protobuf.StringValue kc_responsible_person = 26;
  google.protobuf.StringValue mc_number = 27;
  google.protobuf.StringValue us_dot_number = 29;
  google.protobuf.StringValue usci_number = 30;
  google.protobuf.Int32Value billable_entity_default_id = 31;
  google.protobuf.StringValue invoicing_currency_default_id = 32;
  google.protobuf.Int64Value invoicing_entity_default_id = 33;
  google.protobuf.Int32Value netsuite_id = 34;
}

message UpdateCompanyEntityResponse {
  CompanyEntity company_entity = 1;
}

message GetNetworkConnectionRequest {
  oneof criteria {
    int32 network_connection_id = 1;
    string network_connection_fid = 2;
  }
}

message GetNetworkConnectionResponse {
  NetworkConnection network_connection = 1;
}

message ListNetworkConnectionsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof to_company_id_discriminator {
    int32 to_company_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter to_company_id_filter = 7;
    string to_company_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter to_company_fid_filter = 9;
  }
  oneof from_company_id_discriminator {
    int32 from_company_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter from_company_id_filter = 11;
    string from_company_fid = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter from_company_fid_filter = 13;
  }
}

message ListNetworkConnectionsResponse {
  repeated NetworkConnection network_connections = 1;
}

message GetNetworkLocationRequest {
  oneof criteria {
    int32 network_location_id = 1;
    string network_location_fid = 2;
  }
}

message GetNetworkLocationResponse {
  NetworkLocation network_location = 1;
}

message ListNetworkLocationsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof network_connection_id_discriminator {
    int32 network_connection_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter network_connection_id_filter = 7;
    string network_connection_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter network_connection_fid_filter = 9;
  }
  oneof location_id_discriminator {
    int32 location_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter location_id_filter = 11;
    string location_fid = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter location_fid_filter = 13;
  }
}

message ListNetworkLocationsResponse {
  repeated NetworkLocation network_locations = 1;
}

message GetContactRequest {
  oneof criteria {
    int32 contact_id = 1;
    string contact_fid = 2;
  }
  // If provided, pretend the Location doesn't exist if it's not visible to this actor.
  VisibilityFilter visibility_filter = 3;
}

message GetContactResponse {
  Contact contact = 1;
}

message ListContactsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof location_id_discriminator {
    int32 location_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter location_id_filter = 7;
    string location_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter location_fid_filter = 9;
  }
  oneof company_id_discriminator {
    int32 company_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 11;
    string company_fid = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 13;
  }
  SharingLevelFilter sharing_level_filter = 14;
  VisibilityFilter visibility_filter = 19;
  oneof user_id_discriminator {
    int32 user_id = 15;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter user_id_filter = 16;
    string user_fid = 17;
    flexport.executioncoordinator.types.query.v1.StringFilter user_fid_filter = 18;
  }
}

message ListContactsResponse {
  repeated Contact contacts = 1;
}

message UpdateContactRequest {
  oneof criteria {
    int32 contact_id = 1;
    string contact_fid = 2;
  }
  string name = 3;
  string email = 4;
  string phone = 5;
  Sharing sharing = 6;
  google.protobuf.Int32Value company_id = 7;
  repeated int32 location_ids = 8;
  repeated string location_fids = 9;
}

message UpdateContactResponse {
  Contact contact = 1;
}

message CreateContactRequest {
  string name = 3;
  string email = 4;
  string phone = 5;
  Sharing sharing = 6;
  google.protobuf.Int32Value company_id = 7;
  repeated int32 location_ids = 8;
  repeated string location_fids = 9;
}

message CreateContactResponse {
  Contact contact = 1;
}

message GetFreightPartnerRequest {
  oneof criteria {
    int32 freight_partner_id = 1;
    string freight_partner_fid = 2;
  }
}

message GetFreightPartnerResponse {
  FreightPartner freight_partner = 1;
}

message ListFreightPartnersRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof company_id_discriminator {
    int32 company_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 7;
    string company_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 9;
  }
  BoolFilter air_filter = 10;
  BoolFilter demo_filter = 11;
  BoolFilter ocean_filter = 12;
  BoolFilter truck_filter = 13;
  oneof company_entity_id_discriminator {
    int32 company_entity_id = 14;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_entity_id_filter = 15;
    string company_entity_fid = 16;
    flexport.executioncoordinator.types.query.v1.StringFilter company_entity_fid_filter = 17;
  }
}

message ListFreightPartnersResponse {
  repeated FreightPartner freight_partners = 1;
}

message GetLocationRequest {
  oneof criteria {
    int32 location_id = 1;
    string location_fid = 2;
    ExternalRef location_external_ref = 4;
  }
  // If provided, pretend the Location doesn't exist if it's not visible to this actor.
  VisibilityFilter visibility_filter = 3;
}

message GetLocationResponse {
  Location location = 1;
}

message ListLocationsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof company_id_discriminator {
    int32 company_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter company_id_filter = 7;
    string company_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter company_fid_filter = 9;
  }
  oneof contact_id_discriminator {
    int32 contact_id = 16;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter contact_id_filter = 17;
    string contact_fid = 18;
    flexport.executioncoordinator.types.query.v1.StringFilter contact_fid_filter = 19;
  }
  oneof address_id_discriminator {
    int32 address_id = 10;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter address_id_filter = 11;
    string address_fid = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter address_fid_filter = 13;
  }
  SharingLevelFilter sharing_level_filter = 14;
  VisibilityFilter visibility_filter = 15;
}

message ListLocationsResponse {
  repeated Location locations = 1;
}

message CreateLocationRequest {
  int32 for_company_id = 1;
  oneof to_company {
    int32 to_company_id = 2;
    string to_company_name = 3;
  }
  oneof address_criteria {
    AddressParams address = 4;
    int32 address_id = 9;
  }
  GeoParams geo = 5;
  Sharing sharing = 6;
  google.protobuf.StringValue external_ref = 7;
  repeated LocationPartner designated_partners = 8;
}

message CreateLocationResponse {
  Location location = 1;
}

message UpdateLocationRequest {
  int32 id = 1;
  int32 for_company_id = 2;
  google.protobuf.Int32Value to_company_id = 3;
  oneof address_criteria {
    AddressParams address = 4;
    int32 address_id = 9;
  }
  GeoParams geo = 5;
  Sharing sharing = 6;
  google.protobuf.StringValue external_ref = 7;
  repeated LocationPartner designated_partners = 8;
}

message UpdateLocationResponse {
  Location location = 1;
}

message GetTZWorldRequest {
  int32 tz_world_gid = 1;
}

message GetTZWorldResponse {
  TZWorld tz_world = 1;
}

message ListTZWorldsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  oneof gid_discriminator {
    int32 gid = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter gid_filter = 3;
  }
  oneof tzid_discriminator {
    string tzid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter tzid_filter = 5;
  }
  CoordinateFilter coordinate_filter = 6;
}

message ListTZWorldsResponse {
  repeated TZWorld tz_worlds = 1;
}

message GetVesselRequest {
  oneof criteria {
    int32 vessel_id = 1;
    string vessel_fid = 2;
    string ship_imo = 3;
  }
}

message GetVesselResponse {
  Vessel vessel = 1;
}

message ListVesselsRequest {
  // The maximum number of entries to return. If a value of zero (the default) is provided, then 100 will be used.
  // If the value provided exceeds 10,000, then 10,000 will be used.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  oneof id_discriminator {
    int32 id = 2;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter id_filter = 3;
    string fid = 4;
    flexport.executioncoordinator.types.query.v1.StringFilter fid_filter = 5;
  }
  oneof carrier_id_discriminator {
    int32 carrier_id = 6;
    flexport.executioncoordinator.types.query.v1.IntegerValueFilter carrier_id_filter = 7;
    string carrier_fid = 8;
    flexport.executioncoordinator.types.query.v1.StringFilter carrier_fid_filter = 9;
  }
  oneof name_discriminator {
    string name = 10;
    flexport.executioncoordinator.types.query.v1.StringFilter name_filter = 11;
  }
  oneof country_code_discriminator {
    string country_code = 12;
    flexport.executioncoordinator.types.query.v1.StringFilter country_code_filter = 13;
  }
}

message ListVesselsResponse {
  repeated Vessel vessels = 1;
}

message GetSquadsByClientFidRequest {
  string client_fid = 1;
}

message Squad {
  string squad_fid = 1;
  string squad_name = 2;
  string office = 3;
  bool is_primary = 4;
}

message GetSquadsByClientFidResponse {
  repeated Squad squads = 1;
}
