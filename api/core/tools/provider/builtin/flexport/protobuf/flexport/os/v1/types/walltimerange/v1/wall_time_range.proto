// TEAM: flexport_os

syntax = "proto3";

package flexport.os.v1.types.walltimerange.v1;

option java_multiple_files = true;
option java_outer_classname = "WallTimeRangeProto";
option java_package = "com.flexport.os.v1.types.walltimerange.v1";
option ruby_package = "Flexport::OS::V1::Types::WallTimeRange::V1";

// A WallTimeRange represents a time range as perceived by a user on a wall clock. It is an
// expressive but clunky type. Use this type only when you need to support truly arbitrary ranges.
//
// If you only need to represent a single instant, then WallTimeDateTime is a simpler choice.
// If you only need to represent either a date or a date time, then WallTimeDateOrDateTime is a
// simpler choice.
//
// This type evolved from our Ruby and GraphQL WallTime::Range objects. To convert to/from these
// (as well as DateTimeWithZone), use the protobuf helper functions in wall_time/range.rb.
//
// This type should generally not be used to represent a range or duration of an event that could
// span timezones. For example, it might be confusing to represent the total duration of a
// flight with this type because the relevant timezones might be different for "start" and "end".
//
// For more background see http://go/datetimes.
//
message WallTimeRange {
  WallTimeRangeEdge start = 1;
  WallTimeRangeEdge end = 2;
  // The IANA timezone identifier for the location of this milestone (e.g. America/Los_Angeles)
  string timezone = 3;
  // Optional. The IANA timezone db version used by the caller.
  string timezone_version = 100;
}

// A single wall time that is part of a range.
// This type should only be used as part of a WallTimeRange message.
message WallTimeRangeEdge {
  // The specified datetime in user local time
  LocalDateTime local_datetime = 1;
  // Whether the range boundary at this time includes or excludes it
  RangeBoundary boundary = 2;
}

// Adapted from a similarly-named message in Google's public API.
// This type should only be used as part of a WallTimeRange message.
// If https://flexport.atlassian.net/browse/SP-438 is resolved, we may
// replace this type (in a safe way) with the equivalent Google definition.
// In the meantime, use either WallTimeRange or WallTimeDate.
// If these are not sufficient, perhaps we can add a WallTimeDateTime. Ask #soa.
message LocalDateTime {
  // Year of date. From 1 on.
  int32 year = 1;
  // Month of year. From 1 to 12.
  int32 month = 2;
  // Day of month. From 1 to 31; must be valid for that year and month.
  int32 day = 3;
  // Hours of day, in 24 hour format. From 0 to 23.
  int32 hours = 4;
  // Minutes of hour. From 0 to 59.
  int32 minutes = 5;
  // Seconds of minute. Usually from 0 to 59.
  int32 seconds = 6;
  // Fractions of a second in nanoseconds. From 0 to 999,999,999.
  int32 nanos = 7;
}

// A time range can be inclusive of the border timestamp, or exclusive of it
// e.g., [2020-01-01T00:00:00, 2020-01-02T00:00:00) represents "all day January 1, 2020 in the local timezone"
// This type should only be used as part of a WallTimeRange message.
enum RangeBoundary {
  RANGE_BOUNDARY_INVALID = 0;
  RANGE_BOUNDARY_INCLUSIVE = 1;
  RANGE_BOUNDARY_EXCLUSIVE = 2;
}
