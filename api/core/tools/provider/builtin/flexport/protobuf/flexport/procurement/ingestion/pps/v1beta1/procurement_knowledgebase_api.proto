// TEAM: procurement

syntax = "proto3";

package flexport.procurement.ingestion.pps.v1beta1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "ProcurementKnowledgeBaseApiProto";
option java_package = "com.flexport.procurement.ingestion.pps.v1beta1";
option ruby_package = "Flexport::Procurement::Ingestion::Pps::V1Beta1";

service ProcurementKnowledgeBaseAPI {
  rpc RefreshKnowledgeBase(RefreshKnowledgeBaseRequest) returns (RefreshKnowledgeBaseResponse) {}
  rpc GetSurchargeApplicability(GetSurchargeApplicabilityRequest) returns (GetSurchargeApplicabilityResponse) {}
  rpc ListSurchargeApplicabilities(ListSurchargeApplicabilitiesRequest) returns (stream ListSurchargeApplicabilitiesResponse) {}
  rpc GetCostOffsets(GetCostOffsetsRequest) returns (GetCostOffsetsResponse) {}
  rpc GetDetentionAndDemurrage(GetDetentionAndDemurrageRequest) returns (GetDetentionAndDemurrageResponse) {}
  rpc GetLocodesFromNames(GetLocodesFromNamesRequest) returns (GetLocodesFromNamesResponse) {}
  rpc GetPartnerRates(GetPartnerRatesRequest) returns (GetPartnerRatesResponse) {}
  rpc GetPartOfFreightEstimations(GetPartOfFreightEstimationsRequest) returns (GetPartOfFreightEstimationsResponse) {}
}

message RefreshKnowledgeBaseRequest {
  DataSource source_to_refresh = 1;
}

message RefreshKnowledgeBaseResponse {
  repeated SourceStatus source_statuses = 1;
  RequestResult result = 2;
}

message SourceStatus {
  enum RefreshStatus {
    REFRESH_STATUS_INVALID = 0;
    REFRESH_STATUS_NONE = 1;
    REFRESH_STATUS_SUCCESS = 2;
    REFRESH_STATUS_FAILURE = 3;
  }
  DataSource source = 1;
  RefreshStatus refresh_status = 2;
  google.protobuf.Timestamp last_refreshed = 3;
}

enum DataSource {
  DATA_SOURCE_INVALID = 0;
  DATA_SOURCE_NONE = 1;
  DATA_SOURCE_PORT_DICTIONARY = 2;
  DATA_SOURCE_MAPPING_DICTIONARY = 3;
  DATA_SOURCE_CHARGE_DICTIONARY = 4;
  DATA_SOURCE_ALL = 5;
  DATA_SOURCE_COST_OFFSETS = 6;
  DATA_SOURCE_DETENTION_DEMURRAGE = 7;
  DATA_SOURCE_PARTNER_RATES = 8;
  DATA_SOURCE_BASE_DICTIONARY = 9;
}

// The category that a surcharge belongs to for cost breakdown
enum ChargeCategory {
  CHARGE_CATEGORY_INVALID = 0;
  CHARGE_CATEGORY_PART_OF_FREIGHT = 1;
  CHARGE_CATEGORY_LOCAL = 2;
  CHARGE_CATEGORY_RULES_BASED = 3; // This means that additional parameters are required to determine the correct charge category
  CHARGE_CATEGORY_ORIGIN = 4;
  CHARGE_CATEGORY_DESTINATION = 5;
  CHARGE_CATEGORY_MAIN_FREIGHT = 6;
}

// General charge information, not specific to a carrier
message ChargeInfo {
  // The Flexport charge name
  string charge_name = 2;
  // The general category that the Flexport charge falls into
  ChargeCategory charge_category = 3;
}

message ListSurchargeApplicabilitiesRequest {
  //Each RateDetail represents one possible unique rate combination
  repeated RateDetails rate_details = 2;
}

message ListSurchargeApplicabilitiesResponse {
  RateApplicableCharges applicable_charges = 1;
}

message GetSurchargeApplicabilityRequest {
  //Each RateDetail represents one possible unique rate combination
  repeated RateDetails rate_details = 2;
}

message GetSurchargeApplicabilityResponse {
  repeated RateApplicableCharges applicable_charges = 1;
  RequestResult result = 2;
}

message GetCostOffsetsRequest {
  int32 request_id = 1;
  repeated CostOffsetParameters cost_offset_parameters = 2;
}

message CostOffsetParameters {
  repeated string stops = 1;
  string carrier_scac_code = 2;
  optional string contract_number = 3;
  optional Date date_of_service = 4;
}

message GetCostOffsetsResponse {
  int32 request_id = 1;
  repeated CostOffset cost_offsets = 2;
}

message CostOffset {
  // request params for matching req to res (1-5)
  repeated string stops = 1;
  string carrier_scac_code = 2;
  optional string contract_number = 3;
  optional Date date_of_service = 4;

  ValidityTerm offset_validity = 5;
  Amount amount = 6;
  string origin_port_group = 7;
  string destination_port_group = 8;
}

//A list of charges for a given rate
message RateApplicableCharges {
  enum RateApplicableChargeResult {
    RATE_APPLICABLE_CHARGE_RESULT_INVALID = 0;
    RATE_APPLICABLE_CHARGE_RESULT_SUCCESS = 1;
    RATE_APPLICABLE_CHARGE_RESULT_FAILURE = 2;
  }
  RateApplicableChargeResult result = 1;
  repeated CarrierChargeApplicability carrier_charge_applicabilities = 2;
  int32 requested_rate_details_id = 3; //An ID number associated with each requested rate
}

//A specific charge for a given rate
message CarrierChargeApplicability {
  enum ChargeApplicabilityType {
    CHARGE_APPLICABILITY_TYPE_INVALID = 0;
    CHARGE_APPLICABILITY_TYPE_UNKNOWN = 1;
    CHARGE_APPLICABILITY_TYPE_SUBJECT_TO = 2;
    CHARGE_APPLICABILITY_TYPE_INCLUDED = 3;
  }
  string carrier_charge_name = 1;
  ChargeApplicabilityType applicability_type = 2;
  // General info about a mapped Flexport charge, if available
  optional ChargeInfo charge_info = 3;
  //If a TLM provided charge is present, it will be present here
  //If multiple TLM charges are available and there is no clear winner, this will be empty
  //This is also empty for included surcharges
  optional CarrierChargeCost carrier_charge_cost = 4;

  // The specific category that the charge belongs to, if available
  optional ChargeCategory charge_category = 5;

  string surcharge_inclusion_row_id = 6; // optional. blank for local charges
}

message CarrierChargeCost {
  enum PricingStructure {
    PRICING_STRUCTURE_INVALID = 0;
    PRICING_STRUCTURE_PER_UNIT = 1;
    PRICING_STRUCTURE_FLAT = 2;
  }
  PricingStructure pricing_structure = 2;
  Amount amount = 3;
  ValidityTerm validity = 4;
  optional string service_loop = 5;
  optional string client_fid = 6;
  string surcharge_rate_item_row_id = 7; // will always be present if the CarrierChargeCost is present.
}

enum PricingStructure {
  PRICING_STRUCTURE_INVALID = 0;
  PRICING_STRUCTURE_FLAT = 1;
  PRICING_STRUCTURE_PER_SHIPMENT = 2;
  PRICING_STRUCTURE_PER_BILL = 3;
  PRICING_STRUCTURE_PER_CONTAINER = 4;
}

message RateDetails {
  repeated int32 request_id = 1 [deprecated = true]; //An ID number associated with each given rate
  Date date_valid_on = 2; //The date to be used for filtering charges with different validities
  CarrierContract contract = 3; //The contract that the mainleg rate is coming from
  repeated string stops = 4; // The locodes for the stops on the shipment, in order from origin -> destination
  optional string iso_container_code = 5; //A single container code for the shipment
  optional string premium_service = 6;
  repeated string included_charges = 7; //A list of charges that were marked as inclusive during rate digitization
  repeated string subject_to_charges = 8; //A list of charges that were marked as inclusive during rate digitization
  int32 request_id_v2 = 9; //An singular ID number associated with each given rate
  optional DangerousGoodsType dangerous_goods_type = 10;
  optional string service_loop = 11; //To be used for filtering charges with different service loop applicabilities
  // If a client_fid is provided in the rate details request, then surcharges that are for that specific client will
  // be included, which they otherwise won't be. Surcharges that are not client specific will still apply but because
  // we prioritize more specific applicability, if both a client-specific charge and a non-client specific charge
  // apply, we will in some cases not return the non-client specific charge.
  optional string client_fid = 12;
}

// Specifies the date range a rate is valid for.
message ValidityTerm {
  Date validity_start = 1;
  Date validity_end = 2;
}

// A calendar date without a timezone.
message Date {
  // A common era year.
  int32 year = 1;
  // The month number (January = 1, December = 12, and so on).
  int32 month = 2;
  // The day of the month.
  int32 day = 3;
}

message Amount {
  string currency_code = 1;
  int64 micros = 2;
}

enum RequestResult {
  REQUEST_RESULT_INVALID = 0;
  REQUEST_RESULT_OK = 1;
  REQUEST_RESULT_FAIL = 2;
}

message CarrierContract {
  enum ContractType {
    CONTRACT_TYPE_INVALID = 0;
    CONTRACT_TYPE_UNKNOWN = 1;
    CONTRACT_TYPE_AMENDMENT = 2;
    CONTRACT_TYPE_GUIDELINE = 3;
  }
  optional string carrier_scac_code = 1;
  string contract_name = 2;
  optional ContractType contract_type = 3;
}

message GetLocodesFromNamesRequest {
  repeated PortNameItem port_name_items = 1;
}

message PortNameItem {
  enum PortNameType {
    PORT_NAME_TYPE_MAPPING_REQUEST_TYPE_INVALID = 0;
    PORT_NAME_TYPE_MAPPING_REQUEST_TYPE_UNKNOWN = 1;
    // A name to map to a single locode
    PORT_NAME_TYPE_MAPPING_REQUEST_TYPE_PORT_NAME = 2;
    // A carrier port group, general port group, or region to map to multiple locodes
    PORT_NAME_TYPE_MAPPING_REQUEST_TYPE_PORT_GROUP = 3;
  }
  PortNameType port_name_type = 1;
  // The input string to be mapped
  string original_name = 2;
  optional string carrier = 3;
}

message GetLocodesFromNamesResponse {
  repeated PortMappingResponseItem port_mapping_response_items = 1;
  RequestResult result = 2;
}

message PortMappingResponseItem {
  string request_name = 1;
  // Response differs between charges/ports/port groups and any other attributes that may be added
  oneof mapping {
    PortNameResponseItem port_name_response = 2;
    PortGroupResponseItem port_group_response = 3;
  }
}

message PortNameResponseItem {
  string locode = 1;
  string port_name = 2;
  // The parent locode for the port, such as USCHI for USHRY
  string parent_locode = 3;
  // Any associated locodes such as USLAX/USLGB
  repeated string linked_locodes = 4;
  // The port groups/regions that this locode belongs to
  repeated string port_groups = 5;
}

message PortGroupResponseItem {
  enum GroupType {
    GROUP_TYPE_INVALID = 0;
    GROUP_TYPE_UNKNOWN = 1;
    GROUP_TYPE_CARRIER = 2;
    GROUP_TYPE_REGION = 3;
    GROUP_TYPE_FLEXPORT = 4;
  }
  string port_group_name = 1;
  GroupType port_group_type = 2;
  optional string carrier_scac_code = 3;
  repeated string port_locodes = 4;
}

message GetDetentionAndDemurrageRequest {
  string carrier_scac_code = 1;
  string contract_number = 2;
  repeated Iso6346ContainerSize iso_container_sizes = 3;
  string port_locode = 4;
  string country_code = 5;
  LocationType location_type = 6;
  ChargeCode charge_code = 7;
  google.protobuf.Int32Value delay_day = 8;
  Date valid_on_date = 9;
}

message GetDetentionAndDemurrageResponse {
  repeated DetentionAndDemurrageRate rates = 1;
  int32 free_time = 2;
}

message DetentionAndDemurrageRate {
  message Amount {
    string currency_code = 1;
    google.protobuf.Int64Value micros = 2;
  }
  Amount amount = 1;
  google.protobuf.Int32Value start_day = 2;
  google.protobuf.Int32Value end_day = 3;
  Iso6346ContainerSize iso_container_size = 4;
  Date validity_start = 5;
  Date validity_end = 6;
  string port_locode = 7;
  string country_code = 8;
  LocationType location_type = 9;
  ChargeCode charge_code = 10;
  string contract_number = 11;
  string carrier_scac_code = 12;
  DayUnit day_unit = 13;
}

enum LocationType {
  LOCATION_TYPE_INVALID = 0;
  LOCATION_TYPE_ORIGIN = 1;
  LOCATION_TYPE_DESTINATION = 2;
}

enum ChargeCode {
  CHARGE_CODE_INVALID = 0;
  CHARGE_CODE_DETENTION = 1;
  CHARGE_CODE_DEMURRAGE = 2;
  CHARGE_CODE_DETENTION_DEMURRAGE = 3;
}

// From container_sizes.rb.
enum Iso6346ContainerSize {
  ISO6346_CONTAINER_SIZE_INVALID = 0;
  ISO6346_CONTAINER_SIZE_TWENTY_FT = 1;
  ISO6346_CONTAINER_SIZE_TWENTY_FT_HC = 2;
  // CAUTION: FOURTY_FT in the monolith enum.
  ISO6346_CONTAINER_SIZE_FORTY_FT = 3;
  // CAUTION: FOURTY_FT_HC in the monolith enum.
  ISO6346_CONTAINER_SIZE_FORTY_FT_HC = 4;
  // CAUTION: FOURTY_FIVE_FT_HC in the monolith enum.
  ISO6346_CONTAINER_SIZE_FORTY_FIVE_FT_HC = 5;
  ISO6346_CONTAINER_SIZE_FIFTY_THREE_FT = 6;
  ISO6346_CONTAINER_SIZE_FIFTY_THREE_FT_HC = 7;
}

enum DayUnit {
  DAY_UNIT_INVALID = 0;
  DAY_UNIT_CALENDAR_DAY = 1;
  DAY_UNIT_BUSINESS_DAY = 2;
}

message GetPartnerRatesRequest {
  string partner_company_fid = 1;
  string country_code = 2;
  ChargeCategory charge_category = 3;
  string carrier_scac = 4;
  string port_locode = 5;
  bool include_subject_to_charges = 6;
  repeated Iso6346ContainerSize container_sizes = 7;
  Date valid_on_date = 8;
}

message GetPartnerRatesResponse {
  repeated PartnerRate partner_rates = 1;
}

message PartnerRate {
  enum StandardSubjectTo {
    STANDARD_SUBJECT_TO_INVALID = 0;
    STANDARD_SUBJECT_TO_STANDARD = 1;
    STANDARD_SUBJECT_TO_SUBJECT_TO = 2;
  }
  FreightPartner freight_partner = 1;
  string country_code = 2;
  ChargeInfo charge_info = 3;
  ChargingParty charging_party = 4;
  PricingStructure pricing_structure = 5;
  StandardSubjectTo standard_subject_to = 6;
  google.protobuf.StringValue port_locode = 7;
  google.protobuf.StringValue carrier_scac = 8;
  Iso6346ContainerSize container_size = 9;
  Amount amount = 10;
  Date validity_start = 11;
  Date validity_end = 12;
}

message FreightPartner {
  string freight_partner_fid = 1;
  string freight_partner_company_name = 2;
}

enum ChargingParty {
  CHARGING_PARTY_INVALID = 0;
  CHARGING_PARTY_PARTNER = 1;
  CHARGING_PARTY_CARRIER_PASSTHROUGH = 2;
  CHARGING_PARTY_PORT_PASSTHROUGH = 3;
  CHARGING_PARTY_GOVERNMENT_PASSTHROUGH = 4;
}

enum DangerousGoodsType {
  DANGEROUS_GOODS_TYPE_INVALID = 0;
  DANGEROUS_GOODS_TYPE_NOT_DANGEROUS = 1;
  DANGEROUS_GOODS_TYPE_ANY = 2; //TODO - evaluate if requests to KBS are ever sent with the ANY category
  DANGEROUS_GOODS_TYPE_1_1 = 3;
  DANGEROUS_GOODS_TYPE_1_2 = 4;
  DANGEROUS_GOODS_TYPE_1_3 = 5;
  DANGEROUS_GOODS_TYPE_1_4 = 6;
  DANGEROUS_GOODS_TYPE_1_5 = 7;
  DANGEROUS_GOODS_TYPE_1_6 = 8;
  DANGEROUS_GOODS_TYPE_2_1 = 9;
  DANGEROUS_GOODS_TYPE_2_2 = 10;
  DANGEROUS_GOODS_TYPE_2_3 = 11;
  DANGEROUS_GOODS_TYPE_3 = 12;
  DANGEROUS_GOODS_TYPE_4_1 = 13;
  DANGEROUS_GOODS_TYPE_4_2 = 14;
  DANGEROUS_GOODS_TYPE_4_3 = 15;
  DANGEROUS_GOODS_TYPE_5_1 = 16;
  DANGEROUS_GOODS_TYPE_5_2 = 17;
  DANGEROUS_GOODS_TYPE_6_1 = 18;
  DANGEROUS_GOODS_TYPE_6_2 = 19;
  DANGEROUS_GOODS_TYPE_7 = 20;
  DANGEROUS_GOODS_TYPE_8 = 21;
  DANGEROUS_GOODS_TYPE_9 = 22;
}

message GetPartOfFreightEstimationsRequest {
  //Each PartOfFreightRateDetails represents some rate combinations with potential fuzzy matching on route
  repeated PartOfFreightRateDetails rate_details = 1;
}

message GetPartOfFreightEstimationsResponse {
  repeated PartOfFreightRate rates = 1;
  RequestResult result = 2;
}

message PartOfFreightRateDetails {
  int32 request_id = 1; // An ID number associated with each given rate
  Date date_valid_on = 2; //The date to be used for filtering charges with different validities
  CarrierContract contract = 3; //The contract that the mainleg rate is coming from
  repeated string stops = 4; // The locodes for the stops on the shipment, in order from origin -> destination
  optional string iso_container_code = 5; //A single container code for the shipment
}

message PartOfFreightRate {
  int32 request_id = 1;
  CarrierChargeCost part_of_freight_cost = 2;
  Route route = 3;
}

message Route {
  repeated Stop stops = 1;
}

message Stop {
  string loc_code = 1;
  StopType stop_type = 2;
}

enum StopType {
  STOP_TYPE_INVALID = 0;
  STOP_TYPE_ORIGIN = 1;
  STOP_TYPE_VIA_ORIGIN = 2;
  STOP_TYPE_VIA_DESTINATION = 3;
  STOP_TYPE_DESTINATION = 4;
}
