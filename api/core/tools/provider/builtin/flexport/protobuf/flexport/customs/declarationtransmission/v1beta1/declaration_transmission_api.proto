// TEAM: customs_platform

syntax = "proto3";

package flexport.customs.declarationtransmission.v1beta1;

import "flexport/customs/declaration/ca/v1beta1/declaration.proto";
import "flexport/customs/declaration/eu/import/v1beta1/declaration.proto";
import "flexport/customs/declaration/gb/v1beta1/import_declaration.proto";
import "flexport/executioncoordinator/derivedshipment/v1/derived_shipment.proto";
import "flexport/operatingprocedures/procedures/v3beta1/procedure.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_package = "com.flexport.customs.declarationtransmission.v1beta1";
option ruby_package = "Flexport::Customs::DeclarationTransmission::V1Beta1";

// The DeclarationTransmissionAPI service allows users to transmit customs declaration
// information to government adapter services. The service is meant to be agnostic to the type of
// declaration and the country for which the declaration is made.
//
// The purpose of the service is to provide a way to seamlessly integrate multiple third party broker tools,
// irrespective of the type of goods being declared or the specific customs protocols of different countries.
service DeclarationTransmissionAPI {
  // CreateDeclarationTransmission creates a new declaration in an external system through the adapter service.
  // There must be none pending or successful transmissions for the declaration for a new transmission to be accepted.
  rpc CreateDeclarationTransmission(CreateDeclarationTransmissionRequest) returns (CreateDeclarationTransmissionResponse);

  // ListDeclarationTransmission returns all the transmission statuses related to a declaration.
  // This is useful for tracking the progress of the declaration transmission process and
  // ensuring that the declaration has been successfully transmitted to the intended destination.
  rpc ListDeclarationTransmissions(ListDeclarationTransmissionsRequest) returns (ListDeclarationTransmissionsResponse);
}

// CreateDeclarationTransmissionRequest encapsulates the information needed to create a new declaration.
// Next ID: 12
message CreateDeclarationTransmissionRequest {
  // Flexport identifier for the Declaration record in Monorail this transmission relates to.
  // Source resource in engines/customs_declaration.
  string declaration_fid = 1 [deprecated = true];
  string required_declaration_fid = 8;

  // Flexport identifier for the Shipment record in Monorail this transmission relates to.
  string shipment_fid = 2;
  // Deprecated: Use shipment_info instead.
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipmentTransportMode shipment_mode_of_transport = 3 [deprecated = true];
  // Additional information about the shipment that the declaration is for.
  ShipmentInfo shipment_info = 5;
  // Additional information about the commercial invoice for the shipment.
  repeated CommercialInvoiceInfo commercial_invoice_infos = 10;

  oneof declaration {
    flexport.customs.declaration.gb.v1beta1.ImportDeclaration gb_import_declaration = 4;
    flexport.customs.declaration.eu.import.v1beta1.Declaration eu_import_declaration = 7;
    flexport.customs.declaration.ca.v1beta1.CaImportDeclaration ca_import_declaration = 11;
  }

  // Flexport identifier for the user who initiated the transmission.
  string transmitted_by_user_fid = 6;

  // Operating Procedure that was used to create the declaration.
  optional flexport.operatingprocedures.procedures.v3beta1.Procedure operating_procedure = 9;

  string client_fid = 12;
}

// ShipmentInfo encapsulates the additional data for the shipment that the declaration is for.
// The metadata is used in various ways in the transmission process.
message ShipmentInfo {
  string fid = 1;
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipmentTransportMode shipment_mode_of_transport = 2;
  // Five letter UN/LOCODE identifier for the port of arrival.
  google.protobuf.StringValue port_of_entry_loc_code = 3;
}

// CommercialInvoiceInfo encapsulates the information about the commercial invoice for the shipment.
message CommercialInvoiceInfo {
  string invoice_number = 1;
  google.protobuf.Timestamp invoice_date = 2;
}

// CreateDeclarationTransmissionResponse encapsulates the response from the adapter service.
message CreateDeclarationTransmissionResponse {
  DeclarationTransmission transmission = 1;
}

// ListDeclarationTransmissionsRequest encapsulates the information needed to list all the transmissions
// related to a declaration.
message ListDeclarationTransmissionsRequest {
  // Flexport identifier for the Declaration record in Monorail this transmission relates to.
  // Source resource in engines/customs_declaration.
  string declaration_fid = 1 [deprecated = true];
  string required_declaration_fid = 2;
}

// ListDeclarationTransmissionsResponse encapsulates the response from the adapter service.
message ListDeclarationTransmissionsResponse {
  // There can be multiple transmissions related to one Declaration.
  // e.g. if initial transmission has failed, the declaration can be transmitted again.
  repeated DeclarationTransmission transmissions = 1;
}

// DeclarationTransmission encapsulates the current state of a particular transmission of a declaration to an external system.
//
// Some external systems that we transmit declaration information to do not provide immediate
// feedback on the results of a transmission/upload. In such cases adapter services need to fetch or receive
// the results in an asynchronous manner. For such cases the the DeclarationTransmissionStatus is initially set to STATE_PENDING.
message DeclarationTransmission {
  // State describes the possible states a transmission to an external system can be in.
  enum State {
    STATE_INVALID = 0;

    // The creation of a declaration in an external system is pending.
    STATE_PENDING = 1;

    // The transmission of a declaration to the destination system has failed.
    STATE_FAILED = 2;

    // The transmission of a declaration to the destination system has succeeded.
    STATE_SUCCESS = 3;

    // The transmission was not completed because the declaration was not valid
    // for transmission to the destination system.
    STATE_VALIDATION_FAILED = 4;
  }

  string id = 1;
  string declaration_fid = 2 [deprecated = true];
  string required_declaration_fid = 10;
  string shipment_fid = 3;

  // The time at which the transmission status was created.
  google.protobuf.Timestamp created_at = 4;

  // The time at which the transmission was last updated.
  google.protobuf.Timestamp updated_at = 5;

  State state = 6;
  google.protobuf.StringValue message = 7;
  google.protobuf.StringValue external_id = 8;

  // Flexport identifier for the user who initiated the transmission.
  string transmitted_by_user_fid = 9;
}
