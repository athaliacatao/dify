// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executionorder.v1beta1;

import "flexport/executioncoordinator/executionorder/v1/execution_order.proto";
import "flexport/executioncoordinator/itinerary/v1beta1/itinerary.proto";
import "flexport/executioncoordinator/executionoffering/v1/transit_execution_offering.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutionOrderApiProto";
option java_package = "com.flexport.executioncoordinator.executionorder.v1beta1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOrder::V1Beta1";

// define beta version EO APIs
service ExecutionOrderAPI {
  // This API will accept a bunch of sub-entities that relate to EO such as Service/Quote/Itinerary
  // One common use case is when a quote is accepted and we need to create the first revision of EO.
  // Also, as side effect, we can create Itineary/EP, etc.
  rpc CreateExecutionOrder(CreateExecutionOrderRequest) returns (CreateExecutionOrderResponse);

  // Update the status for an ExecutionOrder.
  rpc UpdateExecutionOrderStatus(UpdateExecutionOrderStatusRequest) returns (UpdateExecutionOrderStatusResponse);

}

message CreateExecutionOrderRequest {
  string shipment_fid = 1;
  int64 shipment_flex_id = 15;
  // Time the monolith shipment.rb record was created.
  google.protobuf.Timestamp booking_created_time = 2;
  flexport.executioncoordinator.executionorder.v1.ConsolRelation consol_relation = 3;
  flexport.executioncoordinator.executionorder.v1.CargoReadyDate cargo_ready_date = 4;
  flexport.executioncoordinator.executionorder.v1.Service service = 5;
  flexport.executioncoordinator.executionorder.v1.Quote quote = 6;
  flexport.executioncoordinator.executionorder.v1.Cargo cargo = 7;
  flexport.executioncoordinator.executionorder.v1.InvolvedParty involved_party = 8;
  flexport.executioncoordinator.executionorder.v1.Instruction instruction = 9;
  flexport.executioncoordinator.executionorder.v1.DangerousGoodsReview dangerous_goods_review = 14;
  flexport.executioncoordinator.executionoffering.v1.TransitExecutionOffering transit_offering = 16;
  // should contain all legs for the shipment
  repeated flexport.executioncoordinator.itinerary.v1beta1.Leg unordered_legs = 10;
  // should contain all ordered nodes for the shipment
  repeated flexport.executioncoordinator.itinerary.v1beta1.Node ordered_nodes = 11;
  // idempotent key to make the API idempotent
  string idempotent_key = 12;
  // Human user that triggers the request, if there is
  string user_fid = 13;
}


message CreateExecutionOrderResponse {
  string execution_order_fid = 1;
}

// The request for UpdateExecutionOrderStatus.
message UpdateExecutionOrderStatusRequest {
  // The new order status of the ExecutionOrder
  flexport.executioncoordinator.executionorder.v1.ExecutionOrderStatus order_status = 1;
  // idempotent key to make the API idempotent
  string idempotent_key = 2;
  // Human user that triggers the entity update, if there is
  string user_fid = 3;
  // The ExecutionOrder of the entity
  string execution_order_fid = 4;
}

// The response for UpdateExecutionOrderStatus.
message UpdateExecutionOrderStatusResponse {
}
