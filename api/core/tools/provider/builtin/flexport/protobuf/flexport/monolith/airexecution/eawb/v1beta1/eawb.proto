// TEAM: kingsroad

syntax = "proto3";

package flexport.monolith.airexecution.eawb.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "EawbProto";
option java_package = "com.flexport.monolith.airexecution.eawb.v1beta1";
option ruby_package = "Flexport::Monolith::AirExecution::Eawb::V1Beta1";

// CreateFwbRequest information needed to send FWB to an airline.
message CreateFwbRequest {
  // uuid used by CHAMP to uniquely identify messages.
  string champ_message_id = 1;
  // Information about message recipients.
  MessageHeader header = 2;
  // Master Air waybill number.
  string mawb_number = 3;
  // Origin airport.
  string dep_port_iata_code = 4;
  // Destination airport.
  string arr_port_iata_code = 5;
  // Number of pieces.
  int32 total_consignment_number_of_pieces = 6;
  // Payment information.
  ChargeDeclarations charge_declarations = 7;
  // Optional list of flights.
  repeated Flight flights = 8;
  // List of routes
  repeated Route route = 9;
  // Shipper contact and address information.
  ContactType shipper = 10;
  // Consignee contact and address information.
  ContactType consignee = 11;
  // Weight of cargo
  Weight weight = 12;
  // Optional volume of shipment.
  Volume volume = 13;
  // Code of sender.
  string sender_participant_code = 14;
  // Airport or City code for sender.
  string sender_airport_city_code = 15;
  // Date of Air waybill issue.
  string carriers_execution_date = 16;
  // Place or Airport city code.
  string carriers_execution_code = 17;
  // Name of signatory.
  string carriers_execution_signature = 18;
  // Array of charge items.
  repeated ChargeItem charge_items = 19;
  // Agent information.
  Agent agent = 20;
  // Optional charge summary for prepaid charges.
  ChargeSummary prepaid_charge_summary = 21;
  // Optional charge summary for collect charges.
  ChargeSummary collect_charge_summary = 22;
  // Optional Special handling codes.
  repeated string special_handling_codes = 23;
  // Optional shipper certification.
  string shippers_certification = 24;
  // fid of employee that transmitted fwb.
  string flexport_user_fid = 25;
  // Array of other customs, security and regulatory control information.
  repeated Oci oci = 26;
  // Code indicating the origin of goods for Customs purposes (used for sending SCI)
  string customs_origin_code = 27;
  // Array of cargo package information
  repeated CargoPackage packaging = 28;
  // Handling information
  string handling_information = 29;
}

// Used to send a consolidationlist (FHL) to an airline.
message CreateFhlRequest {
  // uuid used by CHAMP to uniquely identify messages.
  string champ_message_id = 1;
  // Information about message recipients.
  MessageHeader header = 2;
  // Master Air waybill number.
  string mawb_number = 3;
  // Origin airport.
  string arr_port_iata_code = 4;
  // Arrival airport.
  string dep_port_iata_code = 5;
  // Number of pieces.
  int32 total_number_of_pieces = 6;
  // Indicates whether a shipment is a total, part or split consignment.
  ShipmentDescriptionCode shipment_description_code = 7;
  // Total weight of cargo.
  Weight total_weight = 8;
  // List of summaries for House Air Waybills.
  repeated HawbSummary house_way_bill_summary = 9;
  // Optional shipper contact and address information.
  ContactType shipper = 10;
  // Optional consignee contact and address information.
  ContactType consignee = 11;
  // Payment information.
  ChargeDeclarations charge_declarations = 12;
  // fid of employee that transmitted fhl.
  string flexport_user_fid = 13;
}

// Address of a Party in an WayBill.
message ContactAddress {
  // Name field must be present.
  string name = 1;
  string name_2 = 2;
  // Street address field must be present.
  string street_address = 3;
  string street_address_2 = 4;
  // Place field must be present.
  string place = 5;
  string state_province = 6;
  // Post code field must be present.
  string post_code = 7;
  // Country code field must be present.
  string country_code = 8;
}

// Address and contact information.
message ContactType {
  ContactAddress address = 1;
  repeated ContactDetails contacts = 2;
}

// Details for the contact. Both fields are required.
message ContactDetails {
  string contact_identifier = 1;
  string contact_number = 2;
}

// Flight route. At least one field is required.
message Route {
  string carrier_code = 1;
  string destination = 2;
}

// Flight data to identify flight.
message Flight {
  string flight_identity = 1;
  string flight_date = 2;
}

// Reference information about the Sender of the Fwb.
message SenderReference {
  string participant_code = 1;
  string city_code = 2;
}

// Summary of a House AirWaybill for consolidation list.
message HawbSummary {
  string serial_number = 1;
  string dep_port_iata_code = 2;
  string arr_port_iata_code = 3;
  int32 number_of_pieces = 4;
  Weight weight = 5;
  string nature_of_goods = 6;
  string free_text_description_of_goods = 7;
  repeated string harmonized_tarrif_schedule_information = 8;
  // Array of other customs, security and regulatory control information.
  repeated Oci oci = 9;
  string sci = 10;
  string handling_information = 11;
}

// Information to identify an agent.
message Agent {
  string name = 1;
  string place = 2;
  string iata_cargo_agent_numeric_code = 3;
  string iata_cargo_agent_cass_address = 4;
}

// Other Customs, security and regulatory control Information.
message Oci {
  string iso_country = 1;
  string information_identifier = 2;
  string control_information = 3;
  string additional_control_information = 4;
  string supplementary_control_information = 5;
}

// Cargo package information
message CargoPackage {
  int32 number_of_pieces = 1;
  Dimensions dimensions = 2;
}

// Cargo package dimensions information
message Dimensions {
  string unit = 1;
  int32 length = 2;
  int32 width = 3;
  int32 height = 4;
}

// Summaries charge conditions.
message ChargeSummary {
  string total_weight_charge = 1;
  string valuation_charge = 2;
  string taxes = 3;
  string total_other_charges_due_agent = 4;
  string total_other_charges_due_carrier = 5;
  string charge_summary_total = 6;
}

// Charge items (or rate description) for the shipment.
message ChargeItem {
  string number_of_pieces = 1;
  Weight gross_weight = 2;
  string goods_description = 3;
  repeated ChargeData charge_data = 4;
}

// Charge related data for the shipment.
message ChargeData {
  Weight chargeable_weight = 1;
  string rate_or_charge = 2;
  CargoRateClass rate_class_code = 3;
  string total_charge_amount = 4;
}

// Header that is part of every cargoJSON message.
message MessageHeader {
  ParticipantAddress sender_addresses = 1;
  ParticipantAddress final_recipient_addresses = 2;
}

// Address of Participant involved in sending / receiving message.
message ParticipantAddress {
  ParticipantAddressType participant_address_type = 1;
  string address = 2;
}

// Holds volume data of a shipment.
message Volume {
  string amount = 1;
  VolumeUnit unit = 2;
}

// Holds weight data of a shipment.
message Weight {
  string amount = 1;
  WeightUnit unit = 2;
}

// Charge Declaration information for collect or prepaid charges.
message ChargeDeclarations {
  string currency_code = 1;
  ChargeCode charge_code = 2;
  PaymentCondition payment_wv = 3;
  PaymentCondition payment_oc = 4;
  string declared_for_carriage = 5;
  string declared_for_customs = 6;
  string declared_for_insurance = 7;
}

// Code identifying a method of payment of charges.
enum ChargeCode {
  CHARGE_CODE_INVALID = 0;
  CHARGE_CODE_ALL_CHARGES_COLLECT = 1;
  CHARGE_CODE_ALL_CHARGES_COLLECT_BY_CREDIT_CARD = 2;
  CHARGE_CODE_ALL_CHARGES_COLLECT_BY_GBL = 3;
  CHARGE_CODE_ALL_CHARGES_PREPAID_CASH = 4;
  CHARGE_CODE_ALL_CHARGES_PREPAID_CREDIT = 5;
  CHARGE_CODE_ALL_CHARGES_PREPAID_BY_CREDIT_CARD = 6;
  CHARGE_CODE_ALL_CHARGES_PREPAID_BY_GBL = 7;
  CHARGE_CODE_DESTINATION_COLLECT_CASH = 8;
  CHARGE_CODE_DESTINATION_COLLECT_CREDIT = 9;
  CHARGE_CODE_DESTINATION_COLLECT_BY_MCO = 10;
  CHARGE_CODE_NO_CHARGE = 11;
  CHARGE_CODE_NO_WEIGHT_CHARGE_OTHER_CHARGES_COLLECT = 12;
  CHARGE_CODE_NO_WEIGHT_CHARGE_OTHER_CHARGES_PREPAID_BY_CREDIT_CARD = 13;
  CHARGE_CODE_NO_WEIGHT_CHARGE_OTHER_CHARGES_PREPAID_BY_GBL = 14;
  CHARGE_CODE_NO_WEIGHT_CHARGE_OTHER_CHARGES_PREPAID_CASH = 15;
  CHARGE_CODE_NO_WEIGHT_CHARGE_OTHER_CHARGES_PREPAID_CREDIT = 16;
  CHARGE_CODE_PARTIAL_COLLECT_CREDIT_PARTIAL_PREPAID_CASH = 17;
  CHARGE_CODE_PARTIAL_COLLECT_CREDIT_PARTIAL_PREPAID_CREDIT = 18;
  CHARGE_CODE_PARTIAL_COLLECT_CREDIT_CARD_PARTIAL_PREPAID_CASH = 19;
  CHARGE_CODE_PARTIAL_COLLECT_CREDIT_CARD_PARTIAL_PREPAID_CREDIT = 20;
  CHARGE_CODE_PARTIAL_PREPAID_CASH_PARTIAL_COLLECT_CASH = 21;
  CHARGE_CODE_PARTIAL_PREPAID_CREDIT_PARTIAL_COLLECT_CASH = 22;
  CHARGE_CODE_PARTIAL_PREPAID_CREDIT_CARD_PARTIAL_COLLECT_CASH = 23;
  CHARGE_CODE_PARTIAL_PREPAID_CREDIT_CARD_PARTIAL_COLLECT_CREDIT = 24;
  CHARGE_CODE_PARTIAL_PREPAID_CREDIT_CARD_PARTIAL_COLLECT_CREDIT_CARD = 25;
}

// Prepaid or collect indicator.
enum PaymentCondition {
  PAYMENT_CONDITION_INVALID = 0;
  PAYMENT_CONDITION_COLLECT = 1;
  PAYMENT_CONDITION_PREPAID = 2;
}

// Types of addresses for participants in message header.
enum ParticipantAddressType {
  PARTICIPANT_ADDRESS_TYPE_INVALID = 0;
  PARTICIPANT_ADDRESS_TYPE_PIMA = 1;
  PARTICIPANT_ADDRESS_TYPE_TTY = 2;
  PARTICIPANT_ADDRESS_TYPE_CARRIER_CODE_3N = 3;
  PARTICIPANT_ADDRESS_TYPE_IATA_CARRIER_CODE = 4;
  PARTICIPANT_ADDRESS_TYPE_EMAIL = 5;
  PARTICIPANT_ADDRESS_TYPE_WEBSITE = 6;
  PARTICIPANT_ADDRESS_TYPE_UNNKOWN = 7;
  PARTICIPANT_ADDRESS_TYPE_IATA_CASS = 8;
}

// Type of shipment consignment.
enum ShipmentDescriptionCode {
  SHIPMENT_DESCRIPTION_CODE_INVALID = 0;
  SHIPMENT_DESCRIPTION_CODE_DIVIDED_CONSIGNMENT = 1;
  SHIPMENT_DESCRIPTION_CODE_MULTI_SHIPMENTS = 2;
  SHIPMENT_DESCRIPTION_CODE_PART_CONSIGNMENT = 3;
  SHIPMENT_DESCRIPTION_CODE_SPLIT_CONSIGMENT = 4;
  SHIPMENT_DESCRIPTION_CODE_TOTAL_CONSIGNMENT = 5;
}

// Types of weight.
enum WeightUnit {
  WEIGHT_UNIT_INVALID = 0;
  WEIGHT_UNIT_KILOGRAM = 1;
  WEIGHT_UNIT_POUND = 2;
}

// Types of volume.
enum VolumeUnit {
  VOLUME_UNIT_INVALID = 0;
  VOLUME_UNIT_CUBIC_CENTIMETRE = 1;
  VOLUME_UNIT_CUBIC_FOOT = 2;
  VOLUME_UNIT_CUBIC_INCH = 3;
  VOLUME_UNIT_CUBIC_METRE = 4;
}

// Types of Cargo Rate classes.
enum CargoRateClass {
  CARGO_RATE_CLASS_INVALID = 0;
  CARGO_RATE_CLASS_BASIC_CHARGE = 1;
  CARGO_RATE_CLASS_CLASS_RATE_REDUCTION = 2;
  CARGO_RATE_CLASS_CLASS_RATE_SURCHARGE = 3;
  CARGO_RATE_CLASS_INTERNATIONAL_PRIORITY_SERVICE_RATE = 4;
  CARGO_RATE_CLASS_MINIMUM_CHARGE = 5;
  CARGO_RATE_CLASS_NORMAL_RATE = 6;
  CARGO_RATE_CLASS_QUANTITY_RATE = 7;
  CARGO_RATE_CLASS_RATE_PER_KILOGRAM = 8;
  CARGO_RATE_CLASS_SPECIFIC_COMMODITY_RATE = 9;
  CARGO_RATE_CLASS_UNIT_LOAD_DEVICE_ADDITIONAL_INFORMATION = 10;
  CARGO_RATE_CLASS_UNIT_LOAD_DEVICE_ADDITIONAL_RATE = 11;
  CARGO_RATE_CLASS_UNIT_LOAD_DEVIDE_BASIC_CHARGE_OR_RATE = 12;
  CARGO_RATE_CLASS_UNIT_LOAD_DEVICE_DISCOUNT = 13;
}
