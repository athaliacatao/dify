// TEAM: ocean_planning

syntax = "proto3";

package flexport.monolith.oceanplanning.contract.v1;

import "flexport/monolith/oceanplanning/contract/v1/contract.proto";

option java_multiple_files = true;
option java_outer_classname = "ContractApiProto";
option java_package = "com.flexport.monolith.oceanplanning.contract.v1";
option ruby_package = "Flexport::Monolith::OceanPlanning::Contract::V1";

// Retrieve contract information.
// Contracts are inventory allocation agreements we have with the carriers.
service ContractAPI {
  // Fetches contract information for the given FIDs.
  //
  // FIDs that weren't found will be returned as an empty proto message. The results are
  // returned in the same order they were requested.
  rpc GetByFid(GetByFidRequest) returns (GetByFidResponse);

  // Fetches contract information for the given contract numbers.
  //
  // Contract numbers that weren't found will be returned as an empty proto message. The results are
  // returned in the same order they were requested.
  rpc GetByContractNumber(GetByContractNumberRequest) returns (GetByContractNumberResponse);

  // Update or create the contract with the given carrier/contract number.
  // Idempotent
  rpc UpsertContract(UpsertContractRequest) returns (UpsertContractResponse);
}

message GetByFidRequest {
  repeated string fids = 1;
}

message GetByFidResponse {
  repeated Contract contracts = 1;
}

message GetByContractNumberRequest {
  // both are required and each contract number must have a carrier fid since the same number can be used for different carriers
  repeated string contract_numbers = 1;
  repeated string carrier_fids = 2;
}

message GetByContractNumberResponse {
  repeated Contract contracts = 1;
}

message UpsertContractRequest {
  Contract contract = 1;
}

message UpsertContractResponse {
  string contract_fid = 1;
}
