// TEAM: unified_shipment_schedules

syntax = "proto3";

package flexport.otp.sla.v1beta1;

import "flexport/rulesengine/options/v1/options.proto";

option java_multiple_files = true;
option java_outer_classname = "SlaRulesApiProto";
option java_package = "com.flexport.otp.sla.v1beta1";
option ruby_package = "Flexport::Otp::Sla::V1Beta1";

// API to get OTE from rules engine for trucking.
service SlaRulesAPI {
  option (flexport.rulesengine.options.v1.rule_facade).service_name = "ote_sla";

  // Get SLA from rules engine for a process.
  rpc GetAirSla(GetAirSlaRequest) returns (GetSlaResponse) {
    option (flexport.rulesengine.options.v1.decision_table).use = true;
    option (flexport.rulesengine.options.v1.rule).api_name = "com.flexport.ote.sla.air";
    option (flexport.rulesengine.options.v1.rule).workspace = "ote_sla";
    option (flexport.rulesengine.options.v1.rule_set).use = true;
  }

  // Get SLA from rules engine for a process.
  rpc GetOceanSla(GetOceanSlaRequest) returns (GetSlaResponse) {
    option (flexport.rulesengine.options.v1.decision_table).use = true;
    option (flexport.rulesengine.options.v1.rule).api_name = "com.flexport.ote.sla.ocean";
    option (flexport.rulesengine.options.v1.rule).workspace = "ote_sla";
    option (flexport.rulesengine.options.v1.rule_set).use = true;
  }

  // Get SLA from rules engine for a process.
  rpc GetTruckingSla(GetTruckingSlaRequest) returns (GetSlaResponse) {
    option (flexport.rulesengine.options.v1.decision_table).use = true;
    option (flexport.rulesengine.options.v1.rule).api_name = "com.flexport.ote.sla.trucking";
    option (flexport.rulesengine.options.v1.rule).workspace = "ote_sla";
    option (flexport.rulesengine.options.v1.rule_set).use = true;
  }
}

// Input to get OTE from rules engine for a trucking leg.
message GetAirSlaRequest {
  Process process = 1 [(flexport.rulesengine.options.v1.field_title) = "Process"];
  Region region = 2 [(flexport.rulesengine.options.v1.field_title) = "Region"];
  ServiceLevel service_level = 3 [(flexport.rulesengine.options.v1.field_title) = "Service Level"];
  AirHandlingType handling_type = 4 [(flexport.rulesengine.options.v1.field_title) = "Handling Type"];
  AirContractType contract_type = 5 [(flexport.rulesengine.options.v1.field_title) = "Contract Type"];
}

// Input to get OTE from rules engine for a trucking leg.
message GetOceanSlaRequest {
  Process process = 1 [(flexport.rulesengine.options.v1.field_title) = "Process"];
  Region region = 2 [(flexport.rulesengine.options.v1.field_title) = "Region"];
  ServiceLevel service_level = 3 [(flexport.rulesengine.options.v1.field_title) = "Service Level"];
  PortType final_port_type = 4 [(flexport.rulesengine.options.v1.field_title) = "Final Port Type"];
}

// Input to get OTE from rules engine for a trucking leg.
message GetTruckingSlaRequest {
  Process process = 1 [(flexport.rulesengine.options.v1.field_title) = "Process"];
  Region region = 2 [(flexport.rulesengine.options.v1.field_title) = "Region"];
  ServiceLevel service_level = 3 [(flexport.rulesengine.options.v1.field_title) = "Service Level"];
  double distance_mi = 4 [(flexport.rulesengine.options.v1.field_title) = "Distance (mi)"];
  double distance_km = 5 [(flexport.rulesengine.options.v1.field_title) = "Distance (km)"];
  string start_country_code = 6 [(flexport.rulesengine.options.v1.field_title) = "Country Code"];
  string start_city = 7 [(flexport.rulesengine.options.v1.field_title) = "City"];
}

// Output to get OTE from rules engine for a trucking leg.
message GetSlaResponse {
  double sla_days = 1 [(flexport.rulesengine.options.v1.field_title) = "SLA in days"];
}

enum Process {
  PROCESS_INVALID = 0;
  PROCESS_DOOR_TO_CFS_OR_PORT = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Door to CFS or Port"];
  PROCESS_CONSOLIDATION_PROCESSING = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Consolidation Processing"];
  PROCESS_TERMINAL_PROCESSING = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "Terminal Processing"];
  PROCESS_PORT_TO_PORT = 4 [(flexport.rulesengine.options.v1.enum_value_description) = "Port to Port"];
  PROCESS_AIRPORT_RECOVERY = 5 [(flexport.rulesengine.options.v1.enum_value_description) = "Airport Recovery"];
  PROCESS_DECONSOLIDATION_PROCESSING = 6 [(flexport.rulesengine.options.v1.enum_value_description) = "Deconsolidation Processing"];
  PROCESS_CFS_OR_PORT_TO_DOOR = 7 [(flexport.rulesengine.options.v1.enum_value_description) = "CFS or Port to Door"];
}

enum Region {
  REGION_INVALID = 0;
  REGION_NAM = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "NAM"];
  REGION_GC = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "GC"];
  REGION_EMEA = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "EMEA"];
  REGION_ROW = 4 [(flexport.rulesengine.options.v1.enum_value_description) = "ROW"];
}

enum ServiceLevel {
  SERVICE_LEVEL_INVALID = 0;
  SERVICE_LEVEL_DEFERRED = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Deferred"];
  SERVICE_LEVEL_STANDARD = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Standard"];
  SERVICE_LEVEL_EXPRESS = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "Express"];
}

enum AirHandlingType {
  AIR_HANDLING_TYPE_INVALID = 0;
  AIR_HANDLING_TYPE_INTACT = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Intact"];
  AIR_HANDLING_TYPE_LOOSE = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Loose"];
  AIR_HANDLING_TYPE_BREAKDOWN = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "Breakdown"];
}

enum AirContractType {
  AIR_CONTRACT_TYPE_INVALID = 0;
  AIR_CONTRACT_TYPE_CHARTER = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Charter"];
  AIR_CONTRACT_TYPE_BSA = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "BSA"];
}

enum PortType {
  PORT_TYPE_INVALID = 0;
  PORT_TYPE_AIR = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Air"];
  PORT_TYPE_OCEAN = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Ocean"];
  PORT_TYPE_RAIL = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "Rail"];
}
