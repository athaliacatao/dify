// TEAM: trucking

syntax = "proto3";

package flexport.trucking.ote.v1beta1;

import "flexport/rulesengine/options/v1/options.proto";

option java_multiple_files = true;
option java_outer_classname = "OteRulesApiProto";
option java_package = "com.flexport.trucking.ote.v1beta1";
option ruby_package = "Trucking::RulesEngine::V1Beta1";

// API to get OTE from rules engine for trucking.
service OteRulesAPI {
  option (flexport.rulesengine.options.v1.rule_facade).service_name = "trucking";
  // Get OTE from rules engine for a trucking leg.
  rpc GetOte(GetOteRequest) returns (GetOteResponse) {
    option (flexport.rulesengine.options.v1.decision_table).use = true;
    option (flexport.rulesengine.options.v1.rule).allow_evaluation_from_frontend = true;
    option (flexport.rulesengine.options.v1.rule).api_name = "com.flexport.trucking.ote.getote";
    option (flexport.rulesengine.options.v1.rule).description = "Generates OTE deadline for a trucking leg.";
    option (flexport.rulesengine.options.v1.rule).tolerate_evaluation_error = false;
    option (flexport.rulesengine.options.v1.rule).workspace = "trucking";
    option (flexport.rulesengine.options.v1.rule_set).use = true;
  }
}

// Input to get OTE from rules engine for a trucking leg.
message GetOteRequest {
  option (flexport.rulesengine.options.v1.message_description) = "OTE Request";
  RegionType region = 1 [(flexport.rulesengine.options.v1.field_title) = "Region"];
  string country_code = 2 [(flexport.rulesengine.options.v1.field_title) = "Country Code"];
  ServiceTypeType service_type = 3 [(flexport.rulesengine.options.v1.field_title) = "Service Type"];
  ImportExportType import_export = 4 [(flexport.rulesengine.options.v1.field_title) = "Import/Export"];
  PortType port_type = 5 [
    (flexport.rulesengine.options.v1.field_title) = "Pickup Port Type",
    (flexport.rulesengine.options.v1.field_description) = "only applicable for imports"
  ];
  optional bool intermodal = 6 [
    (flexport.rulesengine.options.v1.field_title) = " Intermodal",
    (flexport.rulesengine.options.v1.field_description) = "whether the move will be done partially with barge/rail"
  ];
  optional int32 distance = 7 [
    (flexport.rulesengine.options.v1.field_title) = "Distance",
    (flexport.rulesengine.options.v1.field_description) = "in KM"
  ];

  // Region = North America, EMEA, Greater China, Rest of world.
  enum RegionType {
    REGION_TYPE_INVALID = 0;
    REGION_TYPE_NAM = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "NAM"];
    REGION_TYPE_EMEA = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "EMEA"];
    REGION_TYPE_GC = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "GC"];
    REGION_TYPE_ROW = 4 [(flexport.rulesengine.options.v1.enum_value_description) = "ROW"];
  }

  // Service type = Drayage/Cartage/FTL.
  enum ServiceTypeType {
    SERVICE_TYPE_TYPE_INVALID = 0;
    SERVICE_TYPE_TYPE_DRAYAGE = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Drayage"];
    SERVICE_TYPE_TYPE_CARTAGE = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Cartage"];
    SERVICE_TYPE_TYPE_FTL = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "FTL"];
  }

  // Import/Export.
  enum ImportExportType {
    IMPORT_EXPORT_TYPE_INVALID = 0;
    IMPORT_EXPORT_TYPE_IMPORT = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Import"];
    IMPORT_EXPORT_TYPE_EXPORT = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Export"];
  }

  // Air/Rail/Ocean.
  enum PortType {
    PORT_TYPE_INVALID = 0;
    PORT_TYPE_AIR = 1 [(flexport.rulesengine.options.v1.enum_value_description) = "Air port"];
    PORT_TYPE_RAIL = 2 [(flexport.rulesengine.options.v1.enum_value_description) = "Rail port"];
    PORT_TYPE_OCEAN = 3 [(flexport.rulesengine.options.v1.enum_value_description) = "Ocean port"];
  }
}

// Output to get OTE from rules engine for a trucking leg.
message GetOteResponse {
  option (flexport.rulesengine.options.v1.message_description) = "OTE Response";
  double amount = 1 [
    (flexport.rulesengine.options.v1.field_title) = "dispatch/coordination time SLA",
    (flexport.rulesengine.options.v1.field_description) = "in days (partial values are ok)"
  ];
  double transit_time = 2 [
    (flexport.rulesengine.options.v1.field_title) = "transit time SLA",
    (flexport.rulesengine.options.v1.field_description) = "in days (partial values are ok)"
  ];
}
