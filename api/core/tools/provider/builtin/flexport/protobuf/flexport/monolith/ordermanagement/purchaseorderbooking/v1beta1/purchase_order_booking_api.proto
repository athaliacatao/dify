// TEAM: order_management

syntax = "proto3";

package flexport.monolith.ordermanagement.purchaseorderbooking.v1beta1;

import "flexport/booking/purchaseorder/v1beta1/purchase_order_line_item_booking.proto";
import "flexport/monolith/ordermanagement/purchaseorderbooking/v1beta1/purchase_order_booking.proto";

option java_multiple_files = true;
option java_outer_classname = "PurchaseOrderBookingApiProto";
option java_package = "com.flexport.monolith.ordermanagement.purchaseorderbooking.v1beta1";
option ruby_package = "Flexport::Monolith::OrderManagement::PurchaseOrderBooking::V1Beta1";

// An API for PO bookings.
service PurchaseOrderBookingAPI {
  // Retrieves purchase order bookings by flex_id.
  rpc ListPurchaseOrderBookingsByFlexId(ListPurchaseOrderBookingsByFlexIdRequest) returns (ListPurchaseOrderBookingsByFlexIdResponse);
  // Set purchase order bookings by flex_id.
  // This will remove existing purchase order bookings of flex_id and replace them with the provided ones.
  rpc SetPurchaseOrderBookingsByFlexId(SetPurchaseOrderBookingsByFlexIdRequest) returns (SetPurchaseOrderBookingsByFlexIdResponse);
}

// The request to list purchase order bookings by flex_id.
message ListPurchaseOrderBookingsByFlexIdRequest {
  string shipment_flex_id = 1;
}

// The response to list purchase order bookings by flex_id.
message ListPurchaseOrderBookingsByFlexIdResponse {
  repeated PurchaseOrderBooking purchase_order_bookings = 1;
}

// The request to set purchase order bookings by flex_id.
message SetPurchaseOrderBookingsByFlexIdRequest {
  string shipment_flex_id = 1;
  // The fid of the user making the change.
  string user_fid = 2;
  // The user fid of the user impersonating.
  optional string impersonator_user_fid = 3;
  // Previous purchase order booking fields will be replaced by the provided new purchase order line item booking.
  repeated flexport.booking.purchaseorder.v1beta1.PurchaseOrderLineItemBooking purchase_order_line_item_booking = 4;
  // Defaults to false. If true validations on the purchase order line items will be skipped.
  // These validations check that the purchase orders not pending acknowledgement, closed, or pending open change proposals.
  // If validation fails the request fails.
  optional bool skip_validations = 5;
}

// The response to set purchase order bookings by flex_id.
message SetPurchaseOrderBookingsByFlexIdResponse {
  // Previous purchase order bookings that were removed when calling SetPurchaseOrderBookingsByFlexId.
  repeated PurchaseOrderBooking previous_purchase_order_bookings = 1;
}
