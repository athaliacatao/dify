// TEAM: kingsroad

syntax = "proto3";

package flexport.automationorchestrator.server.v1beta1;

import "flexport/automationorchestrator/delayqueue/v1beta1/delay_message.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "AutomationOrchestratorApiProto";
option java_package = "com.flexport.automationorchestrator.server.v1beta1";
option ruby_package = "Flexport::automationorchestrator::Server::V1Beta1";

// This is the API for automation orchestrator.
service AutomationOrchestratorAPI {
  // delay queue related grpc api
  rpc EmitDelayMessage(EmitDelayMessageRequest) returns (EmitDelayMessageResponse);
  rpc CancelDelayMessage(CancelDelayMessageRequest) returns (CancelDelayMessageResponse);
}

message EmitDelayMessageRequest {
  // optional, set id / topic_fid + deduplicate_key to update certain message
  // not allow to set both id and topic_fid + deduplicate_key
  optional string id = 1;
  // optional, associate message with entity, e.g. shipment_fid
  optional string topic_fid = 2;
  // optional, set key to avoid duplicate message
  optional string deduplicate_key = 3;

  // required, the topic used to receive message, e.g. delay_queue_test
  string topic = 11;
  // required
  string message_body = 12;
  // optional, set for attach attribution on sns message
  map<string, string> message_attributions = 13;
  // required, the unix second to trigger message, nanos will be ignored
  google.protobuf.Timestamp schedule_at = 14;

  // optional, set to true if want to trigger message again even after emitted
  optional bool is_force_emit = 21;
}

message EmitDelayMessageResponse {
  delayqueue.v1beta1.DelayMessage delay_message = 1;
}

message CancelDelayMessageRequest {
  // cancel message by id
  optional string id = 1;

  // cancel message by topic_fid + deduplicate_key
  optional string topic_fid = 11;
  optional string deduplicate_key = 12;
}

message CancelDelayMessageResponse {
  delayqueue.v1beta1.DelayMessage delay_message = 1;
}
