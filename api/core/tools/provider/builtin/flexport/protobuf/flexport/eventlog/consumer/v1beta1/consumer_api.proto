// TEAM: service_platform

syntax = "proto3";

package flexport.eventlog.consumer.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "ConsumerApiProto";
option java_package = "com.flexport.eventlog.consumer.v1beta1";
option ruby_package = "Flexport::EventLog::Consumer::V1Beta1";

import "flexport/eventlog/envelope/v1/envelope.proto";

// The protocol defined between kcl forwarder and subscriber service.
service ConsumerAPI {
  // Send events to the subscriber service for processing.
  rpc ProcessRecords(ProcessRecordsRequest) returns (ProcessRecordsResponse);
}

message ProcessRecordsRequest {
  repeated flexport.eventlog.envelope.v1.Envelope envelopes = 1;
}

// If the response is returned successfully, forwarder will assert all records are
// processed successfully by the recipient. If any error code were raised, forwarder
// will schedule backoff retries.
message ProcessRecordsResponse {}
