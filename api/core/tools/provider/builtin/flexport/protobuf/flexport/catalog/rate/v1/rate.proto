// TEAM: service_catalog

syntax = "proto3";

package flexport.catalog.rate.v1;

import "flexport/catalog/enums/v1/enums.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "RateProto";
option java_package = "com.flexport.catalog.rate.v1";
option ruby_package = "Flexport::Catalog::Rate::V1";

// Representation of a rate.
message RateDto {
  // Enum for rate type.
  enum Type {
    TYPE_INVALID = 0;
    TYPE_AIR_RATE = 1;
    TYPE_AWB_COUNT = 2;
    TYPE_BOL_COUNT = 3;
    TYPE_BREAK = 4;
    TYPE_CONTAINER_COUNT = 5;
    TYPE_CONTAINER_COUNT_TWENTY_FT = 6;
    TYPE_CONTAINER_COUNT_FOURTY_FT = 7;
    TYPE_CONTAINER_COUNT_FOURTY_FT_HC = 8;
    TYPE_CONTAINER_COUNT_FOURTY_FIVE_FT_HC = 9;
    TYPE_CONTAINER_DAY = 10;
    TYPE_CONTAINER_TYPE = 11;
    TYPE_CONTAINER_TYPE_DAY = 12;
    TYPE_COST_PLUS_AMOUNT = 13;
    TYPE_COST_PLUS_PERCENT = 14;
    TYPE_CUSTOMS_PERCENTAGE = 15;
    TYPE_DAY = 16;
    TYPE_FORMULA = 17;
    TYPE_HS_CODE_COUNT = 18;
    TYPE_INSURANCE_PERCENTAGE = 19;
    TYPE_MASTER_CARTON = 20;
    TYPE_MIN_WEIGHT = 21;
    TYPE_PALLET_COUNT = 22;
    TYPE_PERCENTAGE = 23;
    TYPE_STOP_COUNT = 24;
    TYPE_TIME = 25;
    TYPE_TONNE_CARBON_DIOXIDE = 26;
    TYPE_TOTAL = 27;
    TYPE_TOTAL_PERCENTAGE = 28;
    TYPE_UNITLESS_COUNT = 29;
    TYPE_VOLUME = 30;
    TYPE_WEIGHT = 31;
    TYPE_WM = 32;
    TYPE_FIXED = 33;
    TYPE_CI_COUNT = 34;
    TYPE_CUSTOMS_ENTRY_COUNT = 35;
    TYPE_HBL_COUNT = 36;
    TYPE_PALLET_DAY = 37;
    TYPE_KG_DAY = 38;
    TYPE_CONTAINER_COUNT_TWENTY_FT_HC = 39;
    TYPE_CONTAINER_COUNT_FIFTY_THREE_FT_HC = 40;
    TYPE_CONTAINER_COUNT_FIFTY_THREE_FT = 41;
  }
  Type type = 1;
  // Field amount will become a BigDecimal
  google.protobuf.StringValue amount = 2;
  map<string, RateDto> rate_map = 3;
  repeated BreakRateSectionDto break_rate_sections = 4;
  google.protobuf.StringValue formula = 5;
  google.protobuf.StringValue currency_code = 6;
  google.protobuf.Int32Value free_days = 7;
  google.protobuf.Int32Value minimum_days = 8;
  google.protobuf.StringValue percent_base_slug = 9;
  // Field y_intercept will become a BigDecimal
  google.protobuf.StringValue y_intercept = 10;
  UnitsDto per_unit = 11;
  UnitsDto weight_break_unit = 12;
  RateDto minimum_rate = 13;
  RateDto maximum_rate = 14;
  RateDto default_rate = 15;
}

// Formerly known as SubRateWithBreaks; provides a rate if all its break_range conditions are met.
message BreakRateSectionDto {
  repeated BreakRangeDto break_ranges = 1;
  RateDto rate = 2;
}

// Representation of a condition to be met (e.g. 0 < origin_distance < 42.5).
message BreakRangeDto {
  // e.g. origin_distance
  google.protobuf.StringValue basis = 1;
  // e.g. 0
  google.protobuf.StringValue min = 2;
  // e.g. 42.5
  google.protobuf.StringValue max = 3;
  // e.g. kg
  UnitsDto unit = 4;
}

// Enum of metric and imperial units.
enum UnitsDto {
  UNITS_DTO_INVALID = 0;
  UNITS_DTO_LB = 1;
  UNITS_DTO_100_LB = 2;
  UNITS_DTO_KG = 3;
  UNITS_DTO_CBM = 4;
  UNITS_DTO_CFT = 5;
  UNITS_DTO_KM = 6;
  UNITS_DTO_MI = 7;
  UNITS_DTO_MIN = 8;
  UNITS_DTO_HR = 9;
  UNITS_DTO_DAY = 10;
}

// Container count details.
message ContainerCountDetails {
  google.protobuf.Int32Value num_containers = 1;
  google.protobuf.Int32Value num_days = 2;
}

// Variables shared between all items when evaluated.
message SharedVariables {
  google.protobuf.BoolValue is_lcl = 1;
  google.protobuf.BoolValue is_air = 2;
  google.protobuf.DoubleValue weight = 3;
  google.protobuf.DoubleValue volume = 4;
  google.protobuf.DoubleValue chargeable_weight = 5;
  google.protobuf.DoubleValue chargeable_volume = 6;
  google.protobuf.DoubleValue cartage_chargeable_weight = 7;
  google.protobuf.DoubleValue origin_distance = 8;
  google.protobuf.DoubleValue destination_distance = 9;
  google.protobuf.FloatValue volumetricity = 10;
  google.protobuf.StringValue tonnes_of_co2 = 11;
  google.protobuf.StringValue insurance_commercial_invoice_amount = 12;
  google.protobuf.StringValue freight_cost = 13;
  google.protobuf.StringValue total_customs_disbursement = 14;
  google.protobuf.StringValue insurance_total_customs_disbursement = 15;
  google.protobuf.StringValue total_amount = 16;
  google.protobuf.Int32Value container_count = 17;
  google.protobuf.Int32Value container_count_twenty_ft = 18;
  google.protobuf.Int32Value container_count_forty_ft = 19;
  google.protobuf.Int32Value container_count_forty_ft_hc = 20;
  google.protobuf.Int32Value container_count_forty_five_ft_hc = 21;
  google.protobuf.DoubleValue gross_weight = 22;
  google.protobuf.Int32Value container_count_twenty_ft_hc = 23;
  google.protobuf.Int32Value container_count_fifty_three_ft = 24;
  google.protobuf.Int32Value container_count_fifty_three_ft_hc = 25;
}

// Specific item variables when evaluated.
message ItemVariables {
  // TODO merge item_count & generic_count
  // TODO merge num_containers & container_count
  // TODO merge num_days & day_count
  google.protobuf.Int32Value item_count = 1;
  google.protobuf.Int32Value num_containers = 2;
  google.protobuf.Int32Value num_days = 3;
  google.protobuf.StringValue generic_count = 4;
  google.protobuf.Int32Value day_count = 5;
  google.protobuf.Int32Value container_count = 6;
  google.protobuf.StringValue related_price = 7;
  google.protobuf.StringValue related_item_price = 8;
  google.protobuf.BoolValue is_cartage = 9;
  catalog.enums.v1.ContainerType container_type = 10;
  map<string, ContainerCountDetails> container_count_details = 11;
  google.protobuf.StringValue item_count_new = 12;
  google.protobuf.Int32Value num_pallets = 13;
  google.protobuf.StringValue num_kgs = 14;
}

// Item to be evaluated.
message EvaluateRatesRequestItem {
  google.protobuf.Int64Value id = 1;
  google.protobuf.StringValue slug = 2;
  RateDto cost_rate = 3;
  google.protobuf.StringValue markup = 4;
  RateDto markup_rate = 5;
  google.protobuf.StringValue currency_code = 6;
  google.protobuf.BoolValue dormant = 7;
  ItemVariables variables = 8;
}

// Result of evaluating an item.
message EvaluateRatesResponseItem {
  google.protobuf.Int64Value id = 1;
  google.protobuf.StringValue slug = 2;
  google.protobuf.StringValue cost_amount = 3;
  google.protobuf.StringValue sell_amount = 4;
  google.protobuf.StringValue currency_code = 5;
  google.protobuf.BoolValue dormant = 6;
  RateDto effective_rate = 7;
  UnitDetails unit_details = 8;
}

// Unit details tell us how many of what unit of measure this item evaluated. eg 400 KG or 2 Containers etc
message UnitDetails {
  // e.g. 2
  google.protobuf.DoubleValue unit_count = 1;
  // e.g. "container"
  google.protobuf.StringValue unit_of_measure = 2;
}

message AmountWithCurrency {
  google.protobuf.StringValue amount = 1;
  google.protobuf.StringValue currency_code = 2;
}
