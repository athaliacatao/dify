// TEAM: customs_gateway

syntax = "proto3";

package flexport.monolith.customsorder.v1beta1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "CustomsOrderAdapterTypesProto";
option java_package = "com.flexport.monolith.customsorder.v1beta1";
option ruby_package = "Flexport::Monolith::CustomsOrder::V1Beta1";

message AdvanceShippingNotice {
  string asn_fid = 1;
  string client_fid = 2;
}

// Collection of container metadata by type
message ContainerCounts {
  ContainerCountType container_type = 1;
  int32 container_count = 2;
}

message Container {
  string container_number = 1;
  Iso6346ContainerSize container_size = 2;
  Iso6346ContainerType container_type = 3;
  string seal_number = 4;
}

enum Iso6346ContainerSize {
  ISO6346_CONTAINER_SIZE_INVALID = 0;
  ISO6346_CONTAINER_SIZE_TWENTY_FT = 1;
  ISO6346_CONTAINER_SIZE_TWENTY_FT_HC = 2;
  ISO6346_CONTAINER_SIZE_FORTY_FT = 3;
  ISO6346_CONTAINER_SIZE_FORTY_FT_HC = 4;
  ISO6346_CONTAINER_SIZE_FORTY_FIVE_FT_HC = 5;
  ISO6346_CONTAINER_SIZE_FIFTY_THREE_FT = 6;
  ISO6346_CONTAINER_SIZE_FIFTY_THREE_FT_HC = 7;
}

enum Iso6346ContainerType {
  ISO6346_CONTAINER_TYPE_INVALID = 0;
  ISO6346_CONTAINER_TYPE_DRY = 1;
  ISO6346_CONTAINER_TYPE_FLAT_RACK = 2;
  ISO6346_CONTAINER_TYPE_HEADLOAD = 3;
  ISO6346_CONTAINER_TYPE_OPEN = 4;
  ISO6346_CONTAINER_TYPE_REEFER = 5;
  ISO6346_CONTAINER_TYPE_TANK = 6;
  ISO6346_CONTAINER_TYPE_VENTILATED = 7;
  ISO6346_CONTAINER_TYPE_BULK = 8;
  ISO6346_CONTAINER_TYPE_SPECIAL = 9;
}

// Units for cargo
message CargoShippingUnit {
  int32 atomic_count = 1;
  int32 count = 2;
  ShippingUnitType type = 3;
}

// Cargo metadata contained within the shipment
message Cargo {
  CargoUnit units = 1;

  // Deprecated "weight (2) and volume (3)"
  reserved 2, 3;

  CargoShippingUnit shipping_unit = 4;
  int32 carton_quantity = 5;

  // Replacement for weight and volume, which is optional instead of defaulting to 0 and does not lose accuracy
  google.protobuf.StringValue weight_string = 6;
  google.protobuf.StringValue volume_string = 7;
}

// Specified company entities involved in shipment
message InvolvedParty {
  InvolvedPartyMembershipType membership_type = 1;
  int32 company_entity_id = 2;
}

// Related shipment tags
message ShipmentMetadata {
  string attribute = 1;
  repeated string values = 2;
}

// Port and date combination for inbond and transshipment ports
message PortWithDate {
  int32 port_id = 1;
  google.protobuf.Timestamp estimated_date = 2;
}

// Voyage and Port combination for voyage, origin and destination are ports
message VoyageWithPort {
  int32 origin_id = 1;
  int32 destination_id = 2;
  int32 vessel_id = 3;
  string tracking_number = 4;
  int32 carrier_id = 5;
}

enum CargoUnit {
  CARGO_UNIT_INVALID = 0;
  CARGO_UNIT_KG_CBM = 1;
  CARGO_UNIT_LB_CFT = 2;
}

enum ContainerCountType {
  CONTAINER_COUNT_TYPE_INVALID = 0;
  CONTAINER_COUNT_TYPE_FT_40 = 1;
  CONTAINER_COUNT_TYPE_FT_20 = 2;
  CONTAINER_COUNT_TYPE_FT_40_HC = 3;
  CONTAINER_COUNT_TYPE_FT_45_HC = 4;
}

enum InvolvedPartyMembershipType {
  INVOLVED_PARTY_MEMBERSHIP_TYPE_INVALID = 0;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_CONSIGNEE = 1;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_SHIPPER = 2;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_IMPORTER_OF_RECORD = 3;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_DESTINATION_AGENT = 4;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_ORIGIN_AGENT = 5;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_BUYER = 6;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_SELLER = 7;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_EXPORT_CUSTOMS_AGENT = 8;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_IMPORT_CUSTOMS_AGENT = 9;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_FORWARDING_AGENT = 10;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_ORIGIN_WAREHOUSE = 11;
  INVOLVED_PARTY_MEMBERSHIP_TYPE_DESTINATION_WAREHOUSE = 12;
}

enum FreightServices {
  FREIGHT_SERVICES_INVALID = 0;
  FREIGHT_SERVICES_DOOR_TO_DOOR = 1;
  FREIGHT_SERVICES_PORT_TO_PORT = 2;
  FREIGHT_SERVICES_PORT_TO_DOOR = 3;
  FREIGHT_SERVICES_DOOR_TO_PORT = 4;
}

enum TransportationMode {
  TRANSPORTATION_MODE_INVALID = 0;
  TRANSPORTATION_MODE_AIR = 1;
  TRANSPORTATION_MODE_OCEAN_FCL = 2;
  TRANSPORTATION_MODE_OCEAN_LCL = 3;
  TRANSPORTATION_MODE_TRUCK_FTL = 4;
  TRANSPORTATION_MODE_TRUCK_LTL = 5;
}

enum Incoterms {
  INCOTERMS_INVALID = 0;
  INCOTERMS_EXW = 1;
  INCOTERMS_FOB = 2;
  INCOTERMS_FAS = 3;
  INCOTERMS_FCA = 4;
  INCOTERMS_CPT = 5;
  INCOTERMS_CFR = 6;
  INCOTERMS_CIF = 7;
  INCOTERMS_CIP = 8;
  INCOTERMS_DAT = 9;
  INCOTERMS_DAP = 10;
  INCOTERMS_DDP = 11;
  INCOTERMS_DPU = 12;
}

enum ImporterSecurityFilingPartyType {
  IMPORTER_SECURITY_FILING_PARTY_TYPE_INVALID = 0;
  IMPORTER_SECURITY_FILING_PARTY_TYPE_FLEXPORT_SERVICE = 1;
  IMPORTER_SECURITY_FILING_PARTY_TYPE_THIRD_PARTY_SERVICE = 2;
  IMPORTER_SECURITY_FILING_PARTY_TYPE_THIRD_PARTY_SERVICE_REQUIRES_WORKSHEET = 3;
}

enum ShippingUnitType {
  SHIPPING_UNIT_TYPE_INVALID = 0;
  SHIPPING_UNIT_TYPE_PALLET = 1;
  SHIPPING_UNIT_TYPE_CARTON = 2;
  SHIPPING_UNIT_TYPE_BAG = 3;
  SHIPPING_UNIT_TYPE_BALE = 4;
  SHIPPING_UNIT_TYPE_BARREL = 5;
  SHIPPING_UNIT_TYPE_CRATE = 6;
  SHIPPING_UNIT_TYPE_ROLL = 7;
  SHIPPING_UNIT_TYPE_PACKAGE = 8;
  SHIPPING_UNIT_TYPE_SKID = 9;
  SHIPPING_UNIT_TYPE_PIECE = 10;
  SHIPPING_UNIT_TYPE_TOTE = 11;
  SHIPPING_UNIT_TYPE_PAIL = 12;
  SHIPPING_UNIT_TYPE_SET = 13;
  SHIPPING_UNIT_TYPE_BIN = 14;
  SHIPPING_UNIT_TYPE_SACK = 15;
}

// Enum defined for more precise protobuf optional boolean parsing
enum OptionalBoolean {
  OPTIONAL_BOOLEAN_INVALID = 0;
  OPTIONAL_BOOLEAN_TRUE = 1;
  OPTIONAL_BOOLEAN_FALSE = 2;
}

// Order Fields for Errors & Warnings
enum Field {
  FIELD_INVALID = 0;
  FIELD_CLIENT = 1;
  FIELD_NAME = 2;
  FIELD_TRANSPORTATION_MODE = 3;
  FIELD_DELIVERY_SERVICE = 4;
  FIELD_ORIGIN_PORT = 5;
  FIELD_ORIGIN_ADDRESS = 6;
  FIELD_DESTINATION_PORT = 7;
  FIELD_DESTINATION_ADDRESS = 8;
  FIELD_INVOLVED_PARTIES = 9;
  FIELD_SHIPMENT_TAGS = 10;
}

// Foreign Trade Zone Parameters
message CustomsOrderForeignTradeZoneParameters {
  bool wants_ftz_entry = 1;
  bool wants_e214_filing = 2;
}
