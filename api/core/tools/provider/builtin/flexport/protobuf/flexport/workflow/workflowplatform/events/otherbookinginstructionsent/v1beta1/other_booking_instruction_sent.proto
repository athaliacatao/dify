// TEAM: starship

syntax = "proto3";

package flexport.workflow.workflowplatform.events.otherbookinginstructionsent.v1beta1;

import "flexport/rulesengine/options/v1/options.proto";
import "flexport/workflow/prelude/options/v1/options.proto";

option java_multiple_files = true;
option java_outer_classname = "OtherBookingInstructionSentProto";
option java_package = "com.flexport.workflow.workflowplatform.events.otherbookinginstructionsent.v1beta1";
option ruby_package = "Flexport::Workflow::WorkflowPlatform::Events::OtherBookingInstructionSent::V1Beta1";

// Other booking instruction is sent.
message OtherBookingInstructionSent {
  option (flexport.workflow.prelude.options.v1.wp_event).name = "Other booking instruction is sent";
  option (flexport.workflow.prelude.options.v1.wp_event).description = "This event will be triggered when an other booking instruction is sent.";
  string shipment_fid = 1;
  int64 origin_agent_id = 2 [
    (flexport.rulesengine.options.v1.algolia_index).extra_fields = "id",
    (flexport.rulesengine.options.v1.algolia_index).extra_fields = "legal_name",
    (flexport.rulesengine.options.v1.algolia_index).index_name = "CompanyEntity",
    (flexport.rulesengine.options.v1.algolia_index).label_field = "legal_name",
    (flexport.rulesengine.options.v1.algolia_index).value_field = "id"
  ];
  repeated int64 origin_agent_ids = 6 [deprecated = true];
  // ContainerType.
  enum ContainerType {
    option (flexport.rulesengine.options.v1.enum_description) = "Container type";
    CONTAINER_TYPE_INVALID = 0;
    CONTAINER_TYPE_FCL = 1;
    CONTAINER_TYPE_LCL = 2;
  }
  ContainerType container_type = 3;
  string other_booking_instruction = 4;
}
