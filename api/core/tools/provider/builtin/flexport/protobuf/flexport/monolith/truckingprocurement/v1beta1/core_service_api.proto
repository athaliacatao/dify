// TEAM: trucking

syntax = "proto3";

package flexport.monolith.truckingprocurement.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "CoreServiceApiProto";
option java_package = "com.flexport.monolith.truckingprocurement.v1beta1";
option ruby_package = "Flexport::Monolith::TruckingProcurement::V1Beta1";

import "flexport/monolith/truckingprocurement/v1beta1/core_service.proto";
import "google/type/money.proto";

// This is used by the trucking planner NIS so the internal rate service can be used
// to calculate rates.
service CoreServiceAPI {
  // Uses the rate service to calculate how much it would cost
  // to do a move as specified given the provided contracts.
  rpc CalculateCosts(CalculateCostsRequest) returns (CalculateCostsResponse);
  // Allows for multiple trucking moves to be costed in a single grpc call.
  rpc CalculateCostsBatch(CalculateCostsBatchRequest) returns (CalculateCostsBatchResponse);
}

message CalculateCostsRequest {
  CostableTruckingMove costable_trucking_move = 1;
  repeated ContractItem contract_items = 2;
  // When using batch requests, the response for each item in the batch will
  // include the batch_item_fid provided in the request for that item.
  string batch_item_fid = 3;
}

message CalculateCostsResponse {
  repeated CostItem cost_items = 1;
  // When using batch requests, the response for each item in the batch will
  // include the batch_item_fid provided in the request for that item.
  string batch_item_fid = 2;
  // Total (sum) cost of all cost items
  google.type.Money total_cost = 3;
}

message CalculateCostsBatchRequest {
  repeated CalculateCostsRequest batch = 1;
}

message CalculateCostsBatchResponse {
  repeated CalculateCostsResponse batch = 1;
}
