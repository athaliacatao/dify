// TEAM: cost_capture

syntax = "proto3";

package flexport.financialledger.costallocation.v1beta1;

import "flexport/financialvisibility/costallocation/v1beta1/cost_allocation.proto";
import "flexport/financialvisibility/utils/v1beta1/utils.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "CostAllocationApiProto";
option java_package = "com.flexport.financialledger.costallocation.v1beta1";
option ruby_package = "Flexport::FinancialLedger::CostAllocation::V1Beta1";

// The CostAllocation definition.
service CostAllocationAPI {
  // Register CostAllocation with FinancialLedger.
  rpc Register(RegisterRequest) returns (RegisterResponse);
}

// Request to register a cost allocation.
message RegisterRequest {
  string allocated_type = 1;
  string allocated_id = 2;
  string strategy_type = 3;
  map<string, string> strategy_params = 4;
  repeated financialledger.costallocation.v1beta1.TargetParamsDto targets = 5;
  // If cost allocation for this (allocated_type, allocated_id) already exists,
  // and `overwrite_if_exists` is `false`, we do not overwrite
  // it with the new data and return an error.
  // If it's `true` or `null`, we do overwrite existing cost allocations.
  google.protobuf.BoolValue overwrite_if_exists = 6;
}

// Response to a cost allocation registration request.
message RegisterResponse {
  oneof result {
    financialledger.costallocation.v1beta1.CostAllocationDto success_result = 1;
    financialvisibility.v1beta1.ErrorResult failure_result = 2;
  }
}
