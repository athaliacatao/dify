// TEAM: quoting

syntax = "proto3";

package flexport.quoting.quotinginventory.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "QuotingInventoryProto";
option java_package = "com.flexport.quoting.quotinginventory.v1beta1";
option ruby_package = "Flexport::Quoting::QuotingInventory::V1Beta1";

import "flexport/catalog/offering/v2beta1/offering.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";

// Result of an inventory search (see: QuotingInventoryAPI.GetOfferings).
message Record {
  // Catalog offering.
  catalog.offering.v2beta1.ClientOfferingDto offering = 1;
}

// CarrierPreference identifies a specific carrier that should be preferred for the sailing.
// See: flexport.executioncoordinator.executionoffering.v1beta1.OceanFclCarrierPreference
message CarrierPreference {
  string carrier_fid = 1;
  string service_string = 2;
  string contract_number = 3;
  os.v1.types.walltimedate.v1.WallTimeDate estimated_time_of_departure = 4;
}

// BlacklistedCarrier identifiers a carrier that the client does *not* wish to sail with.
message BlacklistedCarrier {
  string carrier_fid = 1;
}

// CarrierString is a tuple (carrierFid, serviceString).
message CarrierString {
  string carrier_fid = 1;
  string service_string = 2;
}

// FlexibleServiceStringEntry is a tuple (portOfLoadingCode, PortOfDischargeCode, carrierDbid, serviceString).
// It's the input of specific sailing csv upload.
message FlexibleServiceStringEntry {
  string port_of_loading_code = 1;
  string port_of_discharge_code = 2;
  int64 carrier_dbid = 3;
  string service_string = 4;
}

// FlexibleServiceStringEntry has the failed entry and the failure reason.
message FlexibleServiceStringFailureEntry {
  FlexibleServiceStringEntry failed_entries = 1;
  string failure_reason = 2;
}
