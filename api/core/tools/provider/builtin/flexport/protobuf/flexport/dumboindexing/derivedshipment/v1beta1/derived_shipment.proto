// TEAM: application_framework

syntax = "proto3";

package flexport.dumboindexing.derivedshipment.v1beta1;

import "flexport/executioncoordinator/derivedshipment/v1/derived_shipment.proto";
import "flexport/executioncoordinator/types/enums/v1/shipment_priority.proto";
import "flexport/executioncoordinator/types/enums/v1/transportation_status.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "DerivedShipmentProto";
option java_package = "com.flexport.dumboindexing.derivedshipment.v1beta1";
option ruby_package = "Flexport::DumboIndexing::DerivedShipment::V1Beta1";

// Denormalized data from DerivedShipment domain that supports the shipment index.
message DerivedShipment {
  //
  // The transportation mode of a shipment.
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipmentTransportMode transportation_mode = 2;
  //
  // The cargo ready date of a shipment.
  ShipmentIndexDate cargo_ready_date = 3;
  //
  // The priority level of a shipment.
  flexport.executioncoordinator.types.enums.v1.ShipmentPriority priority = 4;
  //
  // Whether a shipment is a 4pl shipment or not.
  // Deprecated: use shipment_indexing_data_source instead; CLIENT_FREIGHT_DATA is 4pl.
  google.protobuf.BoolValue is_4pl_shipment = 5 [deprecated = true];
  //
  // The transportation status of a shipment.
  flexport.executioncoordinator.types.enums.v1.TransportationStatus transportation_status = 6;
  //
  // The date of the latest leg departing an origin node.
  ShipmentIndexDate origin_departure_date = 7;
  //
  // The date of arrival to the port of loading.
  ShipmentIndexDate departure_port_arrival_date = 8;
  //
  // The date of departure from the port of loading.
  ShipmentIndexDate departure_port_departure_date = 9;
  //
  // The date of arrival to the port of unloading.
  ShipmentIndexDate arrival_port_arrival_date = 10;
  //
  // The date of departure from the port of unloading.
  ShipmentIndexDate arrival_port_departure_date = 11;
  //
  // The address fid for the first origin node.
  string origin_address_fid = 12;
  //
  // The address fid for the port of loading.
  string departure_port_address_fid = 13;
  //
  // The address fid for the port of unloading.
  string arrival_port_address_fid = 14;
  //
  // The address fid for the final destination.
  string destination_address_fid = 15;
  //
  // The origin country code.
  string origin_country_code = 16;
  //
  // The consignee entity fid
  string consignee_company_entity_fid = 17;
  //
  // The shipper entity fid.
  string shipper_company_entity_fid = 18;
  //
  // The buyer entity fid.
  string buyer_company_entity_fid = 19;
  //
  // The seller entity fid.
  string seller_company_entity_fid = 20;
  //
  // The nominating client fid.
  string nominating_client_fid = 21;
  //
  // The max arrival date of the legs tagged as destination.
  // Delivered in full date is defined as the latest known arrival date of: 1. a destination leg of a shipment
  // with door to door service 2. the port of unloading leg of a customs shipment (i.e. door/port to port).
  ShipmentIndexDate delivered_in_full_date = 22;
  // An array containing all address fids from all location types.
  // Used to support the ANY filter option on locationFilters.
  repeated string all_address_fids = 23;
  //
  // An array containing all company entity fids from all entity types.
  // Used to support the company filter.
  repeated string company_entity_fids = 24;
  //
  // The creation time of the shipment.
  google.protobuf.Timestamp created_time = 25;
  //
  // The destination country code.
  string destination_country_code = 26;
  //
  // The port of loading country code.
  string port_of_loading_country_code = 27;
  //
  // The port of unloading country code.
  string port_of_unloading_country_code = 28;
  //
  // An array containing all country code strings used to support the ANY filter option on locationFilters.
  repeated string all_country_codes = 29;
  //
  google.protobuf.BoolValue is_buyers_consolidation = 30;
  //
  // If this shipment has a parent shipment that is a Buyer's Consolidation
  google.protobuf.BoolValue is_buyers_consolidation_child = 51;
  //
  // Cursors used for sorting and pagination, we manually create a compound field of <date>_<shipment_fid>
  // to ensure uniqueness.
  string time_of_creation_cursor = 31;
  // Deprecated, use delivered_in_full_date_cursor
  string delivery_date_cursor = 32 [deprecated = true];
  // This cargo ready date is from the graph.earliest_cargo_ready_date.
  string cargo_ready_date_cursor = 33;
  // The client facing transportation mode of the shipment.
  ClientFacingTransportationMode client_facing_transportation_mode = 34;
  //
  // All last free dates for all containers of a shipment. Represented as UTC timestamp at start of day.
  repeated string last_free_dates = 35;
  //
  // Set if shipment has been archived.
  google.protobuf.Timestamp archived_time = 36;
  // Set if the shipment is a quote request.
  google.protobuf.BoolValue is_quote_request = 37;
  // This importer of record fid is set when the shipment is customs-only and is tied to the nominating client.
  string importer_of_record_fid = 38;
  // Whether delivered_in_full_date field exists. Used for sorting.
  google.protobuf.BoolValue delivered_in_full_date_exists = 39;
  // Whether cargo_ready_date field exists. Used for sorting.
  google.protobuf.BoolValue cargo_ready_date_exists = 40;
  // Availability of tracking data for this shipment:
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipmentTrackingStatus tracking_status = 41;
  // Decision to split delivery date field into the arrival port arrival date field and final destination field
  // can be found in this slack thread: https://flexport.slack.com/archives/C01TKSHR1EW/p1659123194838089
  // This arrival port delivery date comes from the EC derived shipment arrivalPortArrivalDate
  string arrival_port_arrival_date_cursor = 42;
  // This final destination delivery date comes from the EC derived shipment deliveredInFullDate
  string delivered_in_full_date_cursor = 43;
  // Whether arrival_port_arrival_date field exists. Used for sorting.
  google.protobuf.BoolValue arrival_port_arrival_date_exists = 44;
  // If the shipment is completed. Shipment completed doesn't guarantee the shipment is at final_destination.
  google.protobuf.BoolValue is_completed = 45;
  //
  // The time that the schedule was last updated
  google.protobuf.Timestamp schedule_updated_at = 46;
  // Cursor from EC derived shipment scheduleUpdatedAt. Used for sorting.
  string schedule_updated_at_cursor = 47;
  // Whether schedule_updated_at field exists. Used for sorting.
  google.protobuf.BoolValue schedule_updated_at_exists = 48;
  // ShipmentIndexingDataSource describes if the source for the
  // DerivedShipment came from Execution Coordinator or Client Freight Data Service.
  ShipmentIndexingDataSource shipment_indexing_data_source = 49;
  //
  // flex_id of a Client Freight Data Shipment.
  // Initially this was planned to be used for federation from the Client Freight Data service but we
  // federate on shipment_fid instead now.
  string flex_id = 50 [deprecated = true];
  //
  // The shipment carrier name.
  string carrier_name = 52;
  //
  // Whether time_of_creation_exists field exists. Used for sorting.
  google.protobuf.BoolValue time_of_creation_exists = 53;
  //
  // The SCAC code of the main freight carrier of the shipement.
  string main_freight_carrier_scac_code = 54;
  // check if shipment is customs shipment
  google.protobuf.BoolValue is_customs_shipment = 55;
  // The shipment's initial estimated delivery date.
  ShipmentIndexDate initial_estimated_delivery_date = 56;
  // The number of days shipment is delayed (calculated days diff between initial_estimated_delivery_date & actual_delivered_in_full_date).
  int32 days_delayed = 57;
  // check if shipment is flexport freight shipment
  google.protobuf.BoolValue is_flexport_freight_shipment = 58;
  // The shipment's schedule_confirmed_date.
  ShipmentIndexDate schedule_confirmed_date = 59;
  // The shipment's delivered_in_full_date with exact time (upto hours, minutes & seconds)
  // in local time zone before converting to utc timestamp.
  ShipmentIndexDate actual_delivered_in_full_date = 60;
  // The number of days shipment is delayed (calculated days diff between schedule_confirmed_date & actual_delivered_in_full_date).
  int32 days_delayed_from_schedule_confirmed_date = 61;
}

// SIS-specific Date object.
message ShipmentIndexDate {
  // Start of the day (in UTC) for the date.
  string start_of_day_date_in_utc = 1;
  // Original IANA timezone for the location of the date (e.g. America/Los_Angeles)
  string zone = 2;
}

// Client specific transportation mode.
enum ClientFacingTransportationMode {
  CLIENT_FACING_TRANSPORTATION_MODE_INVALID = 0;
  CLIENT_FACING_TRANSPORTATION_MODE_OCEAN_LCL = 1;
  CLIENT_FACING_TRANSPORTATION_MODE_OCEAN_FCL = 2;
  CLIENT_FACING_TRANSPORTATION_MODE_AIR = 3;
  CLIENT_FACING_TRANSPORTATION_MODE_TRUCK_DOMESTIC = 4;
  CLIENT_FACING_TRANSPORTATION_MODE_TRUCK_INTERNATIONAL = 5;
}

// Service providing data source for Shipment Indexing.
enum ShipmentIndexingDataSource {
  SHIPMENT_INDEXING_DATA_SOURCE_INVALID = 0;
  SHIPMENT_INDEXING_DATA_SOURCE_EXECUTION_COORDINATOR = 1;
  SHIPMENT_INDEXING_DATA_SOURCE_CLIENT_FREIGHT_DATA = 2;
}
