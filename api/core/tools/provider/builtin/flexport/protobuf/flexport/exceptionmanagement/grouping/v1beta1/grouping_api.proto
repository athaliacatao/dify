// TEAM: origin_ops

syntax = "proto3";

package flexport.exceptionmanagement.grouping.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "GroupingApiProto";
option java_package = "com.flexport.exceptionmanagement.grouping.v1beta1";
option ruby_package = "Flexport::ExceptionManagement::Grouping::V1Beta1";

import "flexport/rulesengine/options/v1/options.proto";

// GroupingAPI. This is the rule to evaluate the tags of an exception type.
service GroupingAPI {
  option (flexport.rulesengine.options.v1.rule_facade).service_name = "exception_management";
  // Get the tags for all exception types, this method will add exception types to tags.
  rpc GroupWithExceptionTypes(GroupWithExceptionTypesRequest) returns (GroupWithExceptionTypesResponse) {
    option (flexport.rulesengine.options.v1.rule).api_name = "com.flexport.exceptionmanagement.grouping.groupwithexceptiontypes";
    option (flexport.rulesengine.options.v1.rule).description = "create groups for exception types";
    option (flexport.rulesengine.options.v1.rule).tolerate_evaluation_error = false;
    option (flexport.rulesengine.options.v1.rule).workspace = "exception_management";
    option (flexport.rulesengine.options.v1.rule_set).use = true;
  }
}

message GroupWithExceptionTypesRequest {
  option (flexport.rulesengine.options.v1.message_description) = "Create groups for exception types request";
}

message GroupWithExceptionTypesResponse {
  option (flexport.rulesengine.options.v1.message_description) = "Create groups for exception types response";
  string group_name = 1;
  repeated string exception_type_slugs = 2;
  string description = 3 [
    (flexport.rulesengine.options.v1.field_component) = {
      text_area: {
        min_rows: 5
      }
    },
    (flexport.rulesengine.options.v1.optional_output) = true
  ];
}
