// TEAM: trucking_planning

syntax = "proto3";

package flexport.monolith.trucking.truckingschedule.v1beta1;

import "flexport/monolith/trucking/truckingschedule/v1beta1/linehaul_schedules_request.proto";
import "flexport/monolith/trucking/truckingschedule/v1beta1/direct_consol_schedules_request.proto";
import "flexport/monolith/trucking/truckingschedule/v1beta1/trucking_schedule.proto";

option java_multiple_files = true;
option java_outer_classname = "TruckingScheduleApiProto";
option java_package = "com.flexport.monolith.trucking.truckingschedule.v1beta1";
option ruby_package = "Flexport::Monolith::Trucking::TruckingSchedule::V1Beta1";

// APIs to retrieve trucking schedule entries
service TruckingScheduleAPI {
  // Returns all linehaul schedules that correspond to the provided search parameters.
  // A linehaul is a schedule that runs between two CFS's and can be used to consolidate cargo from multiple clients.
  rpc GetLinehaulSchedules(GetLinehaulSchedulesRequest) returns (GetLinehaulSchedulesResponse);

  // Returns all direct consol schedules that correspond to the provided search parameters.
  // A direct consol is a schedule that runs from CFS to client location and carries consolidated cargo for a single client.
  rpc GetDirectConsolSchedules(GetDirectConsolSchedulesRequest) returns (GetDirectConsolSchedulesResponse);
}

message GetLinehaulSchedulesResponse {
  repeated TruckingSchedule schedules = 1;
  // Submit as 'page_offset' in subsequent request to get next page of results
  // -1 indicates no more results to return
  int32 next_page_offset = 2;
}

message GetDirectConsolSchedulesResponse {
  repeated TruckingSchedule schedules = 1;
  // Submit as 'page_offset' in subsequent request to get next page of results
  // -1 indicates no more results to return
  int32 next_page_offset = 2;
}
