// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.types.cartageinfo.v1;

option java_multiple_files = true;
option java_outer_classname = "CartageInfoProto";
option java_package = "com.flexport.executioncoordinator.types.cartageinfo.v1";
option ruby_package = "Flexport::ExecutionCoordinator::Types::CartageInfo::V1";

import "flexport/executioncoordinator/types/enums/v1/port_trucking_direction.proto";
import "google/protobuf/wrappers.proto";

// Details about cartage. See go/trucking-ets.
message CartageInfo {
  flexport.executioncoordinator.types.enums.v1.PortTruckingDirection port_trucking_direction = 1;
  google.protobuf.BoolValue should_recover_and_hold = 2;
  string origin_terminal_fid = 3;
  string destination_terminal_fid = 4;
  //
  // The Route Editor UI treats LTL/FTL/Cartage interchangeably. The mapping to ExecutionTasks is:
  // - TruckingConsol task params correspond to LTL label by default.
  // - TruckingDirect task params correspond to FTL label by default.
  // - If the "labeled_as_cartage" boolean is true, the label "Cartage" overrides the default.
  // The label is unrelated to whether the trucking move involves an airport.
  google.protobuf.BoolValue labeled_as_cartage = 5;
}
