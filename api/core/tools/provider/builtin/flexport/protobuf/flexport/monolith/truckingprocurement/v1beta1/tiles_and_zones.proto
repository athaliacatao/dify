// TEAM: trucking

syntax = "proto3";

package flexport.monolith.truckingprocurement.v1beta1;

import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "TilesAndZones";
option java_package = "com.flexport.monolith.truckingprocurement.v1beta1";
option ruby_package = "Flexport::Monolith::TruckingProcurement::V1Beta1";

// request models
message ZoneFilterOptions {
  google.protobuf.StringValue company_fid = 1;
  google.protobuf.StringValue trucking_market = 2;
  TruckingMode trucking_mode = 3;
  ZoningScheme zoning_scheme = 4;
}

// response models
message MatchedZone {
  string query_identifier = 1;
  // this is the zone key/fid passed in
  Zone zone = 2;
  MatchOutcome outcome = 3;
}
message MatchedZonesWithTile {
  // this is the tile key/fid passed in,
  // or the computed tile key for an address
  string query_identifier = 1;
  Tile tile = 2;
  repeated Zone zones = 3;
  MatchOutcome outcome = 4;
}

// core models
message Zone {
  string zone_fid = 1;
  ZoningScheme zoning_scheme = 2;
  string zone_key = 3;
  TruckingMode trucking_mode = 4;
  string trucking_market = 5;
  string company_id = 6;
  google.protobuf.DoubleValue latitude = 7;
  google.protobuf.DoubleValue longitude = 8;
}
message Tile {
  string tile_fid = 1;
  string country_code = 2;
  TilingScheme tiling_scheme = 3;
  string tile_key = 4;
  google.protobuf.DoubleValue latitude = 5;
  google.protobuf.DoubleValue longitude = 6;
}

// meta models
enum AddressMatchFailReason {
  ADDRESS_MATCH_FAIL_REASON_INVALID = 0;
  ADDRESS_MATCH_FAIL_REASON_UNSET = 1;
  ADDRESS_MATCH_FAIL_REASON_UNSUPPORTED_COUNTRY = 2;
  ADDRESS_MATCH_FAIL_REASON_MISSING_INFO = 3;
  ADDRESS_MATCH_FAIL_REASON_NO_MATCH = 4;
}

enum MatchOutcome {
  MATCH_OUTCOME_INVALID = 0;
  MATCH_OUTCOME_UNSET = 1;
  MATCH_OUTCOME_EXACT = 2;
  // closest fuzzy match through algolia
  MATCH_OUTCOME_FUZZY = 3;
  MATCH_OUTCOME_MISSED = 4;
}
enum TilingScheme {
  TILING_SCHEME_INVALID = 0;
  TILING_SCHEME_UNSET = 1;
  TILING_SCHEME_ZIP5 = 2;
  TILING_SCHEME_CITY = 3;
}
enum ZoningScheme {
  ZONING_SCHEME_INVALID = 0;
  ZONING_SCHEME_UNSET = 1;
  ZONING_SCHEME_BUY_SIDE = 2;
  ZONING_SCHEME_SELL_SIDE = 3;
  ZONING_SCHEME_TRANSIT_TIME = 4;
  ZONING_SCHEME_PORT_KEY = 5;
  ZONING_SCHEME_TILE_KEY = 6;
  ZONING_SCHEME_PRICE_CLUSTER_IMPORT = 7;
  ZONING_SCHEME_PRICE_CLUSTER_EXPORT = 8;
  ZONING_SCHEME_FUEL_SURCHARGE = 9;
  ZONING_SCHEME_CITY_KEY = 10;
}
enum TruckingMode {
  TRUCKING_MODE_INVALID = 0;
  TRUCKING_MODE_UNSET = 1;
  TRUCKING_MODE_FTL = 2;
  TRUCKING_MODE_LTL = 3;
  TRUCKING_MODE_DRAYAGE = 4;
  TRUCKING_MODE_CARTAGE = 5;
  TRUCKING_MODE_LINEHAUL = 6;
  TRUCKING_MODE_BARGE = 7;
  TRUCKING_MODE_ALL = 8;
}
