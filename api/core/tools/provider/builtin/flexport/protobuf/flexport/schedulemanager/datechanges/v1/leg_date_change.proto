// TEAM: unified_shipment_schedules

syntax = "proto3";

package flexport.schedulemanager.datechanges.v1;

import "flexport/os/v1/types/walltimedateordatetime/v1/wall_time_date_or_date_time.proto";
import "flexport/schedulemanager/datechanges/v1/date_type.proto";
import "flexport/schedulemanager/datechanges/v1/transit_type.proto";

option java_multiple_files = true;
option java_outer_classname = "LegDateChangeProto";
option java_package = "com.flexport.schedulemanager.datechanges.v1";
option ruby_package = "Flexport::ScheduleManager::DateChanges::V1";

// Leg Date Change captures Flexport's definition for a date on a shipment schedule:
//    A date change details the movement of specific cargo to/from an exact location. It can signify: an estimated
//    time thatâ€™s expected to occur, a scheduled time that a carrier plans to execute, or the actual time resulting
//    from execution.
// The following fields are required to support the above definition:
//    - Date, or Datetime (can be blank to signify clearing the date)
//    - Date Type: arrival or departure
//       - potential for more, e.g. received & released to capture warehouse processing
//    - Transit Type: estimated, scheduled, and actual
//        - potential for more, e.g. targeted time we want to execute
//    - Cargo
//        - During quoting/planning, before cargo/containers are strictly defined, this field can contain no value
//          to signify the change applies to ALL (future) cargo
//    - Location
//        - The hardest to capture as shipment schedules can get very complicated with multiple cargo movements from the
//          same location. These need to be differentiated.
message LegDateChange {
  // REQUIRED. The type of cargo transit, e.g. "arrival" or "departure".
  flexport.schedulemanager.datechanges.v1.TransitType transit_type = 1;

  // REQUIRED. The type of the cargo transit date, e.g. "actual", "scheduled", or "estimated".
  flexport.schedulemanager.datechanges.v1.DateType date_type = 2;

  // OPTIONAL. The value of the cargo transit date as either a date or date time value.
  // Early on during the shipment lifecycle estimated date-only values are provided, and then as
  // the shipment is executed actual date time values are provided.
  // When omitted, this event corresponds to clearing the specified type of date.
  flexport.os.v1.types.walltimedateordatetime.v1.WallTimeDateOrDateTime date_or_date_time = 3;

  // The below fields detailed as "OPTIONAL*" are individually not required, BUT ENOUGH OF THEM MUST BE INCLUDED TO
  // PROPERLY MATCH THE DATE TO AN SINGLE EXISTING LEG IN THE ROUTE.
  // The more of "OPTIONAL*" fields that can have values provided for, the better. They will make the date change
  // more resilient to route changes that can discard leg_fids or make a parallel leg that now needs to be
  // differentiated with cargo/container values, etc.
  // Key Consideration: none of these "leg matching" fields are exclusive, they are all inclusive. It's done this way to
  // make each date change "sticker" and less likely to be un-associated from the shipment route.

  // OPTIONAL*. The Leg fid that this date change should be applied to.
  // Note: if the specified leg_fid is discarded from the route, this date change can be applied to a DIFFERENT leg.
  string leg_fid = 4;

  // OPTIONAL*. The fid of the immutable address instance this event relates to, if any.
  // For example, the address being departed from or arrived at.
  // Note: the "address" is really any place (could be address, port, terminal_or_cfs, etc).
  string address_fid = 5;

  // OPTIONAL*. The identifier of the cargo this event corresponds to. Specifically ExecutionCargo, which today is
  // not a very useful model as it's unique to each leg. Which, unlike container_fid, means cargo_fid cannot be used
  // to track the route end-to-end movement of cargo.
  // Future Direction: use a more useful cargo model, currently under development.
  repeated string cargo_fids = 6;

  // OPTIONAL*. The identifier of the one or more ocean containers this event corresponds to.
  // Note: this is an INCLUSIVE list. As long as the container(s) defined here are a SUBSET of a matching leg, they
  // will match that leg.
  repeated string container_fids = 7;

  // OPTIONAL. Used as last check to potentially tie break multiple matching legs.
  optional string execution_task_fid = 8;
}
