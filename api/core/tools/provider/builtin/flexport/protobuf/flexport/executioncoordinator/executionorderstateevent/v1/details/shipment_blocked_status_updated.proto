// TEAM: compliance

syntax = "proto3";

package flexport.executioncoordinator.executionorderstateevent.v1;

option java_multiple_files = true;
option java_outer_classname = "ShipmentBlockedStatusUpdatedProto";
option java_package = "com.flexport.executioncoordinator.executionorderstateevent.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOrderStateEvent::V1";

import "flexport/executioncoordinator/types/enums/v1/shipment_blocked_reason.proto";
import "flexport/executioncoordinator/types/enums/v1/shipment_blocked_state.proto";

// A shipment's blocked status has been updated by one of the Compliance services.
// Consumers of these events can choose to maintain a cumulative state by merging/reducing the changes.
message ShipmentBlockedStatusUpdated {
  // While it is possible to determine the shipment from an EOSE based on the EO_fid, a primary use for
  // these events is to update the DerivedShipment records, so having the shipment_fid is handy.
  string shipment_fid = 1;
  // If the shipment is BLOCKED/UNBLOCKED.
  flexport.executioncoordinator.types.enums.v1.ShipmentBlockedState blocked_state = 2;
  // Enum of which service and cause led to the block status change.
  flexport.executioncoordinator.types.enums.v1.ShipmentBlockedReason reason = 3;
  // A presentable description of this block.
  string explanation = 4;
  // The parent/originating entity on which Compliance screened and found an entity fid to block.
  string originating_entity_fid = 5;
  // Other context data that hasn't been standardized into protos.
  string context_json = 6;
  // The user or company entity which the block is against.
  string entity_fid = 7;
}
