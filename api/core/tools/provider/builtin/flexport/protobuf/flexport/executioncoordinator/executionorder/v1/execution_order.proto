// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executionorder.v1;

import "flexport/catalog/enums/v1/enums.proto";
import "flexport/executioncoordinator/executionoffering/v1/transit_execution_offering.proto";
import "flexport/executioncoordinator/executionoffering/v1/value_added_execution_offerings.proto";
import "flexport/executioncoordinator/executionorder/v1/consol/consol_info.proto";
import "flexport/executioncoordinator/executionorder/v1/order_upserter.proto";
import "flexport/executioncoordinator/executionorder/v1/ordering_process.proto";
import "flexport/executioncoordinator/types/enums/v1/dangerous_goods_hazard.proto";
import "flexport/executioncoordinator/types/enums/v1/dangerous_goods_packing_group.proto";
import "flexport/executioncoordinator/types/enums/v1/dangerous_goods_review_status.proto";
import "flexport/executioncoordinator/types/enums/v1/main_freight_service_level.proto";
import "flexport/executioncoordinator/types/enums/v1/shipment_priority.proto";
import "flexport/executioncoordinator/types/enums/v1/transport_mode.proto";
import "flexport/executioncoordinator/types/fulfillmentguidance/v1/fulfillment_guidance.proto";
import "flexport/executioncoordinator/types/nraconstraints/v1/nra_constraints.proto";
import "flexport/executioncoordinator/types/otemilestones/v1/ote_milestones.proto";
import "flexport/executioncoordinator/types/transittime/v1/transit_time.proto";
import "flexport/os/v1/types/businesstype/v1/business_type.proto";
import "flexport/os/v1/types/cargo/v1/cargo_measurements.proto";
import "flexport/os/v1/types/cargo/v1/container_counts.proto";
import "flexport/os/v1/types/cargo/v1/shipment_cargo.proto";
import "flexport/os/v1/types/freightservice/v1/freight_service.proto";
import "flexport/os/v1/types/freighttype/v1/freight_type.proto";
import "flexport/os/v1/types/incoterm/v1/incoterm.proto";
import "flexport/os/v1/types/isfservice/v1/importer_security_filing_service_type.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";
import "flexport/os/v1/types/walltimedateordatetime/v1/wall_time_date_or_date_time.proto";
import "flexport/os/v1/types/walltimedatetime/v1/wall_time_date_time.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutionOrderProto";
option java_package = "com.flexport.executioncoordinator.executionorder.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOrder::V1";

// This file: http://go/eo-proto.
//
// A mutable ExecutionOrder entity representing a per-shipment request from sell-side to buy-side.
//
//   Most recently updated:
//   go/eo-latest
//
//   By fid:
//   go/fid/flx::execution_coordinator:execution_order:fefac669-804e-4cc0-85f7-187f5dfc233d
//
//   By shipment FLEX-ID:
//   go/eo-flex/835581
//
// Using a restaurant metaphor, this message is similar the food order that a waiter (the sell-side)
// gives to the kitchen staff (the buy-side), encoding everything the kitchen needs to know
// about the customer's preferences in order to prepare a meal (execute a shipment).
//
// Each ExecutionOrder corresponds to one:
//
// - FLEX-ID
// - nominating client
// - set of cargo
// - shipper, consignee, buyer, seller
// - transit ExecutionOffering (see go/execution-offering)
// - incoterm
//
// Most ExecutionOrders can be interpreted as something like:
//
//   "move cargo foo from point A to point B within this time range"
//
// However, the "A-to-B" mental model is insufficient to represent the full suite of shipment-level
// services we sell. Some examples:
//
// - Customs-only: Flexport clears customs but does not move freight.
// - BCO ocean FCL: Flexport acts as a "booking agent" to move freight on client-carrier
//   contracts, but is not operationally responsible for freight as it moves.
// - Drayage-only: Flexport arranges origin and destination drayage but not main carriage ocean.
// - Visibility-only: Flexport tracks cargo through a combination of public data sources and
//   potentially direct carrier integrations (assuming client has granted us that permission).
//
// These orders are not as simple as "get my cargo from A to B". Therefore, like shipment.rb,
// execution_order.proto allows the sell-side to be more precise about what specifically the
// buy-side needs to do for each aspect of a shipment. See ocean_fcl_role.proto for an example.
//
// See also go/eo-wiki.
//
// Next ID: 53
message ExecutionOrder {
  //
  // Identifier for the entity.
  string fid = 1;
  //
  // Time the entity was created. (That is, when the first revision was created.)
  google.protobuf.Timestamp created_time = 2;
  //
  // Revision number of the entity. Increments by one each time the entity is mutated, starting
  // at 1. Included in events and reads from the ExecutionCoordinator; ignored during writes.
  uint32 revision = 3;
  //
  // Time the current entity revision was created.
  google.protobuf.Timestamp revision_created_time = 4;
  //
  // Information about the source of the current revision.
  ExecutionOrderRevisionSource revision_source = 13;
  //
  // Arbitrary data set by other services for their own purposes. Don't remove tags you don't own.
  // For example, a service could tag an ExecutionOrder to indicate that the service has already
  // ingested it.
  repeated string tags = 39 [deprecated = true];
  //
  // Identifier of the monolith shipment.rb record associated with this ExecutionOrder.
  // Empty when a shipment.rb instance has not yet been written back to the monolith (for
  // ExecutionOrders created directly with the ExecutionCoordinator). See go/ec-writeback.
  string shipment_fid = 5;
  //
  // Time the monolith shipment.rb record was created.
  google.protobuf.Timestamp shipment_created_time = 11;

  //
  // The shipment FLEX-ID associated with this ExecutionOrder. Shipment FLEX-ID is a product
  // concept, whereas shipment_fid is an engineering/technical concept. Eventually, we may have
  // FLEX-IDs without any shipment_fids. The bookings NIS reserves FLEX-IDs for new bookings
  // _without actually creating a row in the shipments monolith table_. When the booking is ready
  // for execution, an ExecutionOrder is created. A row in the shipments table is then created via
  // go/ec-writeback. These EOs temporarily have a flex_id without having a shipment_fid. Note that
  // some ExecutionOrders may be created with neither a shipment_flex_id nor a shipment_fid, for
  // example when the consolidation planning systems want to create a new "parent" shipment to
  // represent a consolidated load. For these EOs, go/ec-writeback will create a new shipment
  // with a new FLEX-ID generated on demand.
  int64 shipment_flex_id = 12;
  //
  // A user-provided shipment name.
  string shipment_name = 8;
  //
  // Time the quote for this ExecutionOrder was accepted. May be slightly different from the
  // ExecutionOrder created_time due to delay between quote acceptance and order reaching EC.
  google.protobuf.Timestamp quote_accepted_time = 36;
  //
  // Whether this shipment is a 4PL visibility-only shipment. Eventually these shipments
  // should not go through the ExecutionCoordinator at all, but for the MVP they will.
  // This is a temporary measure. The long-term architecture will involve strict segregation
  // between 3PL and 4PL shipments.
  bool is_4pl_visibility_only = 31;
  //
  // Sell-side status of the ExecutionOrder eg active, cancelled, requote pending.
  // This data can be used to replicate functionality of Shipment#active? in the legacy model.
  ExecutionOrderStatus order_status = 6;
  //
  // Identifier of the client that nominated Flexport as the freight forwarder.
  // Corresponds to client.rb monolith model.
  // Often, but not always, the nominating client is a parent of the consignee. For example,
  // Starbucks Corp may be the nominating client, with Starbucks USA entity as the consignee.
  // For more context, see https://github.flexport.io/flexport/flexport/tree/master/slack_messages/C029DG26A_1587597123.409300.md
  string nominating_client_fid = 7;
  //
  // Client-defined involved parties for this shipment. See http://go/involved-parties.
  // Note: "importer of record" is defined on value_added_offerings.import_customs.
  string shipper_entity_fid = 14;
  string consignee_entity_fid = 15;
  string buyer_entity_fid = 16;
  string seller_entity_fid = 17;
  string importer_of_record_fid = 18;
  //
  // Defines contractual obligations of buyer and seller for this shipment's transit cost and risk.
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 9;
  //
  // The actual cargo moved as part of this order.
  oneof freight_info {
    //
    // Freight info for a non-consolidated shipment.
    flexport.os.v1.types.cargo.v1.ShipmentCargo cargo_info = 27;
    //
    // Freight info for a consolidated shipment. Cargo information is on the children.
    ConsolInfo consol_info = 28;
  }
  //
  // An ExecutionOrder has exactly one transit offering and may have zero or more
  // value-add offerings. The transit offering covers the entire set of transit sevices Flexport
  // is providing. The OceanFclExecutionOffering, for example, includes pickups/deliveries.
  // See go/execution-offering for more.
  flexport.executioncoordinator.executionoffering.v1.TransitExecutionOffering transit_offering = 22;
  flexport.executioncoordinator.executionoffering.v1.ValueAddedExecutionOfferings value_added_offerings = 25;
  //
  // Manually entered instructions for the ExecutionOrder.
  string other_instructions = 20;
  //
  // The instruction notes from client for the ExecutionOrder.
  ClientInstructions client_instructions = 33;
  //
  // The date when Flexport's rates expire. The monolith stores this as a timestamp which
  // expires at 12:00AM UTC on the date of expiration but does not display a time component.
  // We may eventually migrate this to a timestamp field instead of a WallTimeDate.
  // This date is similar to but distinct from the compliance-required NRA rate expiration date,
  // which is present in this field for ocean shipments to/from the USA:
  //
  //   execution_order.ocean_[fcl|non_fcl]_offering.full_service_info.nra_constraints
  //
  flexport.os.v1.types.walltimedate.v1.WallTimeDate rate_expiration_date = 19;
  //
  // Global transit date expectations for the _entire_ shipment.
  // Note that there may be multiple more specific dates for each origin and destination as well.
  // - transit_offering.[ocean_fcl|ocean_non_fcl|air].pickups.map { |p| p.cargo_ready_date }
  // - transit_offering.trucking_only.stops.select(&:pickup).map { |s| s.pickup.cargo_ready_date }
  // Why do we have both? Our product surface area is very large and there are different ways to
  // enter the same data. The global dates come from the shipment_date.rb model and are set in
  // either the booking UI or the quote request UI. The individual dates for each pickup location
  // are set through the Route Editor. Eventually our goal is to consolidate the product UIs to
  // clean this up, but for now both are here.
  // Cargo ready date and its status live in the execution order because they are at the upstream of
  // te planner, many planners only engages after the CRD is confirmed.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate global_cargo_ready_date = 29;
  CargoReadyDateStatus global_cargo_ready_date_status = 37;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate global_target_delivery_date = 30;
  flexport.os.v1.types.walltimedateordatetime.v1.WallTimeDateOrDateTime initial_estimated_delivery_date = 44;
  // The shipment's delivered in full date time from the Schedule Confirmed EOSE.
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime schedule_confirmed_delivery_in_full_date_time = 52;
  //
  // Information from the dangerous goods review executed by Flexport's DG team.
  DangerousGoodsReview dangerous_goods_review = 32;
  //
  // Domain-specific identifiers that can be set at ExecutionOrder creation time.
  // Some systems upstream of the ExecutionCoordinator need a way to determine whether a given
  // ExecutionOrderCreated event is relevant to them. For ExecutionOrders submitted asynchronously
  // via Kinesis, it isn't possible for submitting systems to save relevant EO FIDs, since FIDs are
  // generated by the ExecutionCoordinator at creation time.
  //
  // To handle this case, these upstream systems can populate ReferenceIdentifiers with values that
  // they can later use to determine whether (and in what manner) they should take a particular action.
  ReferenceIdentifiers reference_identifiers = 34;
  //
  // The quoted cargo measurements
  flexport.os.v1.types.cargo.v1.CargoMeasurements quoted_gross_measurements = 35;
  //


  //
  // Cancellation information regarding this ExecutionOrder
  CanceledInfo canceled_info = 38;

  // for any master shipment, it would check if it has been quoted to buyers consol shipment
  // for any child/demand shipment, it would check if the LCL - Ocean Freight is zero from quoting
  // Deprecated: for lcl child shipment, moved to OceanNonFclExecutionOffering
  bool is_buyers_consolidation = 40 [deprecated = true];

  flexport.executioncoordinator.types.enums.v1.ShipmentPriority priority = 41;

  Service service = 42;

  OperationProgress operation_progress = 43;

  FinancialProgress financial_progress = 51;

  InvolvedParty involved_party = 45;

  // Describe whether this shipment is a child or parent consol or does not have any relationship
  ConsolRelation consol_relation = 46;

  CargoReadyDate cargo_ready_date = 47;

  Quote quote = 48;

  Cargo cargo = 49;

  Instruction instruction = 50;
}

// 1-49 are reserved for the service offerings
// All other service related field will start at number 50.
message Service {
  // Whether a shipment needs destination linehaul service
  ServiceIncluded destination_linehaul_included = 1;
  ServiceIncluded ocean_included = 2;
  ServiceIncluded air_included = 3;
  ServiceIncluded origin_trucking_included = 4;
  ServiceIncluded origin_transload_trucking_included = 5;
  ServiceIncluded destination_transload_trucking_included = 6;
  ServiceIncluded destination_trucking_included = 7;
  ServiceIncluded export_customs_included = 8;
  ServiceIncluded import_customs_included = 9;
  ServiceIncluded in_bond_transit_included = 10;
  ServiceIncluded commercial_invoice_transcription_included = 11;
  // Whether Flexport is involved in ISF for this shipment.
  ServiceIncluded importer_security_filing_included = 12;
  ServiceIncluded insurance_included = 13;
  ServiceIncluded carbon_offset_included = 14;
  ServiceIncluded carrier_haulage_included = 15;
  // Whether a shipment needs switch bill of lading
  ServiceIncluded switch_bill_of_lading_included = 16;
  // Whether a rail shipment needs in-bond transit, the field 'in_bond_transit_included' (id 10) applies for trucking.
  ServiceIncluded in_bond_transit_for_rail_included = 17;

  // Defines contractual obligations of buyer and seller for this shipment's transit cost and risk.
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 50;
  flexport.executioncoordinator.types.enums.v1.TransportMode primary_transportation_mode = 51;
  flexport.executioncoordinator.types.enums.v1.MainFreightServiceLevel main_freight_service_level = 52;
  // Freight Type specifies the level of service that Flexport is providing to the client(could be the buyer or the seller).
  flexport.os.v1.types.freighttype.v1.FreightType freight_type = 53;
  // Freight Service specifies the level of service that the ocean carrier is providing to Flexport
  flexport.os.v1.types.freightservice.v1.FreightService freight_service = 54;
  flexport.os.v1.types.businesstype.v1.BusinessType business_type = 55;
  // Flexport service type in ISF submission.
  flexport.os.v1.types.isfservice.v1.ImporterSecurityFilingServiceType importer_security_filing_service_type = 56;
  CarrierHaulageServiceRole carrier_haulage_service = 57 [deprecated = true];
  CarrierHaulageServiceType carrier_haulage_service_type = 58;
}

enum CarrierHaulageServiceType {
  CARRIER_HAULAGE_SERVICE_TYPE_INVALID = 0;
  CARRIER_HAULAGE_SERVICE_TYPE_ORIGIN = 1;
  CARRIER_HAULAGE_SERVICE_TYPE_DESTINATION = 2;
  CARRIER_HAULAGE_SERVICE_TYPE_ORIGIN_AND_DESTINATION = 3;
}

// Deprecated: CarrierHaulageServiceRole is no longer in use
enum CarrierHaulageServiceRole {
  CARRIER_HAULAGE_SERVICE_ROLE_INVALID = 0;
  CARRIER_HAULAGE_SERVICE_ROLE_ORIGIN = 1;
  CARRIER_HAULAGE_SERVICE_ROLE_DESTINATION = 2;
  CARRIER_HAULAGE_SERVICE_ROLE_ORIGIN_AND_DESTINATION = 3;
}

message ServiceIncluded {
  bool value = 1;
}

message Instruction {
  string booking = 1;
}

message Quote {
  // quote acceptance time
  google.protobuf.Timestamp accepted_time = 1;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate global_target_delivery_date = 2;
  oneof transit_time {
    flexport.executioncoordinator.types.transittime.v1.AirTransitTime air_transit_time = 3;
    flexport.executioncoordinator.types.transittime.v1.OceanNonFclTransitTime ocean_non_fcl_transit_time = 4;
    flexport.executioncoordinator.types.transittime.v1.OceanFclTransitTime ocean_fcl_transit_time = 5;
    flexport.executioncoordinator.types.transittime.v1.TruckingTransitTime trucking_only_transit_time = 6;
  }
  oneof ote_milestones {
    flexport.executioncoordinator.types.otemilestones.v1.AirOteMilestones air_ote_milestones = 7;
    flexport.executioncoordinator.types.otemilestones.v1.OceanNonFcLOteMilestones ocean_non_fcl_ote_milestones = 8;
    flexport.executioncoordinator.types.otemilestones.v1.OceanFcLOteMilestones ocean_fcl_ote_milestones = 9;
  }
  flexport.executioncoordinator.types.nraconstraints.v1.NraConstraints nra_constraints = 10;
  flexport.catalog.enums.v1.OceanTierDto catalog_tier = 11;
  // quoted_container_counts comes from quote.quoted_container_counts and typically doesn't change.
  flexport.os.v1.types.cargo.v1.ContainerCounts quoted_container_counts = 12;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate rate_expiration_date = 13;
  flexport.os.v1.types.cargo.v1.CargoMeasurements quoted_gross_measurements = 14;
  flexport.executioncoordinator.types.fulfillmentguidance.v1.FulfillmentGuidance fulfillment_guidance = 15;
}

message Cargo {
  // Use "cargo_info.gross_measurements" instead.
  flexport.os.v1.types.cargo.v1.CargoMeasurements gross_measurements = 1 [deprecated = true];
  // Freight info for a non-consolidated shipment.
  flexport.os.v1.types.cargo.v1.ShipmentCargo cargo_info = 2;
}

enum ConsolRelation {
  CONSOL_RELATION_INVALID = 0;
  CONSOL_RELATION_NONE = 1;
  CONSOL_RELATION_CHILD = 2;
  CONSOL_RELATION_CONSOL = 3;
}

message CargoReadyDate {
  flexport.os.v1.types.walltimedate.v1.WallTimeDate global_cargo_ready_date = 1;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate updated_at = 2 [deprecated = true];
  string updated_by_user_fid = 3;
  google.protobuf.Timestamp updated_timestamp = 4;
  // Notes detailing the reason for modifying the EO.CargoReadyDate.
  string updated_reason = 5;
}

message InvolvedParty {
  InvolvedPartyInfo client_fid = 1;
  InvolvedPartyInfo shipper_fid = 2;
  InvolvedPartyInfo consignee_fid = 3;
  InvolvedPartyInfo seller_fid = 4;
  InvolvedPartyInfo buyer_fid = 5;
  InvolvedPartyInfo export_customs_agent_fid = 6;
  InvolvedPartyInfo import_customs_agent_fid = 7;
  InvolvedPartyInfo importer_of_record_entity_fid = 8;
  InvolvedPartyInfo origin_agent_fid = 9;
  InvolvedPartyInfo destination_agent_fid = 10;
  InvolvedPartyInfo export_customs_freight_partner_fid = 11;
  InvolvedPartyInfo import_customs_freight_partner_fid = 12;
  InvolvedPartyInfo primary_forwarding_agent_fid = 13;
}

message InvolvedPartyInfo {
  string value = 1;
}

// The text message for the instructions from client. Created when tracking-only shipments are uploaded in the Client App
message ClientInstructions {
  // The fid of the user who sent the instruction.
  string user_fid = 1;
  // The unstructured text message for the instructions.
  string instructions_text_body = 2;
  // Enum representing how the ExecutionOrder was created. Corresponds to single shipment manual entry or CSV upload.
  BookingSource booking_source = 3;
}

// Enum representing how the ExecutionOrder was created. Corresponds to single shipment manual entry or CSV upload.
enum BookingSource {
  BOOKING_SOURCE_INVALID = 0;
  BOOKING_SOURCE_SINGLE_ENTRY = 1;
  BOOKING_SOURCE_CSV_UPLOAD = 2;
  BOOKING_SOURCE_API = 3;
}

// The sell-side status of an ExecutionOrder, typically set by the CustomerPlatform layer.
enum ExecutionOrderStatus {
  EXECUTION_ORDER_STATUS_INVALID = 0;
  // Use "READY_FOR_EXECUTION" instead.
  EXECUTION_ORDER_STATUS_ACTIVE = 1 [deprecated = true];
  EXECUTION_ORDER_STATUS_CANCELLED = 2;
  EXECUTION_ORDER_STATUS_PENDING_REQUOTE_ACCEPTANCE = 3;
  // Note: ExecutionOrderStatus does not include shipment.completed_at because:
  // The EO represents a request to the Flexport freight execution system. The freight system marking
  // a shipment as completed is not a change to the request to the freight execution system — it is a
  // status update from the freight execution system about the completion of the order.
  // It is represented with EOSE: ShipmentMarkedAsCompleted.
  EXECUTION_ORDER_STATUS_READY_FOR_EXECUTION = 4;
}

// A source of an ExecutionOrder revision.
message ExecutionOrderRevisionSource {
  //
  // The user that created the revision. Might be a bot.
  string user_fid = 1;
  //
  // The "service or group" (a la http://go/fid) that upserted the ExecutionOrder revision.
  OrderUpserter order_upserter = 4;
  //
  // The ordering process that created the revision.
  OrderingProcess ordering_process = 3;
  //
  // Free text note about the revision.
  string note = 5;
}

// Information from the dangerous goods review executed by Flexport's DG team.
message DangerousGoodsReview {
  // The DG review status of the shipment
  flexport.executioncoordinator.types.enums.v1.DangerousGoodsReviewStatus status = 1;
  // Shipments with dangerous material undergo a DG check that determines if it's dangerous.
  // It's possible to have some DG cargo (meaning non-empty list of DangerousGoodsHazard
  // enums in the dg_classifications field) but still have DangerousGoodsReviewStatus
  // set to DANGEROUS_STATUS_NO.
  // That's because there is a threshold of a certain amount of DG cargo needed to get
  // DANGEROUS_STATUS_YES and some shipments don't reach that threshold but are still
  // different than normal shipments.
  DangerousStatus is_dangerous = 2;
  // All of the DG classifications for the shipment. These give the hazards associated
  // with the shipment.
  repeated DangerousGoodsClassification dg_classifications = 3;
  // Represents if there are any missing documents that are needed for DG review.
  // HACK HACK HACK -  This is on the EO rather than on a EOSE as, DG review happens regularly before
  // a quote is accepted and an EO is created - thus it would fit better as an order param rather than a state event.
  // DG team also tries to complete the review early in the shipment lifecycle to unblock other actions, so it
  // usually happens before the quote request becomes a shipment.
  repeated string missing_documents = 4;
  // Manual Air Way Bill Instruction or Carrier Booking Instructions.
  string instructions = 5;
  // The user_fid of the last person who reviewed dangerous goods for this shipment.
  string reviewed_by_user_fid = 6;
  // The time of the most recent review.
  google.protobuf.Timestamp reviewed_time = 7;
}

// Whether or not a DG classification is dangerous, or unspecified.
enum DangerousStatus {
  DANGEROUS_STATUS_INVALID = 0;
  DANGEROUS_STATUS_YES = 1;
  DANGEROUS_STATUS_NO = 2;
  DANGEROUS_STATUS_NOT_SPECIFIED = 3;
}

enum CargoReadyDateStatus {
  CARGO_READY_DATE_STATUS_INVALID = 0;
  CARGO_READY_DATE_STATUS_UNCONFIRMED = 1;
  CARGO_READY_DATE_STATUS_CONFIRMED = 2;
}

// Represent a dangerous goods classification.
message DangerousGoodsClassification {
  // The main hazard associated with the dangerous good classification.
  flexport.executioncoordinator.types.enums.v1.DangerousGoodsHazard hazard = 1;
  // The sub hazards associated with the dangerous good classification.
  repeated flexport.executioncoordinator.types.enums.v1.DangerousGoodsHazard sub_risks = 2;
  // The UN code used to identify hazardous materials.
  string un_code = 3;
  // A detailed description the dangerous good being shipment.
  string proper_shipping_name = 4;
  // The packing instruction code for the dangerous good.
  string packing_instruction = 5;
  // The section classification for the given UN code.
  string section = 6;
  // The overall degree of danger the dangerous good presents.
  flexport.executioncoordinator.types.enums.v1.DangerousGoodsPackingGroup packing_group = 7;
  // The number of individual packages in the shipment which contain the dangerous good.
  int32 package_count = 8;
  // The amount of dangerous goods in the inner packages doesn't exceed the hazard classification quantity per a package.
  bool limited_quantities = 9;
  // The amount of dangerous goods for the whole shipment doesn't exceed the hazard classification quantity per a shipment.
  bool excepted_quantities = 10;
  // The dangerous good has a special case or special provision exemptions.
  repeated string special_provisions = 11;
}

// Domain-specific identifiers that can be set at ExecutionOrder creation.
message ReferenceIdentifiers {
  // The fid of the booking that resulted in this ExecutionOrder.
  string booking_booking_fid = 1;
  // For ExecutionOrders created from bookings that originated in the customs_only_booking service, this
  // will be set to the customs_only_booking service's expected_booking fid.
  string customs_only_booking_expected_booking_fid = 2;
}

// Canceled Reason type.
enum CanceledReasonType {
  CANCELED_REASON_TYPE_INVALID = 0;
  CANCELED_REASON_TYPE_AVAILABILITY = 1;
  CANCELED_REASON_TYPE_CAPABILITY = 2;
  CANCELED_REASON_TYPE_COMPLIANCE = 3;
  CANCELED_REASON_TYPE_ONBOARDING = 4;
  CANCELED_REASON_TYPE_OPERATIONS = 5;
  CANCELED_REASON_TYPE_RATES = 6;
  CANCELED_REASON_TYPE_TRANSIT_TIMES = 7;
  CANCELED_REASON_TYPE_COMMERCIAL = 8;
  CANCELED_REASON_TYPE_OTHER = 9;
}

// Holds relavent information for why an ExecutionOrder
// was canceled.
message CanceledInfo {
  // The reason type for the canceled.
  CanceledReasonType reason_type = 1;

  // The time when this ExecutionOrder was canceled.
  google.protobuf.Timestamp canceled_time = 2;

  // Any notes around the reason the EO was canceled.
  string reason = 3;

  // The fid of the user who canceled the ExecutionOrder.
  string user_fid = 4;
}

// Holds operations progress related to the shipment
message OperationProgress {
  // shipment marked as complete
  OperationProgressInfo completed = 1;
}

// Holds financial progress related to the shipment
message FinancialProgress {
  // shipment marked as financial completed
  bool is_completed = 1;
  google.protobuf.Timestamp completed_at = 2;
  string completed_by_user_fid = 3;
  int32 status_change_count = 4;
}

// Data associated with each operation progress
message OperationProgressInfo {
  bool is_done = 1;
  google.protobuf.Timestamp time = 2;
}

// All entity names
enum Entity {
  ENTITY_INVALID = 0;
  ENTITY_SERVICE = 1;
  ENTITY_OPERATION_PROGRESS = 2;
  ENTITY_CARGO_INFO = 3;
  ENTITY_ORDER_FIELD = 4;
  ENTITY_CONSOL_RELATION = 5;
  ENTITY_CARGO_READY_DATE = 6;
  ENTITY_QUOTE = 7;
  ENTITY_CARGO = 8;
  ENTITY_INVOLVED_PARTY = 9;
  ENTITY_INSTRUCTION = 10;
  ENTITY_DANGEROUS_GOODS_REVIEW = 11;
  ENTITY_ORDER_STATUS = 12;
  ENTITY_TRANSIT_OFFERING = 13;
  ENTITY_FINANCIAL_PROGRESS = 14;
}

// Tracks what is updated from the previous entity revision.
message EntityActivity {
  // Entity of the activity
  flexport.executioncoordinator.executionorder.v1.Entity entity_name = 1;
  // The new json value for the activity
  EntityDifference entity_difference = 2;
  // idempotent key to make the API idempotent
  string idempotent_key = 3;
  // User that triggers the entity update, if there is
  string user_fid = 4;
  // The ExecutionOrder of the entity
  string execution_order_fid = 5;
  // The caller system that the update request is from
  string caller_name = 6;
  // The creation time of the activity
  google.protobuf.Timestamp creation_time = 7;
}

// Tracks what is updated from the previous entity revision.
message EntityDifference {
  // All added fields. From non-existence to existence in json.
  repeated EntityField added = 1;
  // All updated fields. (value, null) is considered as updated if null appears in json content.
  repeated EntityField updated = 2;
  // All deleted fields. From existence to non-existence in json.
  repeated EntityField deleted = 3;
}

// Tracks what is changed on a field.
message EntityField {
  // json path of a field. Example: $.store.book[0].title
  // Reference: https://www.ietf.org/archive/id/draft-goessner-dispatch-jsonpath-00.html
  string path = 1;
  // Old value before this change.
  string old_value = 2;
  // New value after this change.
  string new_value = 3;
}

// This is an entity created for tracking activity of EO direct fields, that are not nested in
// any order entity. With it, changes to EO direct fields can be tracked in order entity activity.
message OrderField {
  ExecutionOrderStatus order_status = 1;
  ConsolRelation consol_relation = 2;
}

message StatusActivity {
  option deprecated = true;

  // The diff value for the activity
  StatusDifference status_difference = 1;
  // idempotent key to make the API idempotent
  string idempotent_key = 2;
  // User that triggers the entity update, if there is
  string user_fid = 3;
  // The ExecutionOrder Fid of the entity
  string execution_order_fid = 4;
  // The caller system that the update request is from
  string caller_name = 5;
  // The creation time of the activity
  google.protobuf.Timestamp creation_time = 6;
}

// Tracks what is updated from the previous status.
message StatusDifference {
  option deprecated = true;

  // Old status before this change.
  ExecutionOrderStatus old_status = 1;
  // New status after this change.
  ExecutionOrderStatus new_status = 2;
}
