// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.derivedshipment.v1beta1;

import "flexport/executioncoordinator/derivedshipment/v1/derived_shipment.proto";
import "flexport/executioncoordinator/derivedshipment/v1/nullable_derived_shipment.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "DerivedShipmentApiProto";
option java_package = "com.flexport.executioncoordinator.derivedshipment.v1beta1";
option ruby_package = "Flexport::ExecutionCoordinator::DerivedShipment::V1Beta1";

// An API for interacting with DerivedShipment entities.
service DerivedShipmentAPI {
  // Gets a DerivedShipment.
  rpc GetDerivedShipment(GetDerivedShipmentRequest) returns (GetDerivedShipmentResponse);
  // Returns the DerivedShipments for several ExecutionOrders by shipment fids.
  rpc BatchGetDerivedShipmentsByShipmentFids(BatchGetDerivedShipmentsByShipmentFidsRequest) returns (BatchGetDerivedShipmentsByShipmentFidsResponse);
  // Retrieves all revisions of an Itinerary.
  rpc ListDerivedShipmentRevisions(ListDerivedShipmentRevisionsRequest) returns (ListDerivedShipmentRevisionsResponse);

  // Only the derived_shipment_extract monolith Rails Engine should call this.
  // If you want to update shipment data from elsewhere, please either upsert
  // ExecutionOrder or ExecutionPlan or publish ETSE or EOSE per http://go/ec-101.
  // TODO: Move this to ExecutionCoordinator AdminAPI.
  // Creates or updates a DerivedShipment. Idempotent.
  rpc UpsertDerivedShipment(UpsertDerivedShipmentRequest) returns (UpsertDerivedShipmentResponse);

  // Only the derived_shipment_extract monolith Rails Engine should call this.
  // This will mark a DerivedShipment.deleted_at field which serves as a soft delete.
  // TODO: Move this to ExecutionCoordinator AdminAPI.
  rpc DeleteDerivedShipment(DeleteDerivedShipmentRequest) returns (DeleteDerivedShipmentResponse);
}

// The request for GetDerivedShipment.
message GetDerivedShipmentRequest {
  oneof identifier {
    string execution_order_fid = 1;
    string shipment_fid = 2;
    string fid = 3;
    string execution_task_fid = 4;
  }
}

// The response for GetDerivedShipment.
message GetDerivedShipmentResponse {
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipment derived_shipment = 1;
}

// The request for UpsertDerivedShipment.
message UpsertDerivedShipmentRequest {
  //
  // The new DerivedShipment.
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipment derived_shipment = 2;
}

// The response for UpsertDerivedShipment.
message UpsertDerivedShipmentResponse {
  flexport.executioncoordinator.derivedshipment.v1.DerivedShipment derived_shipment = 1;
}

message BatchGetDerivedShipmentsByShipmentFidsRequest {
  repeated string shipment_fids = 1;
}

// The order of the returned results matches the order of the shipment_fids in the request.
// If no DerivedShipment is found for a given shipment_fid, then an empty NullableDerivedShipment
// message is included at that array index in the response so that ordering is preserved.
// In other words, nullable_derived_shipment.size in the response will always equal
// shipment_fids.size in the request, and the ordering will be consistent.
message BatchGetDerivedShipmentsByShipmentFidsResponse {
  repeated flexport.executioncoordinator.derivedshipment.v1.NullableDerivedShipment nullable_derived_shipments = 1;
}

message ListDerivedShipmentRevisionsRequest {
  string shipment_fid = 1;
}

message ListDerivedShipmentRevisionsResponse {
  repeated flexport.executioncoordinator.derivedshipment.v1.DerivedShipment revisions = 1;
}

// The request for DeleteDerivedShipment.
message DeleteDerivedShipmentRequest {
  // The DerivedShipment associated with this shipment FID that
  // should be soft deleted.
  string shipment_fid = 1;

  // The timestamp of when the shipment was marked deleted
  google.protobuf.Timestamp deleted_time = 2;
}

// The response for DeleteDerivedShipment.
message DeleteDerivedShipmentResponse {}
