// TEAM: customs_platform

syntax = "proto3";

package flexport.customsciservice.constants.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "ConstantsProto";
option java_package = "com.flexport.customsciservice.constants.v1beta1";
option ruby_package = "Flexport::CustomsCiService::Constants::V1Beta1";

// Types of quantity units
enum QuantityUnit {
  QUANTITY_UNIT_INVALID = 0;
  QUANTITY_UNIT_PCS = 1;
  QUANTITY_UNIT_DPC = 2;
  QUANTITY_UNIT_DOZ = 3;
  QUANTITY_UNIT_HUN = 4;
  QUANTITY_UNIT_THS = 5;
  QUANTITY_UNIT_PRS = 6;
  QUANTITY_UNIT_DPR = 7;
}

// Types of weight units
enum WeightUnit {
  WEIGHT_UNIT_INVALID = 0;
  WEIGHT_UNIT_KG = 1;
  WEIGHT_UNIT_LB = 2;
}

// Types of volume units
enum VolumeUnit {
  VOLUME_UNIT_INVALID = 0;
  VOLUME_UNIT_CBM = 1;
  VOLUME_UNIT_CBFT = 2;
}

// Types of involved parties
enum InvolvedPartyType {
  INVOLVED_PARTY_TYPE_INVALID = 0;
  INVOLVED_PARTY_TYPE_CONSIGNEE = 1;
  INVOLVED_PARTY_TYPE_IMPORTER_OF_RECORD = 2;
  INVOLVED_PARTY_TYPE_SELLER = 3;
  INVOLVED_PARTY_TYPE_BUYER = 4;
  INVOLVED_PARTY_TYPE_MANUFACTURER = 5;
}

// Possible CI Sources
enum CISourceType {
  CI_SOURCE_TYPE_INVALID = 0;
  CI_SOURCE_TYPE_PUBLIC_API = 1;
  CI_SOURCE_TYPE_INTEGRATION = 2;
  CI_SOURCE_TYPE_INTERNAL = 3;
  CI_SOURCE_TYPE_CI_SERVICE_INTERNAL = 4;
}

// Commercial invoice line item source type
enum CILineItemSourceType {
  CI_LINE_ITEM_SOURCE_TYPE_INVALID = 0;
  CI_LINE_ITEM_SOURCE_TYPE_CORE_API = 1;
  CI_LINE_ITEM_SOURCE_TYPE_CI_SERVICE_API = 2;
  CI_LINE_ITEM_SOURCE_TYPE_CI_SERVICE_INTEGRATION = 3;
  CI_LINE_ITEM_SOURCE_TYPE_CUSTOMS_TRANSCRIPTION = 4;
  CI_LINE_ITEM_SOURCE_TYPE_MANUAL = 5;
}

// Freight charge adjustment applied as enum type
enum FreightChargeAdjustmentAppliedAs {
  FREIGHT_CHARGE_ADJUSTMENT_APPLIED_AS_INVALID = 0;
  FREIGHT_CHARGE_ADJUSTMENT_APPLIED_AS_PER_UNIT = 1;
  FREIGHT_CHARGE_ADJUSTMENT_APPLIED_AS_FLAT_RATE = 2;
  FREIGHT_CHARGE_ADJUSTMENT_APPLIED_AS_PERCENTAGE = 3;
}

// Freight charge adjustment code enum type
enum FreightChargeAdjustmentCode {
  FREIGHT_CHARGE_ADJUSTMENT_CODE_INVALID = 0;
  FREIGHT_CHARGE_ADJUSTMENT_CODE_TEST_CODE = 1;
}

// Charge adjustment applied as enum type
enum ChargeAdjustmentAppliedAs {
  CHARGE_ADJUSTMENT_APPLIED_AS_INVALID = 0;
  CHARGE_ADJUSTMENT_APPLIED_AS_PER_UNIT = 1;
  CHARGE_ADJUSTMENT_APPLIED_AS_FLAT_RATE = 2;
  CHARGE_ADJUSTMENT_APPLIED_AS_PERCENTAGE = 3;
}

// Charge adjustment code enum type
enum ChargeAdjustmentCode {
  CHARGE_ADJUSTMENT_CODE_INVALID = 0;
  CHARGE_ADJUSTMENT_CODE_COMMISSIONS_AND_BROKERAGE = 1;
  CHARGE_ADJUSTMENT_CODE_SALVAGING_AND_PACKAGING_MEANS = 2;
  CHARGE_ADJUSTMENT_CODE_MATERIALS_COMPONENT_PARTS = 3;
  CHARGE_ADJUSTMENT_CODE_PRODUCTION_TOOLS_AND_MOLDS = 4;
  CHARGE_ADJUSTMENT_CODE_PRODUCTION_MATERIALS = 5;
  CHARGE_ADJUSTMENT_CODE_FOREIGN_INPUTS_AND_MATERIALS = 6;
  CHARGE_ADJUSTMENT_CODE_ROYALTIES_AND_LICENSING = 7;
  CHARGE_ADJUSTMENT_CODE_RESALE_TRANSFER_PROCEEDS = 8;
  CHARGE_ADJUSTMENT_CODE_TRANSPORT_HANDLING_INSURANCE = 9;
  CHARGE_ADJUSTMENT_CODE_INDIRECT_PAYMENTS = 10;
  CHARGE_ADJUSTMENT_CODE_ARTICLE_71_ADJUSTMENT = 11;
  CHARGE_ADJUSTMENT_CODE_POST_ENTRY_TRANSPORTATION = 12;
  CHARGE_ADJUSTMENT_CODE_POST_IMPORTATION_COSTS = 13;
  CHARGE_ADJUSTMENT_CODE_IMPORT_DUTIES_OR_OTHER_CHARGES = 14;
  CHARGE_ADJUSTMENT_CODE_INTEREST_EXPENSES = 15;
  CHARGE_ADJUSTMENT_CODE_REPRODUCTION_RIGHTS = 16;
  CHARGE_ADJUSTMENT_CODE_PURCHASING_COMMISSIONS = 17;
  CHARGE_ADJUSTMENT_CODE_DEDUCTIONS_DISCOUNTS_REBATES = 18;
  CHARGE_ADJUSTMENT_CODE_OTHER_ADDITIONS = 19;
  CHARGE_ADJUSTMENT_CODE_OTHER_DEDUCTIONS = 20;
}

// Used to specify to which value the charge adjustment should be applied. Atm mainly used to disambiguate adjustments
// in the EU.
enum ChargeAdjustmentAppliedTo {
  CHARGE_ADJUSTMENT_APPLIED_TO_INVALID = 0;
  CHARGE_ADJUSTMENT_APPLIED_TO_VALUE = 1;
  CHARGE_ADJUSTMENT_APPLIED_TO_VAT = 2;
}
