// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executiontask.v1;

option java_multiple_files = true;
option java_outer_classname = "AirDirectExecutionTaskParamsProto";
option java_package = "com.flexport.executioncoordinator.executiontask.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionTask::V1";

import "flexport/executioncoordinator/executioncargo/v1/execution_cargo.proto";
import "flexport/executioncoordinator/executiontask/v1/params/trucking_execution_task_params.proto";
import "flexport/executioncoordinator/types/enums/v1/air_direct_handling_type.proto";
import "flexport/os/v1/types/walltimedatetime/v1/wall_time_date_time.proto";

// Parameters for AirDirect ExecutionTask.
//
// An AirDirect ExecutionTask is a request to move some cargo by air. This move
// does not involve a consolidation step. If consolidation is required, use the
// AirConsol ExecutionTask to consolidate the cargo first, then an AirDirect
// ExecutionTask to move the resulting consolidated cargo.
//
// Shipments that depart from a location where Flexport has a warehouse will
// typically be handled by Flexport at origin. In such cases (a.k.a.
// "insourced" shipments), the AirDirect ExecutionTask's responsibility starts
// when the cargo is tendered to the airline at the origin airport. Origin
// cartage and warehouse operations (consolidation, weighing and dimming at the
// origin CFS, etc.) are represented as separate ExecutionTasks, handled by
// separate providers.
//
// Shipments that depart from a location where Flexport does not have a
// presence are handled by a partner at origin. This partner is known as the
// "origin agent". In such cases, the scope of the AirDirect ExecutionTask is
// widened to include cartage and warehouse operations at origin, as these are
// the responsibility of the origin agent. With the exception of a few trusted
// partners on specific routes, we do not allow origin agents to consolidate
// our cargo, so this AirDirect ExecutionTask is effectively the first step in
// a partner shipment's lifecycle.
//
// This ExecutionTask combines aspects of the legacy
// AirExecution::Models::BuildPlan and AirExecution::Booking models.
//
// Assumptions:
//
// - All cargo in an AirDirect ExecutionTask departs from a single origin.
//   For insourced air shipments, this origin must be an airport. For shipments
//   handled by an origin agent, it will most likely be the shipper's warehouse.
// - All cargo in an AirDirect ExecutionTask is intended to be loaded onto the
//   same *initial* flight.
// - Most AirDirect ExecutionTasks will have a single destination, but an
//   AirDirect ExecutionTask can request that cargo be split and sent to
//   different final destinations, if the carrier supports "mix-load" ULDs.
// - All destinations must be airports.
// - Cargo can be tendered intact or loose to the carrier at origin.
// - Cargo can be released to us intact or loose at destination. Cargo that is
//   tendered intact may be broken down by the carrier and released loose, but
//   not the reverse: cargo that is tendered loose is always released loose.
// - An AirDirect ExecutionTask can include cargo with different handling
//   types, e.g. 1 intact ULD + 4 loose cartons.
// - The AirDirect ExecutionTask must specify how many master air waybills
//   (MAWBs) are to be issued for the given cargo:
//   - Cargo with different destinations must fly under separate MAWBs.
//   - Cargo with the same destination may fly under the same MAWB, as long as
//     it's all Flexport cargo - if we're including a partner's cargo, it must
//     be under a separate MAWB, even if consolidated into the same ULD.
//   - We may split Flexport cargo flying to the same destination into separate
//     MAWBs to mitigate the risk of part of the cargo holding the rest of the
//     cargo up at customs.
//
// Example AirDirect ExecutionTask:
//
//     {
//       "carrier_fid": "flx::core:carrier:dbid/617",
//       "planned_route": [
//         {
//           "carrier_fid": "flx::core:carrier:dbid/617",
//           "flight_number": "PO238",
//           "origin_port_fid": "flx::core:port:dbid/565129",
//           "destination_port_fid": "flx::core:port:dbid/566709",
//           "proforma_departure": {
//             "year": 2020,
//             "month": 9,
//             "day": 5,
//             "hours": 13,
//             "minutes": 30,
//             "timezone": "Asia/Hong_Kong"
//           },
//           "proforma_arrival": {
//             "year": 2020,
//             "month": 9,
//             "day": 5,
//             "hours": 7,
//             "minutes": 35,
//             "timezone": "America/Anchorage"
//           },
//           "is_surface_leg": false
//         },
//         {
//           "carrier_fid": "flx::core:carrier:dbid/617",
//           "flight_number": "PO238",
//           "origin_port_fid": "flx::core:port:dbid/566709",
//           "destination_port_fid": "flx::core:port:dbid/566889",
//           "proforma_departure": {
//             "year": 2020,
//             "month": 9,
//             "day": 5,
//             "hours": 9,
//             "minutes": 5,
//             "timezone": "America/Anchorage"
//           },
//           "proforma_arrival": {
//             "year": 2020,
//             "month": 9,
//             "day": 5,
//             "hours": 15,
//             "minutes": 15,
//             "timezone": "America/Los_Angeles"
//           },
//           "is_surface_leg": false
//         }
//       ],
//       "cargos": [
//         {
//           "cargo": {
//             "fid": "flx::executioncoordinator:executioncargo:5fda23d2-51e9-4a44-980e-6a2ab575f82d",
//             "value": {
//               "ulds": {
//                 "quantity": 1,
//                 "uld_type": "Q7",
//                 "contents": [
//                   {
//                     "quantity": 4,
//                     "master_air_waybill_number": "40313042245"
//                   },
//                   {
//                     "quantity": 5,
//                     "master_air_waybill_number": "40313042256"
//                   }
//                 ]
//               }
//             },
//           },
//           "handling_type": "AIR_DIRECT_HANDLING_TYPE_BREAKDOWN"
//         },
//         {
//           "cargo": {
//             "fid": "flx::executioncoordinator:executioncargo:c6330228-2b3a-4443-aeb1-09cfba481109",
//             "value": {
//               "loose_cartons": {
//                 "quantity": 3,
//                 "master_air_waybill_number": "40313042256"
//               }
//             }
//           },
//           "handling_type": "AIR_DIRECT_HANDLING_TYPE_LOOSE"
//         }
//       ],
//       "master_air_waybills": [
//         {
//           "master_air_waybill_number": "40313042245"
//         },
//         {
//           "master_air_waybill_number": "40313042256"
//         }
//       ],
//       "origin_agent": null
//     }
//
message AirDirectExecutionTaskParams {
  //
  // The air carrier that we make the booking with.
  // Monolith model: app/models/carrier.rb
  // a source of AIR_DIRECT_SOURCE_CONSOL_PLANNER_FINALIZE_BUILD_PLAN might not set this field
  string carrier_fid = 1;
  //
  // The planned route for this booking. Must include at least one leg.
  repeated AirDirectLeg planned_route = 2;
  //
  // The route's starting airport.
  // Useful for identifying which of route's legs is 'first', to confirm or reconstruct the order of the route's legs.
  string origin_port_fid = 7;
  //
  // The cargo to fly as part of this booking. Must include at least one cargo.
  // a source of AIR_DIRECT_SOURCE_CONSOL_PLANNER_FINALIZE_BUILD_PLAN might not set this field
  repeated AirDirectCargo cargos = 3;
  //
  // The Master Air Waybills (MAWBs) the cargo will fly under.
  // Deprecated: MAWBs are now described on each leg in the route, where multiple legs may reference the same MAWBs
  repeated AirDirectMasterAirWaybill master_air_waybills = 4 [deprecated = true];
  //
  // Information about any tasks handled by a non-Flexport origin agent. This
  // includes origin cartage and warehouse operations. Leave this blank for
  // shipments handled by Flexport at origin (a.k.a. "insourced" shipments).
  AirDirectOriginAgentInfo origin_agent_info = 5;
  //
  // What did we derive this ExecutionTask from?
  AirDirectSource source = 6;
  // HACK HACK HACK
  // Trucking legs managed by air provider.
  // See go/trucking-legs-on-non-trucking-task for more details
  repeated TruckingExecutionTaskParams managed_trucking_params = 8;
}

// A flight or surface leg between two airports.
message AirDirectLeg {
  //
  // The air carrier that operates the flight. This may not always be the same
  // carrier as the booking. For example, we might make a booking with United,
  // but the first leg is fulfilled by Cathay Pacific.
  // Monolith model: app/models/carrier.rb
  string carrier_fid = 1;
  //
  // The full flight number, including any carrier prefix.
  // Example: "BA175"
  string flight_number = 2;
  //
  // The origin airport.
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string origin_port_fid = 3;
  //
  // The destination airport.
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string destination_port_fid = 4;
  //
  // When the flight is originally scheduled to depart from the origin airport,
  // in the origin airport's timezone. This date is not updated if the flight
  // is delayed.
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime proforma_departure = 5;
  //
  // When the flight is originally scheduled to arrive at the destination
  // airport, in the destination airport's timezone. This date is not updated
  // if the flight is delayed.
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime proforma_arrival = 6;
  //
  // A surface leg is when the carrier moves cargo by truck (typically from a
  // large hub to a smaller regional airport).
  bool is_surface_leg = 7;
  //
  // The Master Air Waybill (MAWB) numbers cargo on this leg will fly under.
  repeated string master_air_waybill_numbers = 8;
  //
  // The AirSupply::Models::Allotment record that will fulfill this leg.
  string air_allotment_fid = 9;
}

// Some cargo we want to fly.
message AirDirectCargo {
  //
  // The cargo to fly. Can be ULDs or loose cartons.
  flexport.executioncoordinator.executioncargo.v1.ExecutionCargo cargo = 1;
  //
  // The handling type for this cargo.
  flexport.executioncoordinator.types.enums.v1.AirDirectHandlingType handling_type = 2;
}

// A Master Air Waybill (MAWB). All of the cargo in this ExecutionTask must be
// covered by a MAWB.
message AirDirectMasterAirWaybill {
  //
  // The MAWB number.
  // A 3-digit carrier prefix, followed by 8 digits.
  string master_air_waybill_number = 1;
  //
  // Optional: The destination airport for this MAWB.
  //
  // Airlines sometimes offer "mix-load" ULDs, which we tender intact at
  // origin, and the airline breaks down and reloads onto different flights at
  // an intermediate airport. This means we may have cargo in the same ULD
  // going to different destinations, flying under different MAWBs.
  //
  // This field specifies the destination for this MAWB, which must correspond
  // to the destination of one of the planned route legs for this booking.
  //
  // If there is only one final destination in the planned route for this
  // ExecutionTask, this field can be left blank.
  //
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string destination_port_fid = 2;
}

// Information about tasks handled by a partner at origin.
message AirDirectOriginAgentInfo {
  //
  // The partner that handles the cargo at origin.
  string origin_agent_fid = 1;
  //
  // The address where the origin agent receives the cargo. Most likely the
  // shipper's warehouse or factory.
  string origin_address_fid = 2;
}

// Indicates where an AirDirect ExecutionTask came from.
enum AirDirectSource {
  AIR_DIRECT_SOURCE_INVALID = 0;
  //
  // For ExecutionTasks created from build plans finalized from the Consol Planner service.
  // These represent an instruction to move consolidated cargo.
  AIR_DIRECT_SOURCE_CONSOL_PLANNER_FINALIZE_BUILD_PLAN = 4;
  //
  // We can't work out if we should produce an AirDirect ExecutionTask for this
  // air shipment because it's unclear if it will need to be consolidated
  // first; but we produce one anyway so that we have something to hang
  // ExecutionTaskStateEvents onto. The air provider should not take any action
  // on these other than tracking them and emitting ExecutionTaskStateEvents.
  // These should disappear when we stop deriving ExecutionTasks from legacy
  // shipment data.
  AIR_DIRECT_SOURCE_MONOLITH_PLACEHOLDER = 1;
  //
  // For ExecutionTasks derived from ExecutionOrders derived from build plans.
  // These represent an instruction to move consolidated cargo.
  AIR_DIRECT_SOURCE_MONOLITH_BUILD_PLAN = 2;
  //
  // For ExecutionTasks that we produce right away when we know the shipment
  // won't be consolidated, because it has an origin agent that we don't allow
  // to consolidate.
  AIR_DIRECT_SOURCE_NON_CONSOL_ORIGIN_AGENT_HEURISTICS = 3;
}
