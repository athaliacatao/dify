// TEAM: cost_capture

syntax = "proto3";

package flexport.financialledger.rates.v1beta1;

import "flexport/financialvisibility/utils/v1beta1/utils.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "RatesProto";
option java_package = "com.flexport.financialledger.rates.v1beta1";
option ruby_package = "Flexport::FinancialLedger::Rates::V1Beta1";

// Generic rate item representation.
message RateItemDto {
  string name = 1;
  RateDto rate = 2;
  flexport.financialvisibility.v1beta1.JSONValueDto context_attributes = 3;
}

// Minimum rate price representation.
// TODO: Replace this with min/max rate.
message MinimumPriceDto {
  string type = 1;
  string currency_code = 2;
  string amount = 3;
}

// Rate representation.
message RateDto {
  string currency_code = 1;
  MinimumPriceDto minimum_price = 2;
  oneof value {
    FormulaRateDto formula_value = 3;
    BreakRateDto break_rate_value = 4;
  }
}

// Representation of a formula rate with constants.
message FormulaRateDto {
  string formula = 1;
  map<string, ConstantValueDto> constants = 2;
}

// Constant entry for a formula rate.
message ConstantValueDto {
  oneof value {
    NumberConstantValueDto number_value = 1;
    google.protobuf.StringValue string_value = 2;
  }
}

// Numeric constant value (with units).
message NumberConstantValueDto {
  string amount = 1;
  repeated UnitDto units = 2;
}

// Constant unit.
message UnitDto {
  string name = 1;
  sint32 power = 2;
}

// Representation of a break rate.
message BreakRateDto {
  repeated BreakRateSectionDto break_rate_sections = 1;
}

// Provides a rate if all its break_range conditions are met.
message BreakRateSectionDto {
  repeated BreakRangeDto break_ranges = 1;
  RateDto rate = 2;
}

// Representation of a condition to be met.
message BreakRangeDto {
  string basis = 1;
  google.protobuf.StringValue min = 2;
  google.protobuf.StringValue max = 3;
  string unit = 4;
}
