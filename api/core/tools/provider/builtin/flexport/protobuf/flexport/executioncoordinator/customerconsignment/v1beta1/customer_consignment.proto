// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.customerconsignment.v1beta1;

import "flexport/os/v1/types/cargo/v1/base_cargo.proto";
import "flexport/os/v1/types/dangerousgoodsstate/v1/dangerous_goods_state.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "CustomerConsignmentProto";
option java_package = "com.flexport.executioncoordinator.customerconsignment.v1beta1";
option ruby_package = "Flexport::ExecutionCoordinator::CustomerConsignment::V1Beta1";

message CustomerConsignment {
  int64 id = 1;
  string fid = 8;

  string external_reference_id = 2;
  string external_company_entity_fid = 3;

  string origin_address_fid = 4;
  string destination_address_fid = 5;
  google.protobuf.Int64Value hawb_shipment_flex_id = 6;

  ExecutionCommodity commodity = 7;
  SourceType source_type = 9;
}

message ExecutionCommodity {
  // Mainly using base cargo for:
  //  1. cargo unit and quantity.
  //  2. gross_measurements_per_unit.
  //  3. potentially nested cargo info.
  // e.g, a pallet containing 4 cartons.
  repeated flexport.os.v1.types.cargo.v1.BaseCargo contents = 1;

  // Optional field on the total SLAC count.
  google.protobuf.Int32Value slac = 2;

  // Dangerous good details.
  DangerousGoodDetails dangerous_good_details = 3;
}

message DangerousGoodDetails {
  // Types of DG contained in the commodity.
  flexport.os.v1.types.dangerousgoodsstate.v1.DangerousGoodsState state = 1;

  // UN code needed when DG is included.
  string un_code = 2;

  // Packing Instructions needed when DG is included.
  string packing_instructions = 3;
}

enum SourceType {
  SOURCE_TYPE_INVALID = 0;
  SOURCE_TYPE_BOOKING_INTEGRATION = 1;
  SOURCE_TYPE_ORDER_TAB_UI = 2;
}
