// TEAM: customs_platform

syntax = "proto3";

package flexport.customsintegration.customsbillchargesupdated.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "CustomsBillChargesUpdatedProto";
option java_package = "com.flexport.customsintegration.customsbillchargesupdated.v1beta1";
option ruby_package = "Flexport::CustomsIntegration::CustomsBillChargesUpdated::V1Beta1";

import "flexport/customsintegration/marksandnumbers/v1beta1/marks_and_numbers.proto";
import "google/protobuf/timestamp.proto";

// Customs Bill Charges have been updated.
message CustomsBillChargesUpdated {
  string shipment_fid = 1;
  string external_event_fid = 2;
  string idempotency_id = 3;
  repeated CustomsBillLineItem customs_bill_line_items = 4;
  string duty_bill_filename = 5;
  flexport.customsintegration.marksandnumbers.v1beta1.MarksAndNumbers marks_and_numbers = 6;
  google.protobuf.Timestamp occurred_at_time = 7;
}

// A single entry on the Customs Bill.
message CustomsBillLineItem {
  uint32 line_item_index = 1;
  repeated CustomsBillCharge customs_charges = 2;
}

// A Customs charge.
message CustomsBillCharge {
  string type = 1;
  int64 amount_micros = 2;
  Currency currency = 3;
  ChargeStatus status = 4;
}

// The currency used.
enum Currency {
  CURRENCY_INVALID = 0;
  CURRENCY_USD = 1;
  CURRENCY_EUR = 2;
  CURRENCY_GBP = 3;
}

// The status of the charge: whether or not it can be invoiced,
// or if we don't have enough information to decide.
enum ChargeStatus {
  CHARGE_STATUS_INVALID = 0;
  CHARGE_STATUS_INVOICEABLE = 1;
  CHARGE_STATUS_NOT_INVOICEABLE = 2;
  CHARGE_STATUS_INDETERMINATE = 3;
}
