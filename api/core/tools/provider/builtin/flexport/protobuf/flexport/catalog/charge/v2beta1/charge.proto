// TEAM: commerce_charges

syntax = "proto3";

package flexport.catalog.charge.v2beta1;

import "flexport/catalog/chargesource/v1/charge_source.proto";
import "flexport/catalog/common/v1/warehouse.proto";
import "flexport/catalog/date/v1/date.proto";
import "flexport/catalog/enums/v1/enums.proto";
import "flexport/catalog/rate/v1/rate.proto";
import "flexport/monolith/catalog/v1beta1/core_service.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "ChargeProto";
option java_package = "com.flexport.catalog.charge.v2beta1";
option ruby_package = "Flexport::Catalog::Charge::V2Beta1";

// A charge for a specific client.
message ClientChargeDto {
  // FID of source where the charge comes from.
  // 1) The charge included on the offering in the database.
  //    flx::catalog:charge:<uuid>
  // 2) The charge policy responsible for including this charge.
  //    flx::catalog:charge_policy:<uuid>
  google.protobuf.StringValue source = 1;
  // Slug identifier for this charge type.
  google.protobuf.StringValue slug = 2;
  // The estimated cost rate. The sell rate is often determined by adding a markup to this rate.
  catalog.rate.v1.RateDto cost_rate = 3;
  // FID of source where the cost rate comes from
  google.protobuf.StringValue cost_rate_source = 4;
  // Client-specific sell rate. Takes into consideration things like a negotiated rate, client
  // segment, markups, etc. Client negotiated rates may result in sells lower than the cost if they
  // locked in a price prior to our costs increasing.
  catalog.rate.v1.RateDto sell_rate = 5;
  // Source of the sell rate (e.g. client override, charge management markup, etc)
  google.protobuf.StringValue sell_rate_source = 6;
  SubjectToDto subject_to = 7;
  // Whether the sell rate can be changed. Currently determined by whether or not the sell rate was
  // negotiated by the client. This is part of charge presentation and will eventually be managed
  // outside of the catalog. All rates from the catalog should be locked.
  bool locked_sell_rate = 8;
  EvaluatedRateDto evaluated_cost = 9;
  EvaluatedRateDto evaluated_sell = 10;
  EvaluatedSubjectToDto evaluated_subject_to = 11;
  catalog.date.v1.DateDto activation_date = 12;
  catalog.date.v1.DateDto expiration_date = 13;
  // Additional (debugging) context around the sell rate source (e.g. rule fid).
  map<string, string> sell_rate_source_context = 14;
  // ChargeRuleSourceDetails encapsulates the rule information for determining
  // charge applicability, cost rates, and markup rates.
  // - applicability_rule_info: Specifies the rule used to decide if a charge is applicable.
  //  Example: https://core.flexport.com/marketplace/charge_management/booking_fee
  // - cost_rule_info: Defines the rule for calculating the cost rate of a charge.
  //  Example: https://core.flexport.com/marketplace/charge_management/booking_fee/default_icc
  // - markup_rule_info: Determines the rule for setting the markup rate.
  //  Example: https://core.flexport.com/marketplace/charge_management/booking_fee/default_sell
  ChargeRuleSourceDetails charge_rules_source_details = 15;

  // The original cost source for this line item.
  catalog.chargesource.v1.ChargeSource cost_source = 16;

  // The original markup source for this line item.
  catalog.chargesource.v1.ChargeSource markup_source = 17;
}

// Subject-to.
message SubjectToDto {
  SubjectToPolicyType policy_type = 1;
  google.protobuf.StringValue policy_id = 2;
}

// Subject-to policy type.
enum SubjectToPolicyType {
  SUBJECT_TO_POLICY_TYPE_INVALID = 0;
  // Charge is not subject-to anything.
  SUBJECT_TO_POLICY_TYPE_NONE = 1;
  // There are a lot of legacy subject-to charges which we cannot automate. A user will need to
  // manually activate this charge when they believe the conditions are met.
  SUBJECT_TO_POLICY_TYPE_USER_DECIDES = 2;
  // Charge is subject-to the policy id rule.
  SUBJECT_TO_POLICY_TYPE_RULE = 3;
  // Charge is subject to the 2-dimensional array as json in the policy id. These are old
  // subject-to conditions which can be mapped to a new rule id. This will not work for any random
  // array of conditions. Only the distinct set stored in service_items.subject_to_conditions when
  // charge management went live are mapped to a rule.
  SUBJECT_TO_POLICY_TYPE_LEGACY_CONDITIONS = 4;
}

// Subject-to statuses.
enum SubjectToStatus {
  SUBJECT_TO_STATUS_INVALID = 0;
  // All of the subject-to conditions are met.
  SUBJECT_TO_STATUS_MET = 1;
  // At least one of the subject-to conditions is not met.
  SUBJECT_TO_STATUS_NOT_MET = 2;
  // No subject-to conditions.
  SUBJECT_TO_STATUS_NO_CONDITIONS = 3;
  // Unable to determine subject-to status.
  SUBJECT_TO_STATUS_UNKNOWN = 4;
}

// Shared evaluation variables.
message SharedVariables {
  google.protobuf.BoolValue is_lcl = 1;
  google.protobuf.BoolValue is_air = 2;
  google.protobuf.DoubleValue weight = 3;
  google.protobuf.DoubleValue volume = 4;
  google.protobuf.DoubleValue chargeable_weight = 5;
  google.protobuf.DoubleValue chargeable_volume = 6;
  google.protobuf.DoubleValue cartage_chargeable_weight = 7;
  google.protobuf.DoubleValue origin_distance = 8;
  google.protobuf.DoubleValue destination_distance = 9;
  google.protobuf.FloatValue volumetricity = 10;
  google.protobuf.StringValue tonnes_of_co2 = 11;
  // TODO Do the following amount/total/cost variables depend on previous calls to evaluate charges?
  // If so, see if this can be refactored to make it possible to evaluate all in one call.
  google.protobuf.StringValue insurance_commercial_invoice_amount = 12;
  google.protobuf.StringValue freight_cost = 13;
  google.protobuf.StringValue total_customs_disbursement = 14;
  google.protobuf.StringValue insurance_total_customs_disbursement = 15;
  google.protobuf.StringValue total_amount = 16;
  google.protobuf.Int32Value container_count = 17;
  google.protobuf.Int32Value container_count_twenty_ft = 18;
  google.protobuf.Int32Value container_count_forty_ft = 19;
  google.protobuf.Int32Value container_count_forty_ft_hc = 20;
  google.protobuf.Int32Value container_count_forty_five_ft_hc = 21;
  google.protobuf.DoubleValue gross_weight = 22;
  google.protobuf.Int32Value container_count_twenty_ft_hc = 23;
  google.protobuf.Int32Value container_count_fifty_three_ft = 24;
  google.protobuf.Int32Value container_count_fifty_three_ft_hc = 25;
}

// Specific charge evaluation variables.
message ChargeVariables {
  google.protobuf.Int32Value item_count = 1;
  google.protobuf.Int32Value day_count = 2;
  google.protobuf.Int32Value container_count = 3;
  // TODO can these two fields be related charges (slugs) instead? This is probably making one call
  // to evaluate the related charges and then making a second call to evaluate charges when depend
  // on the related prices. As long as the related charges are included at the same time, we can
  // evaluate all the charges at once.
  google.protobuf.StringValue related_price = 4;
  google.protobuf.StringValue related_item_price = 5;
  google.protobuf.BoolValue is_cartage = 6;
  catalog.enums.v1.ContainerType container_type = 7;
  // where are fields 8-10?
  map<string, catalog.rate.v1.ContainerCountDetails> container_count_details = 11;
  google.protobuf.StringValue item_count_new = 12;
}

// Context needed to evaluate a set of charges.
message EvaluateChargesContext {
  google.protobuf.StringValue client_fid = 1;
  repeated string destination_address_fids = 2;
  google.protobuf.Timestamp shipment_created_at_time = 3;
  google.protobuf.StringValue isf_filing_party_type = 4;
  repeated string included_service_offering_types = 5;
  repeated string included_nac_service_offering_types = 6;
  SharedVariables variables = 7;
  // Currency for the evaluated amounts. Default is USD.
  google.protobuf.StringValue currency_code = 8;
  // CargoReadyDate for charge evaluation.
  catalog.date.v1.DateDto on_date = 9;
  map<string, string> exchange_rates = 10;
  google.protobuf.StringValue current_user_fid = 11;
  flexport.monolith.catalog.v1beta1.Client client = 12;
  google.protobuf.Int32Value pricing_tier = 13;
  google.protobuf.BoolValue want_delivery_service = 14;
  repeated string dangerous_goods_divisions = 15;
  catalog.date.v1.DateDto business_event_date = 16;
  // Placeholder for future use
  reserved 17, 18;
  google.protobuf.StringValue incoterm = 19;
  google.protobuf.BoolValue flexport_import_customs = 20;
  google.protobuf.BoolValue flexport_export_customs = 21;
  google.protobuf.BoolValue in_bond_transit = 22;
  google.protobuf.BoolValue flexport_freight = 23;
  google.protobuf.DoubleValue chargeable_weight_in_kg = 24;
  google.protobuf.BoolValue contains_hazmat = 25;
  repeated string cargo_types = 26;
  // Company FID of the destination agent, e.g. "flx::core:company:dbid/883"
  google.protobuf.StringValue destination_agent = 27;
  //  as designated in design document for flexport plus : https://docs.google.com/document/d/1bOWZOlgRuDUySSFXSVli-61CobNiu75Dnk41WI-Fg7c/edit#heading=h.rvr0j7723fam
  optional google.protobuf.BoolValue should_apply_flat_discount = 28;
  optional google.protobuf.BoolValue should_waive_main_freight = 29;
  // per shipment insurance
  // doc: https://docs.google.com/document/d/1uH7L7rYjPE0iCbgX1_Z4138dV9V3zhpt-yE5_nGQbUs/edit#heading=h.n53saav4q00h
  optional catalog.rate.v1.AmountWithCurrency client_specified_cargo_value = 30;
  // Carbon offset
  google.protobuf.BoolValue want_carbon_offset = 31;
  reserved 32, 33;
  // The warehouses on the shipment's itinerary
  repeated catalog.common.v1.Warehouse warehouses = 34;

// please ensure to add any new attributes to both v2 and v3
}

// Context needed to evaluate markups.
message EvaluateMarkupsContext {
  google.protobuf.StringValue client_fid = 1;
  google.protobuf.StringValue current_user_fid = 2;
  repeated string destination_address_fids = 3;
  repeated string included_nac_service_offering_types = 4;
  repeated string included_service_offering_types = 5;
  google.protobuf.StringValue isf_filing_party_type = 6;
  catalog.date.v1.DateDto on_date = 7;
  google.protobuf.Timestamp shipment_created_at_time = 8;
  flexport.monolith.catalog.v1beta1.Client client = 9;
  google.protobuf.Int32Value pricing_tier = 10;
  google.protobuf.BoolValue want_delivery_service = 11;
  repeated string dangerous_goods_divisions = 12;
  catalog.date.v1.DateDto business_event_date = 13;
  // Placeholder for future use
  reserved 14, 15;
  google.protobuf.StringValue incoterm = 16;
  google.protobuf.BoolValue flexport_import_customs = 17;
  google.protobuf.BoolValue flexport_export_customs = 18;
  optional google.protobuf.BoolValue in_bond_transit = 19;
  google.protobuf.BoolValue flexport_freight = 20;
  google.protobuf.DoubleValue chargeable_weight_in_kg = 21;
  google.protobuf.BoolValue contains_hazmat = 22;
  repeated string cargo_types = 23;
  // Company FID of the destination agent, e.g. "flx::core:company:dbid/883"
  google.protobuf.StringValue destination_agent = 24;
  //  as designated in design document for flexport plus : https://docs.google.com/document/d/1bOWZOlgRuDUySSFXSVli-61CobNiu75Dnk41WI-Fg7c/edit#heading=h.rvr0j7723fam
  optional google.protobuf.BoolValue should_apply_flat_discount = 25;
  optional google.protobuf.BoolValue should_waive_main_freight = 26;
  // per shipment insurance
  // doc: https://docs.google.com/document/d/1uH7L7rYjPE0iCbgX1_Z4138dV9V3zhpt-yE5_nGQbUs/edit#heading=h.n53saav4q00h
  optional catalog.rate.v1.AmountWithCurrency client_specified_cargo_value = 30;
  // Carbon offset
  google.protobuf.BoolValue want_carbon_offset = 31;
  reserved 32, 33;
  // The warehouses on the shipment's itinerary
  repeated catalog.common.v1.Warehouse warehouses = 34;
}

// Charge to be evaluated.
message EvaluableChargeDto {
  google.protobuf.StringValue slug = 1;
  catalog.rate.v1.RateDto cost_rate = 2;
  catalog.rate.v1.RateDto sell_rate = 3;
  // Currency for both the cost and sell evaluated amounts.
  google.protobuf.StringValue currency_code = 4;
  google.protobuf.BoolValue dormant = 5;
  SubjectToDto subject_to = 6;
  // Evaluation variables that only apply for this charge.
  ChargeVariables variables = 7;
}

// Result of evaluating a charge.
message EvaluatedChargeDto {
  google.protobuf.StringValue slug = 1;
  EvaluatedRateDto cost = 2;
  EvaluatedRateDto sell = 3;
  EvaluatedSubjectToDto subject_to = 4;
}

// Evaluated rate.
message EvaluatedRateDto {
  google.protobuf.StringValue amount = 1;
  google.protobuf.StringValue currency = 2;
  google.protobuf.StringValue number_of_units = 3;
  repeated string units_of_measure = 4;
  // The effective rate is the rate from the rate map when only one partition applies.
  catalog.rate.v1.RateDto effective_rate = 5;
  // This map contains the evaluated rate for each individual rate from the rate map using the same keys.
  map<string, EvaluatedRateDto> rate_map = 6;
  // If any of the above fields could not be determined,
  // the reason will be included in these errors.
  repeated string errors = 7;
}

// Evaluated subject-to.
message EvaluatedSubjectToDto {
  SubjectToStatus status = 1;
  // If the status is unknown, these reasons will explain why.
  repeated string reasons = 2;
}

message ChargeRuleSourceDetails {
  RuleInfo applicability_rule_info = 1;
  RuleInfo cost_rule_info = 2;
  RuleInfo markup_rule_info = 3;
}

message RuleInfo {
  google.protobuf.StringValue rule_id = 1;
  google.protobuf.StringValue branch_id = 2;
  google.protobuf.BoolValue is_default_branch = 3;
}
