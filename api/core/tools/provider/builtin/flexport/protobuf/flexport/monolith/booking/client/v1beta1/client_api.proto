// TEAM: bookings

syntax = "proto3";

package flexport.monolith.booking.client.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "ClientApiProto";
option java_package = "com.flexport.monolith.booking.client.v1beta1";
option ruby_package = "Flexport::Monolith::Booking::Client::V1Beta1";

import "flexport/booking/client/v1beta1/client.proto";

// This service is used internally by Booking to
// * look up client fids associated with users and company entities.
// * look up primary company entities fid associated with the clients.
// Production readiness: https://docs.google.com/document/d/1j6cUMtEFXOCX5ZoGFn0YElhfJjq-R5bDA9T_YkheBLw/edit
service ClientAPI {
  // Find the client associated with the given user.
  rpc ClientForUser(ClientForUserRequest) returns (ClientForUserResponse);
  // Find the client associated with the given company entity.
  rpc ClientForCompanyEntity(ClientForCompanyEntityRequest) returns (ClientForCompanyEntityResponse);
  // Find the primary company entity associated with the given client.
  rpc PrimaryCompanyEntityForClient(PrimaryCompanyEntityForClientRequest) returns (PrimaryCompanyEntityForClientResponse);
  // Find the clients associated with the given company entities.
  rpc ClientsForCompanyEntities(ClientsForCompanyEntitiesRequest) returns (ClientsForCompanyEntitiesResponse);
}

message ClientForUserRequest {
  string user_fid = 1;
}

message ClientForCompanyEntityRequest {
  string company_entity_fid = 1;
}

message PrimaryCompanyEntityForClientRequest {
  string client_fid = 1;
}

message ClientsForCompanyEntitiesRequest {
  repeated string company_entity_fids = 1;
}

message ClientForCompanyEntityResponse {
  string client_fid = 1;
}

message ClientForUserResponse {
  string client_fid = 1;
}

message PrimaryCompanyEntityForClientResponse {
  string company_entity_fid = 1;
}

message ClientsForCompanyEntitiesResponse {
  repeated flexport.booking.client.v1beta1.Client clients = 1;
}
