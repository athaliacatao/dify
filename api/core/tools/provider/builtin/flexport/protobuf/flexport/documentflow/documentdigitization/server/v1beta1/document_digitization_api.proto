// TEAM: origin_ops

syntax = "proto3";

package flexport.documentflow.documentdigitization.server.v1beta1;

import "flexport/documentflow/documentdigitization/enums/v1beta1/amendment_type.proto";
import "flexport/documentflow/documentdigitization/enums/v1beta1/audit_results.proto";
import "flexport/documentflow/documentdigitization/enums/v1beta1/audit_source.proto";
import "flexport/documentflow/documentdigitization/enums/v1beta1/update_reason.proto";
import "flexport/documentflow/documentdigitization/v1beta1/document_digitization.proto";
import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_outer_classname = "DocumentDigitizationApiProto";
option java_package = "com.flexport.documentflow.documentdigitization.server.v1beta1";
option ruby_package = "Flexport::DocumentFlow::DocumentDigitization::Server::V1Beta1";

/**
Current supported digitize document types via these apis:
 - CFS SO (CFS Shipping Order)
*/

// API for Document Digitization
service DocumentDigitizationAPI {
  // Async trigger a document digitization with document fid
  rpc AsyncDigitizeDocument(AsyncDigitizeDocumentRequest) returns (AsyncDigitizeDocumentResponse);
  // Sync trigger a document digitization with document fid, TODO: enable this api
  rpc DigitizeDocument(DigitizeDocumentRequest) returns (DigitizeDocumentResponse);
  // Update the digitization record
  rpc UpdateDocumentDigitization(UpdateDocumentDigitizationRequest) returns (UpdateDocumentDigitizationResponse);
  // Create the audit feedback for digitization record
  rpc CreateDigitizationFeedback(CreateDigitizationFeedbackRequest) returns (CreateDigitizationFeedbackResponse);
  // Get the most recent digitization record for the document
  rpc GetDocumentDigitization(GetDocumentDigitizationRequest) returns (GetDocumentDigitizationResponse);
}

message AsyncDigitizeDocumentRequest {
  oneof identifier {
    string document_fid = 1; // fid from document service
  }

  // set user fid if trigger by user
  optional string trigger_by_fid = 11;

  // set is_force = true when need to re-trigger the digitization process
  bool is_force_digitize = 21;
}

message AsyncDigitizeDocumentResponse {
  documentdigitization.v1beta1.DocumentDigitization digitization = 1;
}

message DigitizeDocumentRequest {
  oneof identifier {
    string document_fid = 1; // fid from document service
  }

  // set user fid if trigger by user
  optional string trigger_by_fid = 11;

  // set is_force = true when need to re-trigger the digitization process
  bool is_force_digitize = 21;
}

message DigitizeDocumentResponse {
  documentdigitization.v1beta1.DocumentDigitization digitization = 1;
}

message UpdateDocumentDigitizationRequest {
  oneof identifier {
    string id = 1;
    string document_fid = 2; // carefully use document fid, it will only update the latest digitization record for the document
  }

  enums.v1beta1.AmendmentType amendment_type = 11;
  google.protobuf.Struct amendment = 12;
  repeated string remove_fields = 13; // only valid when use with incremental amendment, json pointer to the field. e.g. /a/1/b

  enums.v1beta1.AuditSource updater_source = 21;
  enums.v1beta1.UpdateReason reason = 22;
  // set user fid if updated by user
  optional string updated_by_fid = 23;
}

message UpdateDocumentDigitizationResponse {
  optional documentflow.documentdigitization.v1beta1.DocumentDigitization digitization = 1;
  repeated documentdigitization.v1beta1.ChangeLog change_logs = 2;
}

message CreateDigitizationFeedbackRequest {
  oneof identifier {
    string id = 1;
    string document_fid = 2; // carefully use document fid, it will only apply on the latest digitization record for the document
  }

  enums.v1beta1.AuditSource audit_source = 11;
  enums.v1beta1.AuditResults audit_results = 12;
  optional string feedback = 13;
  optional string created_by_fid = 14;
}

message CreateDigitizationFeedbackResponse {
  documentdigitization.v1beta1.AuditFeedback feedback = 1;
}

message GetDocumentDigitizationRequest {
  oneof identifier {
    string id = 1;
    string document_fid = 2; // only get the most recent digitization record for the document
  }

  bool with_change_logs = 11;
  bool with_feedbacks = 12;
}

message GetDocumentDigitizationResponse {
  optional documentdigitization.v1beta1.DocumentDigitization digitization = 1;
  repeated documentdigitization.v1beta1.ChangeLog change_logs = 2;
  repeated documentdigitization.v1beta1.AuditFeedback audit_feedbacks = 3;
}
