// TEAM: sutro

syntax = "proto3";

package flexport.executioncoordinator.executioncontainer.v1;

import "flexport/executioncoordinator/executioncontainer/v1/container_activity_post.proto";
import "flexport/executioncoordinator/executioncontainer/v1/execution_container.proto";
import "flexport/executioncoordinator/executioncontainer/v1/execution_container_events.proto";
import "flexport/executioncoordinator/executionorder/v1/execution_order.proto";
import "flexport/executioncoordinator/executionplan/v1/execution_plan.proto";
import "flexport/os/v1/types/cargo/v1/cargo.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutionContainerApiProto";
option java_package = "com.flexport.executioncoordinator.executioncontainer.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionContainer::V1";

// An API for interacting with ExecutionContainer entities.
service ExecutionContainerAPI {
  // READS
  // Gets an execution container.
  rpc GetShipmentContainer(GetShipmentContainerRequest) returns (GetShipmentContainerResponse);
  // Gets all a execution containers for a shipment_fid.
  rpc ListShipmentContainers(ListShipmentContainersRequest) returns (ListShipmentContainersResponse);
  // Gets container events for a shipment_fid, container_number and execution_container_event_type
  rpc GetContainerEvents(GetContainerEventsRequest) returns (GetContainerEventsResponse);

  // WRITES
  // Updates a given order's shipment containers to match those given in the request.
  rpc UpdateShipmentContainers(UpdateShipmentContainersRequest) returns (UpdateShipmentContainersResponse);
  // Batch updates container attributes
  rpc BatchUpdateContainerAttributes(BatchUpdateContainerAttributesRequest) returns (BatchUpdateContainerAttributesResponse);
  // Upsert activity posts for a given container
  rpc UpsertContainerActivityPosts(UpsertContainerActivityPostsRequest) returns (UpsertContainerActivityPostsResponse);
  // Attach a container to a shipment
  rpc AttachContainerToShipment(AttachContainerToShipmentRequest) returns (AttachContainerToShipmentResponse);
}

message UpsertContainerActivityPostsRequest {
  string execution_order_fid = 1;
  oneof identifier {
    string container_number = 2;
    // TODO: ideally we would use containerFid since this is a backend service and containerNumber is more of a
    //  user identifier. ContainerFid is not a column on the container table, so we're using only container number
    //  for now. We should add containerFid as an indexed column and allow to pass it as an identifier here.
    // string containerFid = 3;
  }
  string user_fid = 4;
  repeated ContainerActivityPost container_activity_posts = 5;
}

message UpsertContainerActivityPostsResponse {}

// The request for GetShipmentContainer.
message GetShipmentContainerRequest {
  string container_number = 1;
  string shipment_fid = 2;
}

// The response for GetShipmentContainer.
message GetShipmentContainerResponse {
  ExecutionContainer container = 1;
}

// The request for ListShipmentContainers.
message ListShipmentContainersRequest {
  string shipment_fid = 1;
}

// The response for ListShipmentContainers.
message ListShipmentContainersResponse {
  repeated ExecutionContainer containers = 1;
}

// The request for UpdateShipmentContainers.
message UpdateShipmentContainersRequest {
  string execution_order_fid = 1;
  repeated ExecutionContainer containers = 2;
  bool auto_populate_drayage_legs = 3;
  string user_fid = 4;
  google.protobuf.FieldMask update_mask = 5;
  bool skip_side_effects = 6;
  ContainerRevisionSource container_revision_source = 7;
}

// The request for AttachContainerToShipment.
message AttachContainerToShipmentRequest {
  string container_number = 1;
  string shipment_fid = 2;
  string seal_number = 3;
  string user_fid = 4;
  ContainerRevisionSource container_revision_source = 5;
  flexport.os.v1.types.cargo.v1.Iso6346ContainerSize container_size = 6;
  flexport.os.v1.types.cargo.v1.Iso6346ContainerType container_type = 7;
  string iso_code = 8;
}

// The response for UpdateShipmentContainers.
message UpdateShipmentContainersResponse {
  flexport.executioncoordinator.executionorder.v1.ExecutionOrder execution_order = 1;
  flexport.executioncoordinator.executionplan.v1.ExecutionPlan execution_plan = 2;
  repeated ExecutionContainer containers = 3;
}

// The request for GetContainerEvents
message GetContainerEventsRequest {
  string shipment_fid = 1;
  string container_number = 2;
  repeated ContainerEventActivityType container_event_activity_types = 3;
}

// The response for GetContainerEvents
message GetContainerEventsResponse {
  repeated ContainerEvent container_events = 1;
}

// The response for AttachContainerToShipment.
message AttachContainerToShipmentResponse {
  repeated ExecutionContainer containers = 1;
}

message ContainerEvent {
  ContainerEventActivityType container_event_activity_type = 1;
  string address = 2;
  string created_by = 3;
  string old_value = 4;
  string new_value = 5;
  int64 container_id = 6;
  google.protobuf.Timestamp created_at = 7;
}

message ContainerAttributeUpdate {
  string execution_container_fid = 1;
  string pickup_number = 2;
  string empty_return_location = 3;
  string empty_return_reference = 4;
  string reference_code = 5;
  google.protobuf.Int32Value total_pallet_count = 6;
  google.protobuf.Int32Value total_carton_count = 7;
}

message BatchUpdateContainerAttributesRequest {
  repeated ContainerAttributeUpdate updates = 1;
  string updated_by_fid = 2;
}

message BatchUpdateContainerAttributesResponse {
  repeated ExecutionContainer containers = 1;
}
