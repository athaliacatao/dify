// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.types.routeshape.v1;

import "flexport/executioncoordinator/types/enums/v1/node_tag.proto";
import "flexport/executioncoordinator/types/enums/v1/transport_mode.proto";

option java_multiple_files = true;
option java_outer_classname = "RouteShapeProto";
option java_package = "com.flexport.executioncoordinator.types.routeshape.v1";
option ruby_package = "Flexport::ExecutionCoordinator::Types::RouteShape::V1";

// The shape of a route. No dates.
message RouteShape {
  //
  // Note: treat these arrays as sets. Order does not mean anything!
  // You'll need to topologically sort to find the ordered paths through the route.
  // There may be several. Use the forwarding_util helpers in various languages.
  repeated RouteShapeNode nodes = 1;
  repeated RouteShapeLeg legs = 2;
}

// RouteShapeNode.
message RouteShapeNode {
  // Why both key and fid?
  // Keys are used to link legs and nodes together within a RouteShape without needing
  // persisted fids from the ExecutionCoordinator.
  // During ExecutionPlan upserts, the upserter can populate the keys with arbitrary
  // values so long as the resulting pattern of nodes and legs is valid.
  // The ExecutionCoordinator will create fids as needed when persisting the ExecutionPlan.
  // The ExecutionCoordinator will set the keys to match the fids when persisting.
  // In general, the keys are ephemeral and should not be relied upon as a persisted reference.
  string fid = 1;
  // The key field is REQUIRED.
  // This field is used to validate the route
  // and generate node fids if needed.
  string key = 2;
  // This field is REQUIRED.
  // If the node is a CFS, the place_fid should be the terminal_or_cfs_fid.
  // See https://flexport.atlassian.net/wiki/spaces/EN/pages/955121768/Places+and+Terminals
  string place_fid = 4;
  // This should only be set when the place_fid is a port.
  // See https://flexport.atlassian.net/wiki/spaces/EN/pages/955121768/Places+and+Terminals
  string terminal_or_cfs_fid = 5;
  // Tags on RouteShape should not be used going forward.
  // We do not want them on the ExecutionPlan.
  // See https://flexport.atlassian.net/wiki/spaces/EN/pages/2270593440/EC-NIS+ExecutionPlan+Caveats#No-Tags-on-EP.
  repeated flexport.executioncoordinator.types.enums.v1.NodeTag tags = 6 [deprecated = true];
}

// RouteShapeLeg.
message RouteShapeLeg {
  // Fids are stable identifiers for the leg.
  // They are generated off the leg key.
  // After generation, the key is updated to match the fid.
  string fid = 1;
  // The key field is REQUIRED.
  // This field is used to validate the route
  // and generate leg fids if needed.
  string key = 2;
  string origin_node_key = 10;
  string destination_node_key = 11;
  // The transport mode for the leg (ocean, air, trucking, rail, etc).
  // This field is required.  The route will not pass validation without it.
  flexport.executioncoordinator.types.enums.v1.TransportMode transport_mode = 3;
  // The ISO6346 container fids associated with this leg. These are not generic
  // "containers" or "enclosures" such as ULDs. (Applies to ocean and drayage legs.)
  //  Corresponds to container.rb in the monolith.
  repeated string container_fids = 4;
  // The cargo_fids associated with this leg. See execution_cargo.proto for info.
  repeated string execution_cargo_fids = 5;
  // The vessel associated with this leg. Corresponds to vessel.rb in the monolith.
  string vessel_fid = 6;
  // The voyage tracking_number associated with this leg. (Applies to Ocean/Air/Trucking legs).
  string voyage_number = 7;
  // The carrier associated with this leg. Corresponds to carrier.rb in the monolith.
  string carrier_fid = 8;
  // The freight partner associated with this leg. Corresponds to freight_partner.rb in the monolith.
  string freight_partner_fid = 12;
  // the number of pieces represents how many loose pieces of cargo are moving
  int32 number_of_pieces = 13;
}
