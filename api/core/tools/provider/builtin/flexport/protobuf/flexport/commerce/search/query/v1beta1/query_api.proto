// TEAM: service_catalog

syntax = "proto3";

package flexport.commerce.search.query.v1beta1;

import "flexport/catalog/date/v1/date.proto";
import "flexport/commerce/fpos/v1beta1/currency_code.proto";
import "flexport/commerce/fpos/v1beta1/place.proto";
import "flexport/commerce/search/query/v1beta1/cargo_details.proto";
import "flexport/commerce/search/query/v1beta1/charge_management_context.proto";
import "flexport/commerce/search/query/v1beta1/product.proto";
import "flexport/commerce/search/query/v1beta1/product_add_on.proto";
import "flexport/monolith/catalog/v1beta1/core_service.proto";
import "flexport/os/v1/types/incoterm/v1/incoterm.proto";
import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_outer_classname = "QueryWrapperProto";
option java_package = "com.flexport.commerce.search.query.v1beta1";
option ruby_package = "Flexport::Commerce::Search::Query::V1Beta1";

service QueryAPI {
  rpc Query(QueryRequest) returns (QueryResponse);
  rpc QueryCollection(QueryCollectionRequest) returns (QueryCollectionResponse);
  rpc QueryAddresses(QueryAddressesRequest) returns (QueryAddressesResponse);
}

message QueryRequest {
  repeated flexport.commerce.fpos.v1beta1.Place origins = 1;
  repeated flexport.commerce.fpos.v1beta1.Place destinations = 2;
  CargoDetails cargo_details = 3;
  repeated ProductAddOn product_addons = 4;
  catalog.date.v1.DateDto cargo_ready_date = 5;
  string isf_filing_party_type = 6 [deprecated = true];
  flexport.monolith.catalog.v1beta1.Client client = 7;
  flexport.commerce.fpos.v1beta1.CurrencyCode currency_code = 8;
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 9;
  ChargeManagementContext charge_management_context = 10;
  int32 result_size = 11;
}

message QueryResponse {
  repeated Product products = 1;
}

message QueryCollectionRequest {
  // list of indices to query against
  // collection name can be a wildcard like so `ocean_fcl_offering*`
  repeated string collection = 1;
  // Lucene based query syntax, use term level query for an exact match:
  // "query": {
  //   "term": {
  //     "service_level": {
  //       "value": "premium",
  //     }
  //   }
  // }
  google.protobuf.Struct query = 2;
  // Starting offset.
  // Because of the limitations of the underlying search engine, from + size should be less than or equal to 10,000.
  // If you need to retrieve more, use the scroll API.
  int32 from = 3;
  // Number of hits to return.
  // Because of the limitations of the underlying search engine, from + size should be less than or equal to 10,000.
  // If you need to retrieve more, use the scroll API.
  int32 size = 4;
  // "sort": [
  //   {
  //     "created_at": {
  //       "order": "desc"
  //     }
  //   }
  // ]
  repeated Sort sort = 5;
  // point_in_time with search_after is preferred pagination method
  // if PIT search is enabled, query will be done against a frozen dataset
  // you can specify this id in the next search request along with search_after parameter
  PointInTime point_in_time = 6;
  // search after
  repeated string search_after = 7;
  // slice search results so it can consumed in unordered fashion or in parallel
  Slice slice = 8;

  Source source = 9;

  // scroll context TTL
  // example "1m" ~ 1 minute
  optional string scroll = 10;
  // scroll id for the next batch of results
  // must be used with scroll TTL
  optional string scroll_id = 11;
}

message Source {
  repeated string include = 1;
  repeated string exclude = 2;
}

message Sort {
  string field_name = 1;
  SortDirection direction = 2;
}

enum SortDirection {
  SORT_DIRECTION_INVALID = 0;
  SORT_DIRECTION_ASCENDING = 1;
  SORT_DIRECTION_DESCENDING = 2;
}

message Slice {
  int32 page_number = 1; // Number of a page, every query can only query for one slice
  int32 max_pages = 2; // Total number of slices for search result
}

message PointInTime {
  bool create = 1;
  string pit_id = 2;
}

message QueryCollectionResponse {
  int64 total_results = 1;
  // Result documents
  google.protobuf.Struct hits = 2;
  // Use this in the next query if it was created before
  string point_in_time = 3;
  // Scroll id for the next batch of results
  optional string scroll_id = 4;
}

message QueryAddressesRequest {
  repeated string address_fids = 1;
}

message QueryAddressesResponse {
  repeated flexport.monolith.catalog.v1beta1.Address addresses = 1;
}
