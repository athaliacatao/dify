// TEAM: procurement

syntax = "proto3";

package flexport.procurement.costcalculator.v1;

option java_multiple_files = true;
option java_outer_classname = "CostCalculatorProto";
option java_package = "com.flexport.procurement.costcalculator.v1";
option ruby_package = "Flexport::Procurement::CostCalculator::V1";

// One or more BomItems are applied to the Pricing Structure of a Rate Item
// to produce an amount (cost item).
message BomItem {
  BomItemName name = 1;
  BomItemValue value = 2;
}

// The name of the BomItem. This will be used to determine how the associated
// BomItemValue is applied to the Rate.
enum BomItemName {
  BOM_ITEM_NAME_INVALID = 0;
  BOM_ITEM_NAME_WEIGHT = 1;
  BOM_ITEM_NAME_VOLUME = 2;
  BOM_ITEM_NAME_CONTAINERS = 3;
  BOM_ITEM_NAME_SET_COUNT = 4;
  BOM_ITEM_NAME_PIECE_COUNT = 5;
  BOM_ITEM_NAME_PALLET_COUNT = 6;
  BOM_ITEM_NAME_SKID_COUNT = 7;
  BOM_ITEM_NAME_CHARGEABLE_WEIGHT = 8;
  BOM_ITEM_NAME_UTILIZED_CHARGEABLE_WEIGHT = 9;
  BOM_ITEM_NAME_TOTAL_CHARGEABLE_WEIGHT = 10;
  BOM_ITEM_NAME_UTILIZED_WEIGHT = 11;
  BOM_ITEM_NAME_TOTAL_WEIGHT = 12;
  BOM_ITEM_NAME_DETENTION_DEMURRAGE = 13;
}

// The value of the BomItem. Generally, the value type is expected to be compatible
// with the associated BomItemName (e.g., WeightValue for
// BOM_ITEM_NAME_WEIGHT and int value for BOM_ITEM_NAME_*_COUNT).
message BomItemValue {
  oneof value {
    int32 int_value = 1;
    // This field is a string rather than double to avoid loss of precision.
    // The string is converted using "." as a decimal separator and "," as an
    // optional thousands separator.
    string double_value = 2;
    ContainersValue containers_value = 3;
    WeightValue weight_value = 4;
    VolumeValue volume_value = 5;
    DetentionDemurrageValue detention_demurrage_value = 6;
  }
}

// Deprecated. Use BomItem instead.
// One or more Pricing Variables are applied to the Pricing Structure of a Rate Item
// to produce an amount (cost item).
message PricingVariable {
  option deprecated = true;
  PricingVariableName name = 1;
  PricingVariableValue value = 2;
}

// The name of the PricingVariable. This will be used to determine how the associated
// PricingVariableValue is applied to the Rate.
enum PricingVariableName {
  option deprecated = true;
  PRICING_VARIABLE_NAME_INVALID = 0;
  PRICING_VARIABLE_NAME_WEIGHT = 1;
  PRICING_VARIABLE_NAME_VOLUME = 2;
  PRICING_VARIABLE_NAME_CONTAINERS = 3;
  PRICING_VARIABLE_NAME_SET_COUNT = 4;
  PRICING_VARIABLE_NAME_PIECE_COUNT = 5;
  PRICING_VARIABLE_NAME_PALLET_COUNT = 6;
  PRICING_VARIABLE_NAME_SKID_COUNT = 7;
}

// The value of the PricingVariable. Generally, the value type is expected to be compatible
// with the associated PricingVariableName (e.g., WeightValue for
// PRICING_VARIABLE_NAME_WEIGHT and int value for PRICING_VARIABLE_NAME_*_COUNT).
message PricingVariableValue {
  option deprecated = true;
  oneof value {
    int32 int_value = 1;
    // This field is a string rather than double to avoid loss of precision.
    // The string is converted using "." as a decimal separator and "," as an
    // optional thousands separator.
    string double_value = 2;
    ContainersValue containers_value = 3;
    WeightValue weight_value = 4;
    VolumeValue volume_value = 5;
  }
}

// The BomItem sub-values for a container set.
message ContainersValue {
  repeated Container containers = 1;
}

// The BomItem sub-values for a specific container.
message Container {
  // The four-digit code specifying length, height, and type of container.
  // Reference: https://www.csiu.co/resources-and-links/iso-container-size-and-type-iso-6346
  string iso_6346_code = 1;
  int32 quantity = 2;
  // Optional. Overweight charges may apply at a container level.
  WeightValue weight = 3;
}

// Wrapper type for a weight unit and value.
message WeightValue {
  WeightUnit unit = 1;
  // This field is a string rather than double to avoid loss of precision.
  // The string is converted using "." as a decimal separator and "," as an
  // optional thousands separator.
  string double_value = 2;
}

// Acceptable weight units for costing. Units conversions will be handled in
// the calculator as needed to be compatible with the Rate units.
enum WeightUnit {
  WEIGHT_UNIT_INVALID = 0;
  WEIGHT_UNIT_KILOGRAM = 1;
  WEIGHT_UNIT_POUND = 2;
}

// Wrapper type for a volume unit and value.
message VolumeValue {
  VolumeUnit unit = 1;
  // This field is a string rather than double to avoid loss of precision.
  // The string is converted using "." as a decimal separator and "," as an
  // optional thousands separator.
  string double_value = 2;
}

// Acceptable volume units for costing. Units conversions will be handled in
// the calculator as needed to be compatible with the Rate units.
enum VolumeUnit {
  VOLUME_UNIT_INVALID = 0;
  VOLUME_UNIT_CUBIC_METER = 1;
}

// Wrapper type for a detention demurrage type and value.
message DetentionDemurrageValue {
  message DetentionDemurrageTimeValue {
    DetentionDemurrageType detention_demurrage_type = 1;
    ApplicableType applicable_type = 2;
    TimeValue time_value = 3;
  }
  repeated DetentionDemurrageTimeValue values = 1;
}

message TimeValue {
  TimeUnit unit = 1;
  int32 value = 2;
}

enum TimeUnit {
  TIME_UNIT_INVALID = 0;
  TIME_UNIT_PER_HOUR = 1;
  TIME_UNIT_PER_DAY = 2;
}

enum DetentionDemurrageType {
  DETENTION_DEMURRAGE_TYPE_INVALID = 0;
  DETENTION_DEMURRAGE_TYPE_DETENTION = 1;
  DETENTION_DEMURRAGE_TYPE_DEMURRAGE = 2;
  DETENTION_DEMURRAGE_TYPE_DETENTION_DEMURRAGE = 3;
}

// Applicable charge type of a cost item.
enum ApplicableType {
  APPLICABLE_TYPE_INVALID = 0;
  APPLICABLE_TYPE_UNKNOWN = 1;
  APPLICABLE_TYPE_DESTINATION = 2;
  APPLICABLE_TYPE_FREIGHT = 3;
  APPLICABLE_TYPE_ORIGIN = 4;
}

// Total cost can be itemized into multiple CostItems.
message CostItem {
  int64 amount_micros = 1;
  string currency_code = 2;
  // The Charge Code describes the CostItem using standard Flexport taxonomy.
  string charge_code_fid = 3;
  string charge_code_name = 4;
  // The charge name provided by the rate source/vendor. May be used as a fallback
  // descriptor in cases where the charge code name is unknown/unmapped.
  string source_charge_name = 5;
  ApplicableType applicable_type = 6;
  // A charge group represents a set of charge codes that this CostItem can map to,
  // depending on the blended mode of a shipment. Obtained from the Taxonomy API.
  string charge_group_fid = 7;
}

// A calendar date without a timezone.
message Date {
  // A common era year.
  int32 year = 1;
  // The month number (January = 1, December = 12, and so on).
  int32 month = 2;
  // The day of the month.
  int32 day = 3;
}
