// TEAM: kingsroad

syntax = "proto3";

package flexport.oex.mismatch.v1beta1;

import "flexport/oex/mismatch/v1beta1/carrier_booking_mismatch.proto";

option java_multiple_files = true;
option java_outer_classname = "CarrierBookingMismatchApiProto";
option java_package = "com.flexport.oex.mismatch.v1beta1";
option ruby_package = "Flexport::OceanExecution::Mismatch::V1Beta1";

service CarrierBookingMismatchAPI {
  // returns all valid mismatches under a single shipment
  rpc FetchAllMismatchesByShipmentFid(FetchAllMismatchesByShipmentFidRequest) returns (FetchAllMismatchesByShipmentFidResponse);
}

message FetchAllMismatchesByShipmentFidRequest {
  string shipment_fid = 1;
}

message FetchAllMismatchesByShipmentFidResponse {
  repeated MismatchResult results = 1;
}

message MismatchResult {
  OceanCarrierBookingMismatchType mismatch_type = 1;
  bool has_mismatches = 2;
  // for other mismatch details
}
