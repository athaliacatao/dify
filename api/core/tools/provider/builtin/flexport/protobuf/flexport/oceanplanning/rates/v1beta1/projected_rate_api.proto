// TEAM: ocean_planning

syntax = "proto3";

package flexport.oceanplanning.rates.v1beta1;

import "flexport/os/v1/types/cargo/v1/cargo.proto";
import "flexport/procurement/rates/v2/fcl_rates.proto";
import "google/protobuf/wrappers.proto";
import "google/type/date.proto";

option java_multiple_files = true;
option java_outer_classname = "ProjectedRateApiProto";
option java_package = "com.flexport.oceanplanning.rates.v1beta1";
option ruby_package = "Flexport::OceanPlanning::Rates::V1Beta1";

service ProjectedRateAPI {
  rpc GetProjectedFclOfferingRates(GetProjectedFclOfferingRatesRequest) returns (GetProjectedFclOfferingRatesResponse);
}

// Represents a batch of projected rate requests
message GetProjectedFclOfferingRatesRequest {
  repeated GetProjectedFclOfferingRatesParameters requests = 1; // for batching
}

/**
 Each set of GetProjectedFclOfferingRatesParameters represents a projected rate request for a single offering or quote.
 The product information provided in the inventory_ref string will be used to identify relevant carrier spaces (and in turn rates)
 that could fulfill the offering/quote. Rates will be selected and ranked according to the following:
   1. Past shipments associated with the inventory_ref whose ETDs fall within the candidate_shipment_window will be collected and grouped by contract
   2. Contracts will be ranked based on the number of shipments found for each, with only the top_n taken
   3. For each contract, the first available rate that falls within the rate_priority_window will be selected
     - In the event of ties, the rate associated with the most recently updated carrier space will be chosen
     - If no rates are available within the rate_priority_window, the latest available rate before the rate_priority_window will be used
     - If no rates are available before the rate_priority_window, the earliest available rate after the rate_priority_window will be used
     - If absolutely no rates can be found, the carrier space information of the first carrier space within the rate_priority_window
       will still be returned but with an empty rate object
 */
message GetProjectedFclOfferingRatesParameters {
  string inventory_ref = 1; // required, e.g. product_set=FewbFloatingOpenCarrier,origin=CNSHG,origin_via=,destination_via=,destination=NLRTM,client=Vandelay
  // required, compares with carrier space ETD to prioritize rates within a specific window, e.g. offer validity window, CRD + buffer
  oneof rate_priority_window {
    DateRange range = 2; // inclusive
    // A window of range_around_date+4 days will be constructed around this date to be used as the rate priority window when ranking rates to be returned.
    // This window size should match that of planning systems' mechanisms to creating assignments. The intended use of this field is to allow a more specific
    // date to be specified when available, e.g. CRD from quote events, without requiring the caller to build the window around it
    google.type.Date range_around_date = 3;
  }
  DateRange candidate_shipment_window = 4; // required, inclusive, compares with shipment ETD to filter shipments to be counted when ranking contracts
  int32 top_n = 5; // optional, default 3
}

message DateRange {
  google.type.Date start = 1; // required
  google.type.Date end = 2; // required
}

// Represents a batch of project rate responses
message GetProjectedFclOfferingRatesResponse {
  repeated GetProjectedFclOfferingRatesResult results = 1;
}

message GetProjectedFclOfferingRatesResult {
  GetProjectedFclOfferingRatesParameters request = 1; // for identification in batch
  repeated FclOfferingRate rates = 2; // ordered by "confidence" according to the algorithm described above, empty if no carrier spaces found
}

message FclOfferingRate {
  string group_identifier = 1; // contract FID

  // supply information
  FclSupplyDetails supply = 2;

  // rate
  flexport.procurement.rates.v2.FclRate rate = 3;
}

message FclSupplyDetails {
  // General
  string carrier_space_fid = 1; // for lookup in the future
  bool is_valid_for_planning = 2;
  string carrier_fid = 3;

  // Profile
  string contract_fid = 4;
  // Will not be present if the carrier space is using a 'wildcard' fak profile.
  // If joining to nis_ocean_supply records, need to check both NAC and FAK profile tables. The FAK profiles
  // table include ones that are premium, ie have a premium service present.
  google.protobuf.StringValue carrier_profile_fid = 5; // optional
  // Taken from the profile. Also called rate_group.
  google.protobuf.StringValue booking_reference = 6;
  // Before we had profiles we used an optional field on the inventory_bucket for rate group related things,
  // included here for completeness.
  google.protobuf.StringValue inventory_booking_instructions = 7; // optional
  // If a client fid is present, this profile is only for that client.
  // Corresponds to the "clients" table in the monorail.
  google.protobuf.StringValue client_fid = 8; // optional
  // If a premium service fid is present, this carrier space is for that premium service. If it's missing,
  // it's non-premium space.
  // Corresponds to OceanCarrierBooking::CarrierPremiumService model in the monorail.
  google.protobuf.StringValue premium_service_fid = 9; // optional
  // Some profiles have active/valid dates that are separate from the contract. This field captures
  // if the profile was active at the carrier spaces origin etd.
  // If this is false, is_valid_for_planning should be false.
  bool profile_active_at_origin_etd = 10;

  // Dates
  google.type.Date origin_etd = 11;
  google.type.Date destination_eta = 12;
  // The cost_date is the specific date used when fetching the carrier space's rate
  // See https://github.com/flexport/flexport/blob/326dc992397fb525f7f8ce52a3910131f5315188/common/jvm/src/main/kotlin/com/flexport/ocean/carrierspace/Util.kt#L342-L342
  google.type.Date cost_date = 13;

  // Inventory
  // In some contexts when we don't have a matching valid bucket we will still make the carrier space
  // but is_valid_for_planning will be false.
  google.protobuf.StringValue inventory_bucket_fid = 14; // optional
  // If there's no bucket there won't be an inventory.
  google.protobuf.StringValue inventory_fid = 15; // optional
  // This is the number of teus granted by the carrier at time of api call, which we often expect to change as we get closer to departure
  google.protobuf.Int32Value planning_teus_snapshot = 16;
  // This is the list of allowed equipment sizes from the inventory bucket, which for now is the definitive
  // list of allowed equipment sizes for the carrier space.
  repeated flexport.os.v1.types.cargo.v1.Iso6346ContainerSize inventory_equipment_sizes = 17;

  // Route/Schedule
  string origin_port_fid = 18;
  repeated string via_port_fids = 19;
  string destination_port_fid = 20;
  // This is the middle part of the composite string. We will populate this for both regular strings
  // and extra-loaders. It will be uppercase. Eg. 'PS4'
  string service_string_name = 21;
}
