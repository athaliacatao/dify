// TEAM: customs_platform
syntax = "proto3";

package flexport.customs.declaration.eu.common.v1beta1;

import "flexport/customs/declaration/eu/types/v1beta1/address.proto";
import "flexport/customs/declaration/eu/types/v1beta1/contact_person.proto";

option java_multiple_files = true;
option java_package = "com.flexport.customs.declaration.eu.common.v1beta1";
option ruby_package = "Flexport::Customs::Declaration::EU::Common::V1Beta1";

// [Data Element: 13 01 000 000]
message Exporter {
  // [Data Element: 13 01 016 000]
  string name = 1;
  // EORI number of the party.
  //
  // [Data Element: 13 01 017 000]
  string identification_number = 2;
  // [Data Element: 13 01 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 3;
}

// [Data Element: 13 04 000 000]
message Importer {
  // [Data Element: 13 04 016 000]
  string name = 1;
  // EORI number of the party.
  //
  // [Data Element: 13 04 017 000]
  string identification_number = 2;
  // [Data Element: 13 04 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 3;
}

// [Data Element: 13 05 000 000]
message Declarant {
  // [Data Element: 13 05 016 000]
  string name = 1;
  // [Data Element: 13 05 017 000]
  string identification_number = 2;
  // [Data Element: 13 05 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 3;
  // [Data Element: 13 05 074 000]
  repeated flexport.customs.declaration.eu.types.v1beta1.ContactPerson contact_persons = 4;
}

// [Data Element: 13 06 000 000]
message Representative {
  // The full name and where applicable the legal form of the party.
  // Not required for import and export declarations.
  //
  // [Data Element: 13 06 016 000]
  string name = 1;
  // EORI number of the party.
  //
  // [Data Element: 13 06 017 000]
  string identification_number = 2;
  // The representation status of the party.
  //
  // [Data Element: 13 06 030 000]
  RepresentativeStatus status = 3;
  // The address of the party.
  //
  // [Data Element: 13 06 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 4;
  // The contact persons of the party.
  //
  // [Data Element: 13 06 074 000]
  repeated flexport.customs.declaration.eu.types.v1beta1.ContactPerson contact_persons = 5;
}

// According to Article 18 of the Union Customs Code (UCC),
// the representation of importers and exporters at customs may be direct or indirect.
enum RepresentativeStatus {
  REPRESENTATIVE_STATUS_INVALID = 0;
  // The customs representative acts in the name of and on behalf of another person.
  REPRESENTATIVE_STATUS_DIRECT_REPRESENTATION = 2;
  // The customs representative acts in their own name but on behalf of another person.
  REPRESENTATIVE_STATUS_INDIRECT_REPRESENTATION = 3;
}

// [Data Element: 13 08 000 000]
message Seller {
  // [Data Element: 13 08 016 000]
  string name = 1;
  // [Data Element: 13 08 017 000]
  string identification_number = 2;
  // [Data Element: 13 08 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 3;
}

// [Data Element: 13 09 000 000]
message Buyer {
  // [Data Element: 13 09 016 000]
  string name = 1;
  // EORI number of the party.
  //
  // [Data Element: 13 09 017 000]
  string identification_number = 2;
  // [Data Element: 13 09 018 000]
  flexport.customs.declaration.eu.types.v1beta1.Address address = 3;
}

// Additional supply chain actors can be indicated here in order to demonstrate
// that the entire supply chain was covered by the economic operators holders of the AEO status.
//
// [Data Element: 13 14 000 000]
message AdditionalSupplyChainActor {
  enum Role {
    ROLE_INVALID = 0;
    // Consolidator
    ROLE_CS = 1;
    // Manufacturer.
    ROLE_MF = 2;
    // Freight forwarder.
    ROLE_FW = 3;
    // Warehouse keeper.
    ROLE_WH = 4;
  }
  // [Data Element: 13 14 031 000]
  Role role = 1;

  // EORI number of the party.
  // [Data Element: 13 14 017 000]
  string identification_number = 2;
}
