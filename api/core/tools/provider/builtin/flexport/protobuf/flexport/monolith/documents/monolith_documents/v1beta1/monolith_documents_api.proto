// TEAM: document_intelligence

syntax = "proto3";

package flexport.monolith.documents.monolithdocuments.v1beta1;

import "flexport/monolith/documents/monolith_documents/v1beta1/monolith_documents.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "MonolithDocumentsApiProto";
option java_package = "com.flexport.monolith.documents.monolithdocuments.v1beta1";
option ruby_package = "Flexport::Monolith::Documents::MonolithDocuments::V1Beta1";

// Document API to handle basic CRUD operations.
service MonolithDocumentsAPI {
  // Create a document with an attached file or storage service file_object_fid.
  rpc CreateDocument(CreateDocumentRequest) returns (CreateDocumentResponse);
  // Get a single document by fid.
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
  // Update a single document by fid.
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse);
  // Destroy a single document by fid.
  rpc DestroyDocument(DestroyDocumentRequest) returns (DestroyDocumentResponse);
  // Get documents matching query parameters.
  rpc GetDocuments(GetDocumentsRequest) returns (GetDocumentsResponse);
  // Update documents matching query parameters.
  rpc UpdateDocuments(UpdateDocumentsRequest) returns (UpdateDocumentsResponse);
  // Destroy documents matching query parameters.
  rpc DestroyDocuments(DestroyDocumentsRequest) returns (DestroyDocumentsResponse);
  // Archive a single document by fid.
  rpc ArchiveDocument(ArchiveDocumentRequest) returns (ArchiveDocumentResponse);
  // Get download links for a single document by fid.
  rpc GetDownloadLinks(GetDownloadLinksRequest) returns (GetDownloadLinksResponse);
  // Get download links for email-manager service to retrieve attachments for email sending
  rpc GetDownloadLinksForEmail(GetDownloadLinksForEmailRequest) returns (GetDownloadLinksForEmailResponse);
  // Get legacy viewable parties for migration
  rpc GetLegacyViewablePartiesForMigration(GetLegacyViewablePartiesForMigrationRequest) returns (GetLegacyViewablePartiesForMigrationResponse);
}

// Request object to create a document.
message CreateDocumentRequest {
  FileAttachment attachment = 1;
  uint64 document_type_id = 2;
  optional string documentable_type = 4;
  optional uint64 legacy_documentable_dbid = 5;
  string current_user_fid = 6;
  bool internal = 7;
  string document_type = 8;
  // provide either documentable_fid OR (documentable_type AND legacy_documentable_dbid)
  optional string documentable_fid = 9;
  // Should be true if the document was generated by our system based on our
  // own data. False if the document was uploaded by a user or generated by an
  // external system. This is used primarily for metrics purposes.
  bool generated = 10;
}

// Request object to create a document.
message CreateDocumentInChunksRequest {
  FileAttachment attachment = 1;
  uint64 document_type_id = 2;
  string documentable_type = 4;
  uint64 legacy_documentable_dbid = 5;
  string current_user_fid = 6;
  bool internal = 7;
}

// The created document.
message CreateDocumentResponse {
  DocumentResponse document = 1;
}

// The created document.
message CreateDocumentInChunksResponse {
  DocumentResponse document = 1;
}

// Request object to get a document.
message GetDocumentRequest {
  string fid = 1;
  string current_user_fid = 2;
}

// The found document.
message GetDocumentResponse {
  DocumentResponse document = 1;
}

// Request object to archive a document.
message ArchiveDocumentRequest {
  string fid = 1;
  string current_user_fid = 2;
}

// The archived document.
message ArchiveDocumentResponse {
  DocumentResponse document = 1;
}

// Request object to get download links for a document.
message GetDownloadLinksRequest {
  string fid = 1;
  string current_user_fid = 2;
  // [1, 604800]
  uint64 expired_time_seconds = 3;
}

// The archived document.
message GetDownloadLinksResponse {
  string download_url = 1;
  string download_url_for_asia = 2;
}

// Request object to get multiple documents.
message GetDocumentsRequest {
  optional google.protobuf.StringValue documentable_type = 1;
  optional google.protobuf.UInt64Value legacy_documentable_dbid = 2;
  DocumentQueryProperties additional_query_parameters = 3;
  string current_user_fid = 4;
  // provide either documentable_fid OR (documentable_type AND legacy_documentable_dbid)
  optional google.protobuf.StringValue documentable_fid = 5;
}

// An array of documents satisfying the request.
message GetDocumentsResponse {
  repeated DocumentResponse documents = 1;
}

// Request object to destroy a document.
message DestroyDocumentRequest {
  string fid = 1;
  string current_user_fid = 2;
}

// A response true or false if the document was or wasn't destroyed.
message DestroyDocumentResponse {
  bool destroyed = 1;
}

// Request object to destroy multiple documents.
message DestroyDocumentsRequest {
  optional google.protobuf.StringValue documentable_type = 1;
  optional google.protobuf.UInt64Value legacy_documentable_dbid = 2;
  DocumentQueryProperties additional_query_parameters = 3;
  string current_user_fid = 4;
  // provide either documentable_fid OR (documentable_type AND legacy_documentable_dbid)
  optional google.protobuf.StringValue documentable_fid = 5;
}

// A response true or false if the documents were or weren't destroyed.
message DestroyDocumentsResponse {
  bool destroyed = 1;
}

// Request object to update a document.
message UpdateDocumentRequest {
  string fid = 1;
  string current_user_fid = 2;
  DocumentUpdateProperties update_parameters = 3;
}

// Response returning the updated document.
message UpdateDocumentResponse {
  DocumentResponse document = 1;
}

// Request object to update multiple documents.
message UpdateDocumentsRequest {
  optional google.protobuf.StringValue documentable_type = 1;
  optional google.protobuf.UInt64Value legacy_documentable_dbid = 2;
  DocumentUpdateProperties update_parameters = 3;
  string current_user_fid = 4;
  // provide either documentable_fid OR (documentable_type AND legacy_documentable_dbid)
  optional google.protobuf.StringValue documentable_fid = 5;
}

// Response returning the updated documents.
message UpdateDocumentsResponse {
  repeated DocumentResponse documents = 1;
}

message EmailParticipant {
  string email_address = 1;
  string user_fid = 2;
  Role role = 3;
}

enum Role {
  ROLE_INVALID = 0;
  ROLE_FROM = 1;
  ROLE_TO = 2;
  ROLE_CC = 3;
  ROLE_BCC = 4;
}

message GetDownloadLinksForEmailRequest {
  // Required
  string document_fid = 1;
  // Required
  string email_subject = 2;

  // Required. Some arbitrary string that identifies the caller of this API.
  // Should be relatively easy to grep for (i.e. do not construct this
  // dynamically)
  string caller = 3;

  // Optional. Some identifier to be able to correlate this API call with the
  // actual email that was sent.
  string email_fid = 4;

  // simply pass in and ignore, let document_intelligence team handle it in the future
  repeated EmailParticipant email_participants = 5;
}

message GetDownloadLinksForEmailResponse {
  string download_url = 1;
}

message GetLegacyViewablePartiesForMigrationRequest {
  // Required
  string shipment_fid = 1;
  // Required
  string document_type_slug = 2;
  // Required
  string uploader_fid = 3;
}

message GetLegacyViewablePartiesForMigrationResponse {
  repeated string viewable_parties = 1;
}
