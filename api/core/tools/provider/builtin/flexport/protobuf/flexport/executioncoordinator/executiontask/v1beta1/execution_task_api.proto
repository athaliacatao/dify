// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executiontask.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "ExecutionTaskApiProto";
option java_package = "com.flexport.executioncoordinator.executiontask.v1beta1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionTask::V1Beta1";

import "flexport/executioncoordinator/executiontask/v1/execution_task.proto";
import "flexport/executioncoordinator/executiontask/v1beta1/query_filters.proto";
import "flexport/executioncoordinator/types/query/v1/filters.proto";
import "flexport/executioncoordinator/types/query/v1/order_by.proto";

// This file: http://go/et-api-proto.
//
// An API for reading ExecutionTasks.
// - See execution_task.proto for entity details.
// - To write ExecutionTasks, use execution_plan_api.proto.
//
// This API is in beta. Query expressiveness is limited and performance is not tuned.
// Please ping #forwarding-platform. We can extend it and load test it to support your use case.
service ExecutionTaskAPI {
  // Retrieves ExecutionTasks for a provided query.
  rpc ListExecutionTasks(ListExecutionTasksRequest) returns (ListExecutionTasksResponse);
}

// The request message containing the query to retrieve ExecutionTasks for.
message ListExecutionTasksRequest {
  //
  // The maximum number of entries to return. Defaults to 100, with a maximum limit of 10000.
  // If the value provided exceeds 10000, then 10000 will be used as the limit.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together. All filters default to "null" unless otherwise noted.
  flexport.executioncoordinator.types.query.v1.TimestampFilter created_time = 2;
  flexport.executioncoordinator.types.query.v1.TimestampFilter updated_time = 9;
  flexport.executioncoordinator.types.query.v1.StringFilter execution_order_fid = 4;
  flexport.executioncoordinator.types.query.v1.StringFilter parent_execution_order_fid = 8;
  flexport.executioncoordinator.types.query.v1.StringFilter shipment_fid = 5;
  flexport.executioncoordinator.types.query.v1.StringFilter params_case = 7;
  flexport.executioncoordinator.types.query.v1.IntegerFilter revision_number = 10;
  flexport.executioncoordinator.types.query.v1.StringFilter company_entity_fid = 12;
  ExecutionTaskParamsFilter params = 3;
  //
  // The "planning_status" filter defaults to exclude cancelled tasks, ie:
  // {negated: true, matchesAny: ["cancelled"]}
  flexport.executioncoordinator.types.query.v1.StringFilter planning_status = 6;
  //
  // The order of the results. Default is undefined.
  flexport.executioncoordinator.types.query.v1.OrderBy order_by = 11;
}

// The response message containing the ExecutionTasks for the provided query.
message ListExecutionTasksResponse {
  repeated flexport.executioncoordinator.executiontask.v1.ExecutionTask execution_tasks = 1;
}
