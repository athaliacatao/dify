// TEAM: billing

syntax = "proto3";

package flexport.documentprocessor.document.v1beta1;

import "flexport/document_processor/document/v1beta1/document.proto";
import "flexport/document_processor/document/v1beta1/document_workflow.proto";
import "flexport/document_processor/document/v1beta1/referenced_entity.proto";
import "flexport/document_processor/structured_data/v1beta1/structured_data.proto";
import "flexport/document_processor/util/v1beta1/utils.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "DocumentApiProto";
option java_package = "com.flexport.documentprocessor.document.v1beta1";
option ruby_package = "Flexport::DocumentProcessor::Document::V1Beta1";

// An API for Document Processor.
service DocumentAPI {
  // Create a document.
  rpc CreateDocument(CreateDocumentRequest) returns (CreateDocumentResponse);
  // Update a document.
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse);
  // Retrieves a document by FID.
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
  // Retrieves all documents.
  rpc GetAllDocuments(GetAllDocumentsRequest) returns (GetAllDocumentsResponse);
  // Update status for a document workflow.
  rpc UpdateDocumentStatus(UpdateDocumentStatusRequest) returns (UpdateDocumentStatusResponse);
  // Update status for a document workflow, bypassing status transition validation checks
  rpc UpdateDocumentStatusUnsafe(UpdateDocumentStatusUnsafeRequest) returns (UpdateDocumentStatusUnsafeResponse);
  // Update statuses for multiple document workflows by referenced entity.
  rpc UpdateDocumentStatusesByReferencedEntity(UpdateDocumentStatusesByReferencedEntityRequest) returns (UpdateDocumentStatusesByReferencedEntityResponse);
  // Update all document statuses by data hash. Used in an instance where we cannot create a referenced entity.
  // You are strongly encouraged to use the event model instead to update statuses.
  rpc UpdateDocumentStatusesByDataHash(UpdateDocumentStatusesByDataHashRequest) returns (UpdateDocumentStatusesByDataHashResponse);
  // Retrieve a referenced entity by fid.
  rpc GetReferencedEntity(GetReferencedEntityRequest) returns (GetReferencedEntityResponse);
  // Retrieve all referenced entities with filters.
  rpc GetAllReferencedEntities(GetAllReferencedEntitiesRequest) returns (GetAllReferencedEntitiesResponse);
  // Creates a referenced entity for a given document id.
  rpc CreateReferencedEntity(CreateReferencedEntityRequest) returns (CreateReferencedEntityResponse);
  // Creates a referenced entity for a given attachment fingerprint.
  rpc CreateReferencedEntityByFingerprint(CreateReferencedEntityByFingerprintRequest) returns (CreateReferencedEntityByFingerprintResponse);
  // Creates a referenced entity for an existing referenced entity.
  rpc CreateReferencedEntitiesByReferencedEntity(CreateReferencedEntitiesByReferencedEntityRequest) returns (CreateReferencedEntitiesByReferencedEntityResponse);
  // Deletes a referenced entity by FID.
  rpc DeleteReferencedEntity(DeleteReferencedEntityRequest) returns (DeleteReferencedEntityResponse);
  // Retrieve a document workflow by filters.
  rpc GetDocumentWorkflow(GetDocumentWorkflowRequest) returns (GetDocumentWorkflowResponse);
  // Retrieve all document workflows by filters.
  rpc GetAllDocumentWorkflows(GetAllDocumentWorkflowsRequest) returns (GetAllDocumentWorkflowsResponse);
  // Retrieve current structured data by document FID.
  rpc GetDocumentCurrentStructuredData(GetDocumentCurrentStructuredDataRequest) returns (GetDocumentCurrentStructuredDataResponse);
}

// The request for creating a document.
message CreateDocumentRequest {
  string document_name = 1;
  google.protobuf.StringValue vendor_fid = 2;
  flexport.documentprocessor.document.v1beta1.DocumentType document_type = 3;
  string file_object_fid = 4;
  string data_hash = 5;
  flexport.documentprocessor.document.v1beta1.SourceMeta source_meta = 6;
  google.protobuf.Timestamp received_at_time = 7;
}

// The response for creating a document.
message CreateDocumentResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.Document success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request for updating a document.
message UpdateDocumentRequest {
  flexport.documentprocessor.document.v1beta1.Document document = 1;
  google.protobuf.FieldMask update_mask = 2;
}

// The response for updating a document.
message UpdateDocumentResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.Document success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to get a document by FID.
message GetDocumentRequest {
  string document_fid = 1;
}

// The response for getting a document by FID.
message GetDocumentResponse {
  flexport.documentprocessor.document.v1beta1.Document record = 1;
}

// The request for getting a list of documents.
message GetAllDocumentsRequest {
  flexport.documentprocessor.document.v1beta1.DocumentFilters filters = 1;
  google.protobuf.Struct sort = 2;
  google.protobuf.StringValue cursor_token = 3;
  int32 page_size = 4;
}

// The response for gettting a list of documents.
message GetAllDocumentsResponse {
  flexport.documentprocessor.document.v1beta1.Documents records = 1;
  google.protobuf.StringValue next_cursor_token = 2;
}

// The request for updating a document workflow status.
message UpdateDocumentStatusRequest {
  string document_fid = 1;
  string status = 2;
}

// The response for updating a single document workflow status.
message UpdateDocumentStatusResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.DocumentWorkflow success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

message UpdateDocumentStatusUnsafeRequest {
  string document_fid = 1;
  string status = 2;
}

message UpdateDocumentStatusUnsafeResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.DocumentWorkflow success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request for updating a document status by data hash.
message UpdateDocumentStatusesByDataHashRequest {
  string data_hash = 1;
  string status = 2;
}

// The response for updating a document status by data hash.
message UpdateDocumentStatusesByDataHashResponse {
  flexport.documentprocessor.document.v1beta1.Documents records = 1;
}

// The request for updating document workflow statuses by entity.
message UpdateDocumentStatusesByReferencedEntityRequest {
  string entity_fid = 1;
  string status = 2;
}

message UpdateDocumentStatusesByReferencedEntityResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.DocumentWorkflows success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to create a referenced entity for a specific document fid.
message CreateReferencedEntityRequest {
  string document_fid = 1;
  string entity_fid = 2;
}

// The response for creating a referenced entity for a specific document fid.
message CreateReferencedEntityResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.ReferencedEntity success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to create a referenced entity for an attachment fingerprint.
message CreateReferencedEntityByFingerprintRequest {
  string fingerprint = 1;
  string entity_fid = 2;
}

// The response for creating a referenced entity for an attachment fingerprint.
message CreateReferencedEntityByFingerprintResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.ReferencedEntity success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to create referenced entities by a pre-existing referenced entity.
message CreateReferencedEntitiesByReferencedEntityRequest {
  string existing_entity_fid = 1;
  string entity_fid = 2;
}

// The response for creating referenced entities by a pre-existing referenced entity.
message CreateReferencedEntitiesByReferencedEntityResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.ReferencedEntities success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to get a referenced entity.
message GetReferencedEntityRequest {
  flexport.documentprocessor.document.v1beta1.ReferencedEntityFilters filters = 1;
}

// The response for getting a referenced entity by fid.
message GetReferencedEntityResponse {
  flexport.documentprocessor.document.v1beta1.ReferencedEntity result = 1;
}

// The request for getting a list of referenced entities.
message GetAllReferencedEntitiesRequest {
  flexport.documentprocessor.document.v1beta1.ReferencedEntityFilters filters = 1;
  google.protobuf.Struct sort = 2;
  google.protobuf.StringValue cursor_token = 3;
  int32 page_size = 4;
}

// The response for getting referenced entities by filters
message GetAllReferencedEntitiesResponse {
  flexport.documentprocessor.document.v1beta1.ReferencedEntities records = 1;
  google.protobuf.StringValue next_cursor_token = 2;
}

// The request for deleting a referenced entity.
message DeleteReferencedEntityRequest {
  string referenced_entity_fid = 1;
}

// The response for deleting a referenced entity.
message DeleteReferencedEntityResponse {
  oneof result {
    flexport.documentprocessor.document.v1beta1.ReferencedEntity success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}

// The request to get a document workflow.
message GetDocumentWorkflowRequest {
  flexport.documentprocessor.document.v1beta1.DocumentWorkflowFilters filters = 1;
}

// The response for getting a document workflow by filters.
message GetDocumentWorkflowResponse {
  flexport.documentprocessor.document.v1beta1.DocumentWorkflow result = 1;
}

// The request for getting a list of document workflows.
message GetAllDocumentWorkflowsRequest {
  flexport.documentprocessor.document.v1beta1.DocumentWorkflowFilters filters = 1;
  google.protobuf.Struct sort = 2;
  google.protobuf.StringValue cursor_token = 3;
  int32 page_size = 4;
}

// The response for getting document workflows by filters.
message GetAllDocumentWorkflowsResponse {
  flexport.documentprocessor.document.v1beta1.DocumentWorkflows records = 1;
  google.protobuf.StringValue next_cursor_token = 2;
}

message GetDocumentCurrentStructuredDataRequest {
  string document_fid = 1;
}

message GetDocumentCurrentStructuredDataResponse {
  oneof result {
    flexport.documentprocessor.structureddata.v1beta1.StructuredData success_result = 1;
    flexport.documentprocessor.util.v1beta1.ErrorResult failure_result = 2;
  }
}
