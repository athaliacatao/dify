// TEAM: wingstop

syntax = "proto3";

package flexport.airsupply.allotment.v1beta1;

import "flexport/airsupply/allotmentcontour/v1beta1/allotment_contour.proto";
import "flexport/airsupply/enums/v1beta1/allotment_status.proto";
import "flexport/os/v1/types/walltimedatetime/v1/wall_time_date_time.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "AllotmentProto";
option java_package = "com.flexport.airsupply.allotment.v1beta1";
option ruby_package = "Flexport::AirSupply::Allotment::V1Beta1";

// Description: Allotments represent air inventory at the flight leg level.
//Allotments belong to particular allotment instance.
//The group of allotments under an instance represents all possible flight paths
//with respect to the loadable legs under the instance
//Usage: This proto will be used as the contract to publish and consume allotment events to/from FAE
// This proto maps to the table air_allotments.
message Allotment {
  string allotment_fid = 1;
  // The flight number tied to the flight leg/allotment.
  string flight_number = 2;
  string origin_address_fid = 3;
  string destination_address_fid = 4;
  // The flight leg's airplane type: ["freighter", "passenger_narrow_body", "passenger_wide_body", "airline_truck"].
  string flight_type = 5;
  // The reference to the allotment instance or allotment schedule an allotment belongs to.
  string allotable_fid = 6;
  // The operator/carrier of the flight leg. This is not necessarily the issuer Flexport procured the inventory with.
  string carrier_fid = 9;
  // Signifies if the flight is a main, a feeder, or a defeeder leg.
  // Feeders and defeeders are hard agreements of procured space with a carrier, with non-guaranteed flight numbers
  string capacity_type = 10;
  // Signifies the type of allotment agreement with the carrier: ["not_guaranteed", "specified", "unlimited"]
  string capacity_assurance_type = 11;
  // The user who last updated the the allotment.
  string updated_by_user_fid = 12;
  // Specifies whether the cargo allocated to this allotment can be loaded at origin.
  google.protobuf.BoolValue loadable_leg = 14;
  // Specifies whether the cargo allocated to this allotment can be unloaded at destination.
  google.protobuf.BoolValue unloadable_leg = 15;
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime scheduled_departure_time = 16;
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime scheduled_arrival_time = 17;
  uint32 estimated_departure_offset_from_loading_leg_in_days = 18 [deprecated = true];
  AllotmentUtilization allotment_utilization = 19;
  flexport.airsupply.enums.v1beta1.AllotmentStatus allotment_status = 20;
  // The allotment schedule's contract type: ["charter", "bsa", "partner_fixed_contract", "spot", "nac_procurement"].
  string contract_type = 21;
  repeated flexport.airsupply.allotmentcontour.v1beta1.AllotmentContour allotment_contours = 22;
  // The contract information for the allotment from allotment schedule or allotment schedule instance.
  string contract_identifier = 23;
  string air_tonnage_commitment_term_fid = 24;
  string air_equalization_term_fid = 25;
  string air_equalization_term_period_fid = 26;
}

message AllotmentUtilization {
  // The sum of the MAWB chargeable weights planned on this allotment in kg
  float total_chargeable_planned = 1;
  // The gross weight of cargo planned on this allotment in kg
  float total_gross_planned = 2;
  // The sum of Single BUP weights of the ULDs on this allotment in kg
  float total_pivot_weight = 3;
  // The volume of cargo planned on this allotment in cbm
  float total_planned_volume = 4;
}
