// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executionorderstateevent.v1;

import "flexport/executioncoordinator/executionorderstateevent/v1/execution_order_state_event.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutionOrderStateEventApiProto";
option java_package = "com.flexport.executioncoordinator.executionorderstateevent.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOrderStateEvent::V1";

// An API for reading ExecutionOrderStateEvent.
service ExecutionOrderStateEventAPI {
  // Retrieves an ExecutionOrderStateEvent.
  rpc GetExecutionOrderStateEvent(GetExecutionOrderStateEventRequest) returns (GetExecutionOrderStateEventResponse);
  // Backfills an ExecutionOrderStateEvent.
  rpc BackfillExecutionOrderStateEvent(BackfillExecutionOrderStateEventRequest) returns (BackfillExecutionOrderStateEventResponse);
}

// The request for GetExecutionOrderStateEvent.
message GetExecutionOrderStateEventRequest {
  string fid = 1;
}

// The request for BackfillExecutionOrderStateEventRequest.
message BackfillExecutionOrderStateEventRequest {
  flexport.executioncoordinator.executionorderstateevent.v1.ExecutionOrderStateEvent execution_order_state_event = 1;
}

// The response for GetExecutionOrderStateEvent.
message GetExecutionOrderStateEventResponse {
  flexport.executioncoordinator.executionorderstateevent.v1.ExecutionOrderStateEvent execution_order_state_event = 1;
}

// The response for BackfillExecutionOrderStateEvent.
message BackfillExecutionOrderStateEventResponse {}
