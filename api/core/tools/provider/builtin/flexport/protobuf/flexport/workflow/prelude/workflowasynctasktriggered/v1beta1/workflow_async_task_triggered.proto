// TEAM: starship

syntax = "proto3";

package flexport.workflow.prelude.workflowasynctasktriggered.v1beta1;

import "flexport/shipperexp/sendreminder/v1beta1/send_reminder.proto";
import "flexport/workflow/autoasn/events/queryshipmentrequested/v1beta1/query_shipment_requested.proto";
import "flexport/workflow/autoasn/events/sendasnmilestonearrived/v1beta1/send_asn_milestone_arrived.proto";
import "flexport/workflow/email/models/arrivalnotice/v1beta1/arrival_notice.proto";
import "flexport/workflow/email/models/bookingconfirmation/v1beta1/booking_confirmation.proto";
import "flexport/workflow/email/models/freightrelease/v1beta1/freight_release.proto";
import "flexport/workflow/email/models/lclslaupdate/v1beta1/lcl_sla_update.proto";
import "flexport/workflow/email/models/masterbilloflading/v1beta1/master_bill_of_lading.proto";
import "flexport/workflow/email/models/mblreleasednotice/v1beta1/mbl_released_notice.proto";
import "flexport/workflow/email/models/sample/prreviewrequest/v1beta1/pr_review_request.proto";
import "flexport/workflow/email/models/shipment_email_update/v1beta1/shipment_email_update.proto";
import "flexport/workflow/email/models/shippinginstruction/v1beta1/shipping_instruction.proto";
import "flexport/workflow/messaging/events/sendinternalnote/v1beta1/send_internal_note.proto";
import "flexport/workflow/prelude/options/v1/options.proto";
import "flexport/workflow/test/events/processinstancestarted/v1beta1/process_instance_started.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "WorkflowAsyncTaskTriggeredProto";
option java_package = "com.flexport.workflow.prelude.workflowasynctasktriggered.v1beta1";
option ruby_package = "Flexport::Workflow::Prelude::WorkflowAsyncTaskTriggered::V1Beta1";

// The `WorkflowAsyncTaskTriggered` is an event triggered from a workflow-event,
// and these events may be received and processed by other nis.
message WorkflowAsyncTaskTriggered {
  option (flexport.workflow.prelude.options.v1.event_log).topic = "workflow-async-tasks";
  // option (flexport.workflow.prelude.options.v1.event_log).partition_key = "";
  option (flexport.workflow.prelude.options.v1.event_log).backpack_field = "event_details";
  //
  // The time this event was created.
  google.protobuf.Timestamp created_time = 1;
  //
  // Instructions for adding a new kind of event:
  // (1) Cluster events by subdomain. Add a short comment explaining what the cluster is about.
  //     Events within the same cluster should _tend_ to have the same prefix, but this is not
  //     a strict requirement, as the clusters can/should evolve over time. Try to alphabetize
  //     clusters by their prefixes when possible.
  // (2) Use the first available field number over 101. (Previously we tried to use ranges to
  //     differentiate clusters, but there are too many sparse clusters for that to work.)
  // (3) Run `fx bazel proto-bindings --targets=core` to generate rb/rbi files.
  // We are still figuring out the right idioms here. Ping #starship with questions.
  oneof event_details {
    flexport.workflow.test.events.processinstancestarted.v1beta1.ProcessInstanceStarted process_instance_started = 101;
    flexport.workflow.autoasn.events.queryshipmentrequested.v1beta1.QueryShipmentRequested query_shipment_requested = 103;
    flexport.workflow.autoasn.events.sendasnmilestonearrived.v1beta1.SendAsnMilestoneArrived send_asn_milestone_arrived = 104;
    flexport.workflow.messaging.events.sendinternalnote.v1beta1.SendInternalNote send_internal_note = 105 [
      (flexport.workflow.prelude.options.v1.backpack_wp_action).description = "Send an internal note in core",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).icon = "slack",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).name = "Send an internal note",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).resource_key = "messages:send_internal_note"
    ];
    flexport.shipperexp.sendreminder.v1beta1.SendReminder send_reminder = 109 [
      (flexport.workflow.prelude.options.v1.backpack_wp_action).description = "Send reminder emails for shipper exp",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).icon = "email",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).name = "Send reminder emails (ShipperExp)",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).resource_key = "flx::workflow:wp_action:shipper_exp/send_reminder"
    ];
    flexport.workflow.email.models.mblreleasednotice.v1beta1.MblReleasedNotice mbl_released_notice = 108 [
      (flexport.workflow.prelude.options.v1.backpack_wp_action).description = "Received a MBL released notice email.",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).icon = "email",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).name = "Received a MBL released notice email",
      (flexport.workflow.prelude.options.v1.backpack_wp_action).resource_key = "emails:received_mbl_released_notice_email"
    ];
    flexport.workflow.email.models.bookingconfirmation.v1beta1.BookingConfirmation booking_confirmation = 110;
    flexport.workflow.email.models.sample.prreviewrequest.v1beta1.PrReviewRequest pr_review_request = 111;
    flexport.workflow.email.models.arrivalnotice.v1beta1.ArrivalNotice arrival_notice = 112;
    flexport.workflow.email.models.lclslaupdate.v1beta1.LclSlaUpdate lcl_sla_update = 113;
    flexport.workflow.email.models.shippinginstruction.v1beta1.ShippingInstruction shipping_instruction = 114;
    flexport.workflow.email.models.freightrelease.v1beta1.FreightRelease freight_release = 115;
    flexport.workflow.email.models.shipment_email_update.v1beta1.ShipmentEmailUpdate shipment_email_update = 116;
    flexport.workflow.email.models.masterbilloflading.v1beta1.MasterBillOfLading master_bill_of_lading = 117;
  }
}
