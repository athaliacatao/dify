// TEAM: procurement

syntax = "proto3";

package flexport.procurement.logging.v1;

import "google/protobuf/duration.proto";

option java_multiple_files = true;
option java_outer_classname = "LoggersApiProto";
option java_package = "com.flexport.procurement.logging.v1";
option ruby_package = "Flexport::Procurement::Logging::V1";

// Logging configuration API for NIS Procurement Service.
service LoggersAPI {
  // Find configured logger level for the given search criteria.
  rpc GetLoggerLevels(GetLoggerLevelsRequest) returns (GetLoggerLevelsResponse);
  // Configure configured logger level for the given search criteria.
  rpc ConfigureLoggerLevels(ConfigureLoggerLevelsRequest) returns (ConfigureLoggerLevelsResponse);
}

// Enum representing Log levels - TRACE, DEBUG, INFO, WARN, ERROR, OFF
enum LogLevel {
  LOG_LEVEL_INVALID = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 2;
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_OFF = 6;
}

// Representing a GetLoggerLevelsRequest.
message GetLoggerLevelsRequest {
  repeated string logger_names = 1;
}

// Representing a GetLoggerLevelsResponse.
message GetLoggerLevelsResponse {
  repeated ConfiguredLoggerLevel configured_logger_levels = 1;
}

// Representing a ConfigureLoggerLevelsRequest.
message ConfigureLoggerLevelsRequest {
  repeated ConfigureLoggerLevelRequest configure_requests = 1;
}

// Representing a ConfigureLoggerLevelRequest.
message ConfigureLoggerLevelRequest {
  string logger_name = 1;
  LogLevel level_to_configure = 2;
  google.protobuf.Duration expires_in = 3;
}

// Representing a ConfigureLoggerLevelsResponse.
message ConfigureLoggerLevelsResponse {
  repeated ConfiguredLoggerLevel configured_logger_levels = 1;
}

// Representing a ConfiguredLoggerLevels.
message ConfiguredLoggerLevel {
  oneof logger_level {
    GroupLoggerLevel group_logger_level = 1;
    SingleLoggerLevel single_logger_level = 2;
  }
}

// Representing a GroupLoggerLevels.
message GroupLoggerLevel {
  string logger_name = 1;
  repeated SingleLoggerLevel members = 2;
  string default_level = 3;
  string configured_level = 4;
}

// Representing a SingleLoggerLevels.
message SingleLoggerLevel {
  string logger_name = 1;
  string default_level = 2;
  string configured_level = 3;
  string effective_level = 4;
}
