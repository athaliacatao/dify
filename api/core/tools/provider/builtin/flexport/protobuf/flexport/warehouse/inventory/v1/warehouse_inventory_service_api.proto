// TEAM: warehousing

syntax = "proto3";

package flexport.warehouse.inventory.v1;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "WarehouseInventoryApiProto";
option java_package = "com.flexport.warehouse.inventory.v1";
option ruby_package = "Flexport::Warehouse::Inventory::V1";

service WarehouseInventoryAPI {
  rpc CreateInventoryItems(CreateInventoryItemsRequest) returns (CreateInventoryItemsResponse);
  rpc CheckInInventoryItems(CheckInInventoryItemsRequest) returns (CheckInInventoryItemsResponse);
  rpc CheckOutInventoryItems(CheckOutInventoryItemsRequest) returns (CheckOutInventoryItemsResponse);
  rpc MoveInventoryItem(MoveInventoryItemRequest) returns (MoveInventoryItemResponse);
  rpc ReceiveInventoryItems(ReceiveInventoryItemsRequest) returns (ReceiveInventoryItemsResponse);
  // Inventory records
  rpc ReceiveInventoryRecords(ReceiveInventoryRecordsRequest) returns (ReceiveInventoryRecordsResponse);
  rpc DepartInventoryRecords(DepartInventoryRecordsRequest) returns (DepartInventoryRecordsResponse);
  rpc ReadInventoryRecord(ReadInventoryRecordRequest) returns (ReadInventoryRecordResponse);
  rpc ReadPalletSummariesBulk(ReadPalletSummariesBulkRequest) returns (ReadPalletSummariesBulkResponse);
  // Floor locations
  rpc ReadFloorLocation(ReadFloorLocationRequest) returns (ReadFloorLocationResponse);
}

message InventoryItem {
  oneof item_type {
    Pallet pallet = 1;
  }
}

message Pallet {
  string fid = 1;
}

enum ItemIdentifierType {
  ITEM_IDENTIFIER_TYPE_INVALID = 0;
  ITEM_IDENTIFIER_TYPE_FLEX_ID = 1;
  ITEM_IDENTIFIER_TYPE_MASTER_BILL_NUMBER = 2;
  ITEM_IDENTIFIER_TYPE_HOUSE_BILL_NUMBER = 3;
  ITEM_IDENTIFIER_TYPE_CONTAINER_NUMBER = 4;
  ITEM_IDENTIFIER_TYPE_EXECUTION_TASK_FID = 5;
}

message ItemIdentifier {
  string value = 1;
  ItemIdentifierType type = 2;
}

message BulkPalletCreateRequest {
  uint32 count = 1;
  // Provided identifiers will be attached to every pallet
  // created as a part of this request.
  repeated ItemIdentifier item_identifiers = 2;
}

message CreateInventoryItemsRequest {
  BulkPalletCreateRequest pallets = 1;
  string warehouse_location_fid = 2;
}

message CreateInventoryItemsResponse {
  repeated Pallet created_pallets = 1;
}

message CheckInInventoryItemsRequest {
  repeated InventoryItem items = 1;
  string warehouse_location_fid = 2;
  string warehouse_floor_location_id = 3;
}

message CheckInInventoryItemsResponse {}

message CheckOutInventoryItemsRequest {
  repeated InventoryItem items = 1;
  string warehouse_location_fid = 2;
  string warehouse_floor_location_id = 3;
}

message CheckOutInventoryItemsResponse {}

message MoveInventoryItemRequest {
  InventoryItem item = 1;
  string warehouse_floor_location_name = 2 [deprecated = true];
  string warehouse_floor_location_fid = 3;
}

message MoveInventoryItemResponse {}

message ReceiveInventoryItemsRequest {
  repeated InventoryItem items = 1;
  string warehouse_location_fid = 2;
}

message ReceiveInventoryItemsResponse {}

message ReceiveInventoryRecordsRequest {
  repeated InventoryRecordReceipt receipts = 1;
  string warehouse_location_fid = 2;
}

enum CargoQuantityUnitOfMeasurement {
  CARGO_QUANTITY_UNIT_OF_MEASUREMENT_INVALID = 0;
  CARGO_QUANTITY_UNIT_OF_MEASUREMENT_PALLET = 1;
  CARGO_QUANTITY_UNIT_OF_MEASUREMENT_CARTON = 2;
}

message InventoryRecordReceipt {
  string reference_number = 1;
  string master_bill = 2;
  string house_bill = 3;
  int32 slac = 4;
  int32 pallet_count = 5;
  bool is_damaged = 6;
  bool is_stackable = 7;
  bool is_fully_arrived = 8;
  string floor_location_code = 9;
  repeated InventoryRecordPhoto photos = 10;
  CargoQuantityUnitOfMeasurement slac_unit_of_measurement = 11;
  int32 expected_carton_count = 12;
  int32 expected_pallet_count = 13;
  string cargo_discrepancy_message = 14;
}

message InventoryRecordPhoto {
  // Can be found through MessagingEngine::MessageAttachment model in Core
  string core_message_attachment_uuid = 1;
  string blob_key = 2;
  string description = 3;
}

message ReceiveInventoryRecordsResponse {
  repeated InventoryRecord created_records = 1;
}

message DepartInventoryRecordsRequest {
  repeated InventoryRecordDepartureInfo departed_records = 1;
  string warehouse_location_fid = 2;
}

message InventoryRecordDepartureInfo {
  string reference_number = 1;
  int32 departed_slac = 2;
  int32 departed_pallet_count = 3;
  // Logical location in Flexport network - could be empty
  string destination_location_fid = 4;
  google.protobuf.Timestamp departure_time = 5;
  // Physical location - required
  string destination_address_fid = 6;
}

message DepartInventoryRecordsResponse {
  repeated InventoryRecord departed_records = 1;
}

message ReadInventoryRecordRequest {
  string record_fid = 1;
}

message ReadInventoryRecordResponse {
  InventoryRecord record = 1;
}

message InventoryRecord {
  string fid = 1;
  string reference_number = 2;
  string warehouse_location_fid = 3;
}

message ReadPalletSummariesBulkRequestParams {
  string warehouse_location_fid = 1;
  string shipment_fid = 2;
}

message ReadPalletSummariesBulkRequest {
  repeated ReadPalletSummariesBulkRequestParams params = 1;
}

message ReadPalletSummariesBulkResponse {
  repeated PalletSummary pallet_summaries = 1;
}

message PalletSummary {
  string warehouse_location_fid = 1;
  string shipment_fid = 2;
  int32 pallet_count = 3;
  bool is_all_stackable = 4;
}

message ReadFloorLocationRequest {
  string floor_location_fid = 1;
}

message ReadFloorLocationResponse {
  FloorLocation floor_location = 1;
}

message FloorLocation {
  string fid = 1;
  string code = 2;
}
