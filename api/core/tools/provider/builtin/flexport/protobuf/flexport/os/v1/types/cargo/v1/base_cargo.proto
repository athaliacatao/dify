// TEAM: flexport_os

syntax = "proto3";

package flexport.os.v1.types.cargo.v1;

option java_multiple_files = true;
option java_outer_classname = "BaseCargoProto";
option java_package = "com.flexport.os.v1.types.cargo.v1";
option ruby_package = "Flexport::OS::V1::Types::Cargo::V1";

import "flexport/os/v1/types/cargo/v1/cargo.proto";
import "flexport/os/v1/types/cargo/v1/cargo_measurements.proto";
import "google/protobuf/wrappers.proto";

// A cargo value object, inspired by base_cargo.rb.
message BaseCargo {
  //
  // The type of units described by the cargo message; eg pallet, carton, or ISO6346 container.
  CargoUnit unit = 1;
  //
  // The quantity of units; eg 3 (pallets), 1 (carton), or 6 (containers).
  google.protobuf.Int32Value quantity = 2;
  //
  // The total measurements of *all* units, *including* all enclosures.
  CargoMeasurements total_gross_measurements = 9;
  //
  // A freeform text description of the cargo (applies to all units).
  string description = 3;
  //
  // Identifying symbols and numbers present on the cargo.
  string marks_and_numbers = 7;
  //
  // Metadata about the cargo as stringified JSON (applies to all units).
  string meta = 4;
  //
  // ===============
  // PER-UNIT FIELDS
  // ===============
  //
  // Warning: It's easy to express inconsistent data with these fields. This is intentionally
  // allowed because sometimes we get inconsistent data from real world data sources. Be careful.
  //
  // The measurements of *each* unit of cargo, *including* its enclosure.
  CargoMeasurements gross_measurements_per_unit = 5;
  //
  // The measurements of *each* unit of cargo, *excluding* its enclosure (eg without tare weight).
  CargoMeasurements net_measurements_per_unit = 6;
}
