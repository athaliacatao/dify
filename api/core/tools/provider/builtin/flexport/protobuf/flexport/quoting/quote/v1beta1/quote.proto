// TEAM: quoting

syntax = "proto3";

package flexport.quoting.quote.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "QuoteProto";
option java_package = "com.flexport.quoting.quote.v1beta1";
option ruby_package = "Flexport::Quoting::Quote::V1beta1";

import "flexport/catalog/charge/v2beta1/charge.proto";
import "flexport/executioncoordinator/executionoffering/v1/transit_execution_offering.proto";
import "flexport/executioncoordinator/executionoffering/v1/value_added_execution_offerings.proto";
import "flexport/os/v1/types/cargo/v1/shipment_cargo.proto";
import "flexport/os/v1/types/incoterm/v1/incoterm.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";
import "google/protobuf/timestamp.proto";

// Quote represents our pricing proposal for a set of services to-be-performed.
message Quote {
  //
  // Quote UUID, unique per shared_revision. eg. "flx::quoting:quote:9999-xxxx-123"
  string fid = 1;
  //
  // Quote share revision number. Increments by one each time the quote is shared with the client.
  // For quotes that were never shared, this will be 0.
  uint32 shared_revision = 2;
  //
  // The most recent time this revision was shared with the client. If the quote was never shared,
  // this field will be blank.
  google.protobuf.Timestamp last_shared_time = 3;
  //
  // The time when this quote revision was accepted (either by client or by Flexport).
  // Blank if the quote was voided or was never accepted.
  google.protobuf.Timestamp accepted_time = 18;
  //
  // Time limit on the quoted rates.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate rate_expiration_date = 10;
  //
  // Core shipment DBID, eg. "flx::core:shipment:dbid/777"
  string shipment_fid = 4;
  //
  // Client that will be invoiced for the quoted services.
  string client_fid = 7;
  //
  // Defines contractual obligations of buyer and seller for this shipmentâ€™s transit cost and risk.
  flexport.os.v1.types.incoterm.v1.Incoterm incoterm = 5;
  //
  // Description of what we're proposing to move: weight, volume, container counts.
  flexport.os.v1.types.cargo.v1.ShipmentCargo cargo = 8;
  //
  // The date that cargo will be available for pick up at the origin location; set regardless of
  // whether Flexport is responsible for arranging pickup from origin door.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate cargo_ready_date = 13;
  //
  // Breakdown of the prices & rates proposed for the quoted services.
  repeated LineItem line_items = 14;
  //
  // Prices & rates as they were prior to any user edits.
  repeated LineItem unedited_line_items = 11;
  //
  // Default currency-code used for new line items.
  string default_currency_code = 12;
  //
  // Exchange rates used for this quote.
  // These rates remain frozen from the moment the quote is shared. The ID references a single
  // ExchangeRateDto from the payments service.
  int32 frozen_exchange_rate_id = 16;
  //
  // The transit ExecutionOffering proposed by this quote (eg. Air/Ocean/Trucking)
  flexport.executioncoordinator.executionoffering.v1.TransitExecutionOffering transit_offering = 9;
  //
  // The non-transit ExecutionOfferings proposed by this quote (eg. Customs, Insurance)
  flexport.executioncoordinator.executionoffering.v1.ValueAddedExecutionOfferings value_added_offerings = 20;
  //
  // Free-form text entered in the quote, as additional execution instructions.
  string other_instructions = 15;
}

// LineItem is a single charge on the quote.
// Note that some line items are subject-to certain conditions ("dormant") and do not count
// towards the quoted total amount, but may be activated at invoice time.
message LineItem {
  //
  // Specifies the buy-rate, sell-rate, subject-to/dormant state, and unit counts.
  flexport.catalog.charge.v2beta1.EvaluableChargeDto charge = 1;
  //
  // Enum specifying whether this item is a result of adding an offering to the quote, or a user-
  // entered item.
  ItemSource source = 2;
  //
  // For offerings that come from Catalog, this FID references the source of this charge - a priced
  // offering (ClientOfferingDto) from Catalog.
  string catalog_offering_fid = 3;
  //
  // Human-readable name appearing in the quote, eg. "FCL - 40' Container"
  string name = 4;
  //
  // Identifies the ServiceItemTemplate, for fetching finance properties of this line item.
  // Examples: "ocean_fcl_base", "chassis_split"
  string template_slug = 5;
  //
  // Section of the quote where this item is shown, eg. "freight"
  QuoteCategory category = 6;
  //
  // Vendor company for the item, eg. "flx::core:freightpartner:dbid/555"
  string freight_partner_fid = 7;
}

// ItemSource distinguishes between charges coming from Catalog and user-entered charges or edits.
enum ItemSource {
  ITEM_SOURCE_INVALID = 0;
  // Items from Catalog without user modifications.
  ITEM_SOURCE_CATALOG_UNMODIFIED = 1;
  // Items from Catalog that have been edited in some way (eg. modified price, currency-code)
  ITEM_SOURCE_CATALOG_MODIFIED = 2;
  // Items that are user-created.
  ITEM_SOURCE_USER = 3;
}

// QuoteCategory are the different sections in the quote or invoice.
//
// Categories are currently assigned to an item based on hard-coded rules in `offering_serializer.rb`,
// and beyond being a grouping label within the quote, they also determine which ServiceItemTemplate
// is used for the item, which can affect financial reporting.
//
// See: https://core.flexport.com/service_item_templates
enum QuoteCategory {
  QUOTE_CATEGORY_INVALID = 0;
  QUOTE_CATEGORY_FREIGHT = 1;
  QUOTE_CATEGORY_ORIGIN = 2;
  QUOTE_CATEGORY_DESTINATION = 3;
  QUOTE_CATEGORY_CUSTOMS = 4;
  QUOTE_CATEGORY_CAPITAL = 5;
  QUOTE_CATEGORY_ADDITIONAL = 6;
}
