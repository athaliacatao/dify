// TEAM: quoting

syntax = "proto3";

package flexport.quoting.draftquote.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "DraftQuoteApiProto";
option java_package = "com.flexport.quoting.draftquote.v1beta1";
option ruby_package = "Flexport::Quoting::DraftQuote::V1Beta1";

import "flexport/quoting/core_quote/v1/corequote.proto";
import "flexport/quoting/quoteshare/v1beta1/service_item_template.proto";
import "flexport/quoting/rfq/v2/rfq.proto";

// The draft quote service definition.
service DraftQuoteAPI {
  // Write draft quotes to DB.
  rpc WriteDraftQuote(WriteDraftQuoteRequest) returns (WriteDraftQuoteResponse);
  // Imports multiple quotes from core DB.
  rpc BackfillDraftQuotes(BackfillDraftQuotesRequest) returns (BackfillDraftQuotesResponse);
  // Reads quotes from the service (as core quotes).
  rpc ReadDraftQuotes(ReadDraftQuotesRequest) returns (ReadDraftQuotesResponse);
}

// WriteDraftQuote
message WriteDraftQuoteRequest {
  string fid = 1;
  // uint64 to match bigserial DB data type
  uint64 dbid = 2;
  string name = 3;
}

message WriteDraftQuoteResponse {}

// BackfillDraftQuotes
message BackfillDraftQuotesRequest {
  // The core qoute requests
  repeated flexport.quoting.corequote.v1.CoreQuote quotes = 1;
  // The requests for quotes
  repeated flexport.quoting.rfq.v2.Rfq rfqs = 2;
  // Applicable Service Item Templates
  repeated flexport.quoting.quoteshare.v1beta1.ServiceItemTemplate service_item_templates = 3;
  // User performing the action
  string user_fid = 4;
}

message BackfillDraftQuotesResponse {
  repeated flexport.quoting.corequote.v1.CoreQuote quotes = 1;
}

// ReadDraftQuotes
message ReadDraftQuotesRequest {
  repeated string fid = 1;
}

message ReadDraftQuotesResponse {
  repeated flexport.quoting.corequote.v1.CoreQuote core_quotes = 1;
}
