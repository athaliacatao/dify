// TEAM: client_app

syntax = "proto3";

package flexport.dumboindexing.filtergroups.v2beta1;

import "flexport/dumboindexing/derivedshipment/v1beta1/derived_shipment.proto";
import "flexport/executioncoordinator/derivedshipment/v1/derived_shipment.proto";
import "flexport/executioncoordinator/types/enums/v1/shipment_priority.proto";
import "flexport/executioncoordinator/types/enums/v1/transportation_status.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "ShipmentFilterGroupProto";
option java_package = "com.flexport.dumboindexing.filtergroups.v2beta1";
option ruby_package = "Flexport::DumboIndexing::FilterGroups::V2Beta1";

// ShipmentFilterGroup has similar type with ShipmentFilterInput. ShipmentFilterGroup allow
// the users to save the filter combinations that are frequently used.
// TODO: Change the file name to singular shipment_filter_group
message ShipmentFilterGroup {
  // isSharingWithCompany is used to determine whether the current filter can be duplicate from other company users.
  bool is_sharing_with_company = 24;
  // UrlId is used to identify and display in the page url.
  string url_id = 25;
  // Shipment Index Service Filter Group Fid.
  string sis_filter_group_fid = 28;
  // Database Id of the monolith shipment filter group dbid.
  int32 monolith_shipment_filter_group_dbid = 29;
  // Name of the filter group.
  string filter_group_name = 26;
  // Whether a shipment is a 4pl shipment or not.
  // Use shipment_sources instead.
  BooleanFilterInput visibility_only = 1 [deprecated = true];
  // Whether a shipment has child or parent shipments.
  BooleanFilterInput is_buyers_consolidation = 2;
  // Whether a shipment is bookmarked.
  BooleanFilterInput bookmarked = 3;
  // Need to clarify.
  // Filter by the shipment cargoReady Date.
  DateFilterInput cargo_ready_date = 4;
  // Filter by the shipment originPickup Date.
  DateFilterInput origin_pickup_date = 5;
  // Filter by the shipment departure Date.
  DateFilterInput departure_date = 6;
  // Filter by the arrivalPortArrival Date.
  DateFilterInput arrival_port_arrival_date = 7;
  // Filter by the arrivalPortDeparture Date.
  DateFilterInput arrival_port_departure_date = 8;
  // Filter by the last leg deliveredInFull date.
  DateFilterInput delivered_in_full_date = 9;
  // Whether any of the lastFreeDay date matches.
  DateFilterInput last_free_day_date = 10;
  // Whether a shipment's related location are match.
  repeated LocationFilterInput locations = 11;
  // Whether a shipment's related country codes are match.
  repeated LocationFilterInput country_codes = 12;
  // Whether a shipment includes or excludes a company entity.
  repeated SelectFilterInput companies = 13;
  // Whether a shipment includes specific product skus.
  repeated SimpleFilterInput products_skus = 14;
  // Whether a shipment includes specific purchase orders.
  repeated SimpleFilterInput purchase_orders = 15;
  // Whether a shipment includes specific product fids.
  repeated SimpleFilterInput products = 19;
  // Whether a shipment has assign to the users.
  repeated SimpleFilterInput assignees = 16;
  // Filter by a list of4PL Freight Forwarder.
  repeated SimpleFilterInput forwarder_names = 17;
  // Filter by a list of shipment exception.
  repeated SimpleFilterInput exceptions = 18;
  // Filter by a list of shipment tags.
  repeated KeyFilterInput metadata = 20;
  // Filter by a list of shipment priority value.
  repeated flexport.executioncoordinator.types.enums.v1.ShipmentPriority priorities = 27;

  // Whether a shipment includes any of the filtering tracking status.
  repeated flexport.executioncoordinator.derivedshipment.v1.DerivedShipmentTrackingStatus verification_statuses = 21;
  // Whether a shipment includes any of the filtering transportation mode.
  repeated flexport.dumboindexing.derivedshipment.v1beta1.ClientFacingTransportationMode client_facing_transportation_modes = 22;
  // Whether a shipment includes any of the filtering transportation status.
  repeated flexport.executioncoordinator.types.enums.v1.TransportationStatus transportation_statuses = 23;
  // Whether a shipment is from any of the shipment sources.
  repeated ShipmentSourceEnum shipment_sources = 30;
  DateFilterValueInput change_occurrence = 31;
  ConditionalFilterInput schedule_changes = 32;
}

// Boolean filters type
message BooleanFilterInput {
  google.protobuf.BoolValue value = 1;
}

message ConditionalFilterInput {
  string operator = 1;
  string type = 2;
  SelectFilterValueInput values = 3;
}

// Date filters type
message DateFilterInput {
  AfterDateFilterInput after_date_filter = 1;
  BeforeDateFilterInput before_date_filter = 2;
  RangeDateFilterInput range_date_filter = 3;
}

message DateFilterValueInput {
  string label = 1;
  string type = 2;
  string start_date = 3;
  string end_date = 4;
}

// Location filters type
message LocationFilterInput {
  string value = 1;
  LocationFilterTypeEnum type = 2;
  SelectFilterOptionEnum option = 3;
}

// Select filter handles include and exclude filters
message SelectFilterInput {
  SelectFilterOptionEnum option = 1;
  string value = 2;
}

message SelectFilterValueInput {
  string label = 1;
  string value = 2;
}

// Simple value selection type
message SimpleFilterInput {
  string value = 1;
}

// Key value pair filters type
message KeyFilterInput {
  string key = 1;
  repeated string values = 2;
  string additional_value_1 = 3;
}

// After Date filter type
message AfterDateFilterInput {
  // Date formate YYYY-MM-DD in UTC
  string after_date = 1;
}

// Before Date filter type
message BeforeDateFilterInput {
  // Date formate YYYY-MM-DD in UTC
  string before_date = 1;
}

// Range Date filter type
message RangeDateFilterInput {
  // Date formate YYYY-MM-DD in UTC
  string range_to = 1;
  // Date formate YYYY-MM-DD in UTC
  string range_from = 2;
  // Date range value
  PresetDateRangeEnum preset_value = 3;
}

enum SelectFilterOptionEnum {
  SELECT_FILTER_OPTION_ENUM_INVALID = 0;
  SELECT_FILTER_OPTION_ENUM_INCLUDE = 1;
  SELECT_FILTER_OPTION_ENUM_EXCLUDE = 2;
}

enum LocationFilterTypeEnum {
  LOCATION_FILTER_TYPE_ENUM_INVALID = 0;
  LOCATION_FILTER_TYPE_ENUM_ORIGIN = 1;
  LOCATION_FILTER_TYPE_ENUM_DEPARTURE = 2;
  LOCATION_FILTER_TYPE_ENUM_ARRIVAL = 3;
  LOCATION_FILTER_TYPE_ENUM_DESTINATION = 4;
  LOCATION_FILTER_TYPE_ENUM_ANY = 5;
}

enum PresetDateRangeEnum {
  PRESET_DATE_RANGE_ENUM_INVALID = 0;
  PRESET_DATE_RANGE_ENUM_TWENTY_FOUR_HOURS = 1;
  PRESET_DATE_RANGE_ENUM_TWO_DAYS = 2;
  PRESET_DATE_RANGE_ENUM_THREE_DAYS = 3;
  PRESET_DATE_RANGE_ENUM_THIS_WEEK = 4;
  PRESET_DATE_RANGE_ENUM_TWO_WEEKS = 5;
  PRESET_DATE_RANGE_ENUM_THIS_MONTH = 6;
  PRESET_DATE_RANGE_ENUM_CUSTOM_RANGE = 7;
}

enum ShipmentSourceEnum {
  SHIPMENT_SOURCE_ENUM_INVALID = 0;
  SHIPMENT_SOURCE_ENUM_CLIENT_SHIPMENT = 1;
  SHIPMENT_SOURCE_ENUM_FLEXPORT_SHIPMENT = 2;
  SHIPMENT_SOURCE_ENUM_CUSTOMS_SHIPMENT = 3;
}
