// TEAM: flexport_os

syntax = "proto3";

package flexport.os.v1.types.cargo.v1;

import "flexport/os/v1/types/cargo/v1/cargo.proto";
import "flexport/os/v1/types/cargo/v1/cargo_measurements.proto";
import "flexport/os/v1/types/dangerousgoodsstate/v1/dangerous_goods_state.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "ShipmentCargoProto";
option java_package = "com.flexport.os.v1.types.cargo.v1";
option ruby_package = "Flexport::OS::V1::Types::Cargo::V1";

// A value object for representing shipment-level cargo, analogous to cargo.rb.
message ShipmentCargo {
  //
  // A freeform text description of the cargo.
  string description = 1;
  //
  // The total gross measurements of all the cargo in the shipment.
  CargoMeasurements gross_measurements = 2;
  //
  // The dangerous goods information provided by our client about the cargo on a shipment.
  flexport.os.v1.types.dangerousgoodsstate.v1.DangerousGoodsState dangerous_goods_state = 3;
  //
  // Identifying symbols and numbers placed by the shipper on each piece of cargo in a shipment.
  string marks_and_numbers = 4;
  //
  // The term shipper's load and count (SLAC) is the notation on the bill of lading or the air
  // waybill with the number of units shipped as declared by the shipper. This covers situations
  // like when a container has been loaded and sealed by the shipper, and the freight forwarder
  // has no way of verifying the count. At booking time, we ask the shipper to provide a SLAC.
  //
  // The precise definition of SLAC is subject to regulatory differences in different regions,
  // with the interpretation potentially incorporating the unit type and notes declared on the
  // bill of lading. In some cases, a SLAC declared as "15", with a unit type of "carton"
  // and a SLAC of "3" with a unit type of "pallet" may both be valid for the same cargo on
  // a bill of lading.
  //
  // For example, in US imports, the SLAC must always refer to the number of master cartons
  // even if the cargo is palletized (e.g. 3 pallets of 2 cartons would be declared as SLAC = 6).
  // In the EU, however, it is permitted to declare the SLAC as the number of pallets
  // (with the appropriate unit type or note), generally.
  //
  // As of February 2021 it is computed as follows when not provided:
  //
  // def shippers_load_and_count(package_sets)
  //   cartons_on_pallets_count = package_sets
  //     .select { |u| u.unit_type == "pallet" }
  //     .map(&:total_carton_count_across_all_units)
  //     .inject(0, :+)
  //   total_other_units = package_sets
  //     .reject { |u| u.unit_type == "pallet" }
  //     .map(&:unit_quantity)
  //     .inject(0, :+)
  //  cartons_on_pallets_count + total_other_units
  // end
  //
  google.protobuf.Int32Value shippers_load_and_count = 8;
  //
  // Details about subunits of cargo, called "package details" in the UI.
  repeated PackageSet package_sets = 7;

  // The commodity type of the shipment cargo.
  repeated CargoCommodityType commodity_type = 9;
}

// A group of packages with the same packing type and measurements.
message PackageSet {
  string name = 1;
  flexport.os.v1.types.cargo.v1.CargoUnit unit_type = 2;
  google.protobuf.Int32Value unit_quantity = 3;
  CargoMeasurements gross_measurements_per_unit = 4;
  //
  // This field is currently only editable in the UI if the unit_type = "pallet".
  google.protobuf.Int32Value total_carton_count_across_all_units = 5;
}

// A list of enums for the commodity type of the shipment cargo.
enum CargoCommodityType {
  CARGO_COMMODITY_TYPE_INVALID = 0;
  CARGO_COMMODITY_TYPE_OTHER = 1;
  CARGO_COMMODITY_TYPE_GENERAL = 2;
  CARGO_COMMODITY_TYPE_NON_DG_MAGNETIC = 3;
  CARGO_COMMODITY_TYPE_NON_DG_CHEMICAL = 4;
  CARGO_COMMODITY_TYPE_NON_DG_LITHIUM = 5;
  CARGO_COMMODITY_TYPE_NON_DG_WOOD = 6;
}
