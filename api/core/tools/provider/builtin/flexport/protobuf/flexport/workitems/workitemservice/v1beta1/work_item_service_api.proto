// TEAM: work_management

syntax = "proto3";

package flexport.workitems.workitemservice.v1beta1;

import "flexport/workitems/workitemservice/v1beta1/work_item.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "WorkItemServiceApiProto";
option java_package = "com.flexport.workitems.workitemservice.v1beta1";
option ruby_package = "Flexport::WorkItems::WorkItemService::V1Beta1";

// This is the API for managing Work Items.
service WorkItemServiceAPI {
  // Batch upserts a list of work items (Update work items, create if the work item
  // doesn't exist).
  rpc BatchSaveWorkItems(BatchSaveWorkItemsRequest) returns (BatchSaveWorkItemsResponse);
  // Upserts the specified work item (Update work item, create if work item
  // doesn't exist).
  rpc SaveWorkItem(SaveWorkItemRequest) returns (SaveWorkItemResponse);
  // Gets the work item by its fid.
  rpc GetWorkItemByFid(GetWorkItemByFidRequest) returns (GetWorkItemByFidResponse);
  // Batch Version of GetWorkItemByFid
  rpc GetWorkItemsByFids(GetWorkItemsByFidsRequest) returns (GetWorkItemsByFidsResponse);
  // Gets the work items by a list of work item types and fids.
  rpc GetWorkItemsByTypesAndFids(GetWorkItemsByTypesAndFidsRequest) returns (GetWorkItemsByTypesAndFidsResponse);
  // Gets the work item by its type and upsert key.
  rpc GetWorkItemByTypeAndUpsertKey(GetWorkItemByTypeAndUpsertKeyRequest) returns (GetWorkItemByTypeAndUpsertKeyResponse);
  // Gets recently updated work items by types, automation types and states
  rpc GetRecentlyUpdatedWorkItems(GetRecentlyUpdatedWorkItemsRequest) returns (GetRecentlyUpdatedWorkItemsResponse);
  // Saves the Queue Entry Context data.
  rpc SaveQueueEntryContext(SaveQueueEntryContextRequest) returns (SaveQueueEntryContextResponse);
  // Saves the Topic Data regarding a queue entry topic fid
  rpc SaveTopicData(SaveTopicDataRequest) returns (SaveTopicDataResponse);
  // Adds to Work Item Activity Log
  rpc AddToWorkItemsActivityLog(AddToWorkItemsActivityLogRequest) returns (AddToWorkItemsActivityLogResponse);
  // Reopen work items by an exception
  rpc ForceReopenByException(ForceReopenByExceptionRequest) returns (ForceReopenByExceptionResponse);
  // Cancel reopen work items by an exception
  rpc CancelForceReopenByException(CancelForceReopenByExceptionRequest) returns (CancelForceReopenByExceptionResponse);
  // Get Work Item identifiers by one topic fid
  rpc GetWorkItemIdentifiersByTopicFid(GetWorkItemIdentifiersByTopicFidRequest) returns (GetWorkItemIdentifiersByTopicFidResponse);
  // Sets work items to the in-progress state. We enforce validations to deny invalid state transitions.
  // We return both the successes and the failures.
  rpc SetWorkItemsToInProgress(SetWorkItemsToInProgressRequest) returns (SetWorkItemsToInProgressResponse);
}

message BatchSaveWorkItemsRequest {
  //
  // The list of save work item requests the client would like to batch update.
  repeated SaveWorkItemRequest save_work_item_requests = 1;
  //
  // The name of the service invoking BatchSaveWorkItems API
  UpstreamService upstream_service_name = 2;
}

message BatchSaveWorkItemsResponse {
  //
  // The list of work items upserted.
  repeated WorkItem work_items = 1;
}

message SaveWorkItemRequest {
  //
  // Reserving field numbers of deprecated fields (i.e. topic_fids, warnings,
  // block_reasons, and assignee_fids) so they can't be reused in the future.
  reserved 5, 8, 9, 12;
  //
  // Work Item FID.
  string fid = 1;
  //
  // An external ID used to support upsert semantics and idempotent APIs,
  // similar to 'source_resource_id' in Jetski. (defaults to WorkItem id)
  string upsert_key = 2;
  //
  // The Work Item type, similar to 'source_resource_type' in Jetski.
  string work_item_type = 3;
  //
  // The Work Item context, similar to vector data in Jetski (stored as jsonb).
  google.protobuf.Struct work_context = 4;
  //
  // The Metadata (stored as jsonb).
  google.protobuf.Struct metadata = 24;
  //
  // The Work Item's due date.
  google.protobuf.Timestamp due_at_time = 6;
  //
  // Additional Work Item details to be rendered.
  WorkItemDetails details = 7;
  //
  // Do not use, for backward compat only
  bool deprecated_completed = 10;
  //
  // The Work Item's completion status.
  google.protobuf.BoolValue completed = 16;
  //
  // Inapplicable Work Item will disappear from a work list.
  google.protobuf.BoolValue applicable = 11;
  //
  // The time at which the Work Item is inapplicable until. If this is
  // specified, then applicable will be ignored regardless of whether it is set
  // or not. Instead, an appropriate value for applicable will be derived from
  // applicable_at_time + the observed current timestamp when the
  // SaveWorkItemRequest is received.
  google.protobuf.Timestamp applicable_at_time = 13;
  //
  // The user completed the work item
  google.protobuf.StringValue completed_by_fid = 14;
  //
  // The user updated the work item
  google.protobuf.StringValue updated_by_fid = 15;
  //
  // The name of the service invoking SaveWorkItem
  UpstreamService upstream_service_name = 17;
  //
  // Is the work item for automation purpose
  google.protobuf.BoolValue is_for_automation = 18;
  //
  // The automation type of the work item
  AutomationType automation_type = 25;

  // Work Item warnings to be rendered.
  // Note: This field is optional.
  //   If non-empty list passed in, sets `WorkItem.warnings` to the non-empty list.
  //   If empty list passed in, sets `WorkItem.warnings` to empty list.
  //   If not specified, maintains previously stored `WorkItem.warnings` database value.
  message Warnings {
    repeated string warnings = 1;
  }
  Warnings work_item_warnings = 20;

  // Work Item block reasons to be rendered.
  // Note: This field is optional.
  //   If non-empty list passed in, sets `WorkItem.block_reasons` to the non-empty list.
  //   If empty list passed in, sets `WorkItem.block_reasons` to empty list.
  //   If not specified, maintains previously stored `WorkItem.block_reasons` database value.
  message BlockReasons {
    repeated string block_reasons = 2;
  }
  BlockReasons work_item_block_reasons = 21;

  // The list of assignees that the Work Item is assigned to.
  // Note: This field is optional and _a little bit special_.
  //  If non-empty list passed in, sets `WorkItem.assignee_fids` to the non-empty list.
  //  If empty list passed in, _maintains previously stored `WorkItem.assignee_fids` database value_.
  //  If not specified, maintains previously stored `WorkItem.assignee_fids` database value.
  message AssigneeFids {
    repeated string assignee_fids = 3;
  }
  AssigneeFids all_assignee_fids = 22;

  // The list of business objects that the Work Item relates to.
  // Note: This field is optional.
  //   If non-empty list passed in, sets `WorkItem.topic_fids` to the non-empty list.
  //   If empty list passed in, sets `WorkItem.topic_fids` to empty list.
  //   If not specified, maintains previously stored `WorkItem.topic_fids` database value.
  message TopicFids {
    repeated string topic_fids = 4;
  }
  TopicFids all_topic_fids = 23;

  // The list of reasons for the applicable_at_time.
  // Note: This field is optional.
  //   If non-empty list passed in, sets `WorkItem.applicable_at_reasons` to the non-empty list.
  //   If empty list passed in, sets `WorkItem.applicable_at_reasons` to empty list.
  //   If not specified, maintains previously stored `WorkItem.applicable_at_reasons` database value.
  message ApplicableAtReasons {
    repeated string applicable_at_reasons = 1;
  }
  ApplicableAtReasons all_applicable_at_reasons = 26;

  // human readable description of the applicable_at_time
  google.protobuf.StringValue applicable_at_description = 27;

  // Wrapper message for Work Item automation availability.
  message AutomationAvailability {
    google.protobuf.BoolValue available = 1;
  }
  AutomationAvailability automation_availability = 28;

  // Wrapper message for Work Item results.
  message AutomationResult {
    google.protobuf.BoolValue result = 1;
    google.protobuf.StringValue failed_reason = 2;
    google.protobuf.Timestamp updated_at = 3;
  }
  AutomationResult automation_result = 29;
  // automation due at
  google.protobuf.Timestamp automation_due_at_time = 30;
}

message SaveWorkItemResponse {
  WorkItem work_item = 1;
}

message GetWorkItemByFidRequest {
  string fid = 1;
}

message GetWorkItemByFidResponse {
  WorkItem work_item = 1;
}

message GetWorkItemsByFidsRequest {
  // The list of work item fids. Max 1000 fids allowed.
  repeated string fids = 1;
}

message GetWorkItemsByFidsResponse {
  // The list of work item fids. Max 100 fids allowed.
  repeated WorkItem work_item = 1;
}

message GetWorkItemsByTypesAndFidsRequest {
  // The list of work item type. Max 10 types allowed.
  repeated string work_item_type = 1;
  // The list of topic fid. Max 100 topic fids allowed.
  repeated string topic_fid = 2;
  // Whether we should include all work items including inapplicable ones, default to false.
  google.protobuf.BoolValue include_inapplicable = 3;
}

message GetWorkItemsByTypesAndFidsResponse {
  // The list of work item.
  repeated WorkItem work_item = 1;
}

message GetWorkItemByTypeAndUpsertKeyRequest {
  string work_item_type = 1;
  string upsert_key = 2;
}

message GetWorkItemByTypeAndUpsertKeyResponse {
  WorkItem work_item = 1;
}

message GetRecentlyUpdatedWorkItemsRequest {
  // The maximum work items returned, default to 100, with maximum limit 10000
  google.protobuf.Int32Value limit = 1;
  // The cut off updated time for the work item request
  google.protobuf.Timestamp updated_after = 2;
  // The list of work item types to query
  repeated string work_item_types = 3;
  // The list of automation types to query
  repeated AutomationType work_item_automation_types = 4;
  // The list of states to query
  repeated string work_item_states = 5;
}

message GetRecentlyUpdatedWorkItemsResponse {
  // The list of work items returned
  repeated WorkItem work_items = 1;
}

// Linked to QueueEntriesContextRow.
message SaveQueueEntryContextRequest {
  // The business objects that the Work Queue Context relates to.
  string topic_fid = 1;
  //
  // The namespace for the queue entry context.
  string namespace = 2;
  //
  // The Work Queue context, similar to vector data in Jetski (stored as jsonb).
  google.protobuf.Struct queue_entry_context = 3;
}

// Response to SaveQueueEntry request.
message SaveQueueEntryContextResponse {
  // Revision count
  google.protobuf.Int32Value revision = 6;
}

message SaveTopicDataRequest {
  message RelatedTopicFids {
    repeated string related_topic_fids = 1;
  }
  // Topic Fid for the topic data
  string topic_fid = 1;
  // A list of fids that this topic data is related with, used for permission
  RelatedTopicFids related_topic_fids = 2;
}

message SaveTopicDataResponse {}

message AddToWorkItemsActivityLogRequest {
  // ID of the work item this activity log entry belongs to
  string work_item_id = 1;
  // User who performed this action (can be "Automation", or empty if this info is unknown)
  string user_fid = 2;
  // The contents of the message itself
  string message = 3;
}

message AddToWorkItemsActivityLogResponse {}

message CompleteWorkItemRequest {
  //
  // Work Item FID.
  string fid = 1;
  //
  // An external ID used to support upsert semantics and idempotent APIs,
  // similar to 'source_resource_id' in Jetski. (defaults to WorkItem id)
  string upsert_key = 2;
  //
  // The Work Item type, similar to 'source_resource_type' in Jetski.
  string work_item_type = 3;
  //
  // The user who completed the work item
  google.protobuf.StringValue completed_by_fid = 4;
  //
  // The name of the service invoking CompleteWorkItem
  UpstreamService upstream_service_name = 5;
}
message CompleteWorkItemResponse {
  WorkItem work_item = 1;
}

message ForceReopenByExceptionRequest {
  // The list of work item fids to force reopen.
  repeated string work_item_fids = 1;
  // The exception to force reopen.
  WorkItemException exception = 2;
}

message ForceReopenByExceptionResponse {
  // Current work items specified by work_item_fids.
  // If a work item is not applicable for reopening,
  // the current state would be returned with empty exception_context,
  // so callers would not have to check work item state before reopening
  // and not worry about race conditions.
  repeated WorkItem work_items = 1;
}

message CancelForceReopenByExceptionRequest {
  // The list of work item fids to cancel force reopen.
  repeated string work_item_fids = 1;
  // The exception to cancel force reopen.
  string exception_fid = 2;
}

message CancelForceReopenByExceptionResponse {
  repeated WorkItem work_items = 1;
}

message GetWorkItemIdentifiersByTopicFidRequest {
  string topic_fid = 1;
}

message GetWorkItemIdentifiersByTopicFidResponse {
  repeated WorkItemIdentifier work_item_identifier = 1;
}

message SetWorkItemsToInProgressRequest {
  repeated string work_item_fids = 1;
}

message SetWorkItemsToInProgressResponse {
  repeated WorkItem successful_work_items = 1;
  repeated SetWorkItemInProgressFailedResult failures = 2;
}

message SetWorkItemInProgressFailedResult {
  WorkItem failed_work_item = 1;
  string failure_reason = 2;
}
