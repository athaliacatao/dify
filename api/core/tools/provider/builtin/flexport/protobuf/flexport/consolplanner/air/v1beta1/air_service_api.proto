// TEAM: wingstop

syntax = "proto3";

package flexport.consolplanner.air.v1beta1;

import "flexport/consolplanner/air/v1beta1/air_planning_shipment.proto";
import "flexport/consolplanner/air/v1beta1/fae_recommendation_feedback.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";
import "flexport/os/v1/types/walltimedatetime/v1/wall_time_date_time.proto";

option java_multiple_files = true;
option java_outer_classname = "AirServiceApiProto";
option java_package = "com.flexport.consolplanner.air.v1beta1";
option ruby_package = "Flexport::ConsolPlanner::Air::V1Beta1";

// This service is used to query/mutate `air` data in the consol_planner NIS.
// As this service contains all other services, we should seek to deprecate it
// and place each endpoint into an appropriate service.
service AirServiceAPI {
  // This RPC is called when we update AllotmentScheduleInstance(s) and need to reconcile them
  // with the build plans stored in consol_planner NIS.
  // Essentially it does two things,
  // 1. Check whether the new AllotmentScheduleInstance(s)' routes are compatible with the
  // shipments' preassigned routes.
  // 2.a If ALL compatible, update the shipments' AirCargoAllocation#allotment_fids
  // 2.b If ANY shipments involved are incompatible, abort the whole RPC.
  rpc ResolveShipmentRoute(ResolveShipmentRouteRequest) returns (ResolveShipmentRouteResponse);

  // Rpc method to get the build plans by allotment_schedule_instance_fids
  // Return the AirBuildPlans with corresponding ExecutionOrderFid,
  // the sum of the ChargeableWeight, the sum of the GrossWeight of the corresponding MAWB plans.
  rpc GetAirBuildPlans(GetAirBuildPlansRequest) returns (GetAirBuildPlansResponse);

  // RPC method to list eligible air planning shipments.
  // Besides the filters set in the request, we also mandate the shipment 1) should have a
  // main_freight_role different than "AIR_ROLE_NO_INVOLVEMENT" and 2) should not be delivered.
  // A maximum of 5,000 shipments will be returned in one RPC call.
  rpc ListAirPlanningShipment(ListAirPlanningShipmentRequest) returns (ListAirPlanningShipmentResponse);

  // RPC method to list fae recommendation feedbacks.
  // Return the feedbacks with corresponding solution id, asi fid, shipment fid,
  // user fid, action type, and reject reason.
  rpc ListFaeRecommendationFeedback(ListFaeRecommendationFeedbackRequest) returns (ListFaeRecommendationFeedbackResponse);

  rpc PublishAirEPC(PublishAirEPCRequest) returns (PublishAirEPCResponse);
}

message ResolveShipmentRouteRequest {
  message AllotmentScheduleInstanceRoute {
    string allotment_schedule_instance_fid = 1;

    message Leg {
      string allotment_fid = 1;
      bool loadable = 2;
      bool unloadable = 3;
      string origin_port_fid = 4;
      string destination_port_fid = 5;
    }
    // The new route shape of the AllotmentScheduleInstance.
    repeated Leg leg = 2;
    // The current route shape.
    repeated Leg replaced_leg = 3;
  }
  // We support batch resolution in a single RPC. If any of them failed the resolution, the entire
  // request will abort, even those that passed the route compatibility validation (no data
  // overwrite).
  repeated AllotmentScheduleInstanceRoute allotment_schedule_instance_route = 1;
}

message GetAirBuildPlansRequest {
  repeated string allotment_schedule_instance_fids = 1;

  // Whether to include the gross_weight_in_kg and chargeable_weight_in_kg in the response.
  // if false, the two fields will be set to 0.
  bool include_weight = 2;
  bool include_shipments = 3;
}

message ResolveShipmentRouteResponse {
  message ResolutionConflict {
    string allotment_schedule_instance_fid = 1;
    repeated string shipment_fid = 2;
  }
  // Only contains those that failed the compatibility validation.
  // This field being empty means the success of the RPC.
  repeated ResolutionConflict resolution_conflict = 1;
}

message GetAirBuildPlansResponse {
  message AirBuildPlan {
    optional string execution_order_fid = 1;

    // The sum of the ChargeableWeight of the corresponding MAWB plans
    double gross_weight_in_kg = 2;
    // The sum of the GrossWeight of the corresponding MAWB plans
    double chargeable_weight_in_kg = 3;

    string allotment_schedule_instance_fid = 4;

    string fid = 5;

    // The status of the build plan: DRAFT or FINAL
    AirBuildPlanStatus status = 6;

    // ulds in the build plan
    repeated BuildPlanULD build_plan_ulds = 7;

    // The client fid of the build plan reservation
    string client_fid = 8;

    message ShipmentAssignment {
      string shipment_fid = 1;
    }

    // The shipments in the build plan
    repeated ShipmentAssignment shipments = 9;

    // The air build plan ulds shared from
    string equipment_type_shared_from_fid = 10;
  }

  repeated AirBuildPlan air_build_plans = 1;
}

enum AirBuildPlanStatus {
  AIR_BUILD_PLAN_STATUS_INVALID = 0;
  AIR_BUILD_PLAN_STATUS_DRAFT = 1;
  AIR_BUILD_PLAN_STATUS_FINAL = 2;
}

// A set of ULDs of the same type
message BuildPlanULD {
  string equipment_fid = 1;
  uint32 count = 2;
}

// Request to list air planning shipments.
// The filters in the request will be AND'ed.
// For a request without any filter, all the active shipments will be eligible.
// If shipment fids are provided, all other filters will be ignored.
message ListAirPlanningShipmentRequest {
  repeated string quoted_origin_airport_fid = 1;
  repeated string quoted_destination_airport_fid = 2;
  repeated string route_origin_airport_fid = 11;
  repeated string route_destination_airport_fid = 12;

  repeated string mawb_plan_fids = 13;
  repeated string air_build_plan_fids = 14;

  // Optional: the start date (inclusive).
  flexport.os.v1.types.walltimedate.v1.WallTimeDate cargo_ready_date_start = 3;
  // Optional: the end date (exclusive).
  flexport.os.v1.types.walltimedate.v1.WallTimeDate cargo_ready_date_end = 4;

  // The start time of the actual/estimated origin cfs gatein.
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime origin_cfs_gate_in_start = 5;
  // The end time of the actual/estimated origin cfs gatein.
  flexport.os.v1.types.walltimedatetime.v1.WallTimeDateTime origin_cfs_gate_in_end = 6;

  // Optional: the shipment fids
  repeated string shipment_fid = 7;

  // The last shipment fid to start from.
  string last_shipment_fid = 8;

  // If this field is true, only shipments in either of following 2 conditions will be returned:
  // 1. security_document_status != FAILED and customs_document_status != FAILED
  // 2. route_origin_airport != PVG
  bool eligible_customs_clearance_status_only = 9;

  // whether exclude the departed shipments, default false
  bool exclude_departed_shipments = 10;
}

message ListAirPlanningShipmentResponse {
  repeated AirPlanningShipment air_planning_shipments = 1;
  // The last shipment fid to start from.
  string last_shipment_fid = 2;
}

// Request to list fae recommendation feedbacks.
// The filters in the request will be AND'ed.
// For a request without any filter, all the feedbacks will be eligible.
message ListFaeRecommendationFeedbackRequest {
  // Optional: the recommendation's solution ids
  repeated string solution_id = 1;
  // Optional: the asi fids
  repeated string allotment_schedule_instance_fid = 2;
  // Optional: the shipment fids
  repeated string shipment_fid = 3;
  // Optional: the user fids
  repeated string user_fid = 4;
  // Optional: whether include accepted shipments, default false
  bool include_accepted = 5;
}

message ListFaeRecommendationFeedbackResponse {
  repeated FaeRecommendationFeedback fae_recommendation_feedbacks = 1;
}

message PublishAirEPCRequest {
  EPCIdentifierType epc_identifier_type = 1;

  oneof epc_identifier {
    string mawb_number = 2;
  }

  EPCEventType epc_event_type = 10;
  ShipmentAgentType shipment_agent_type = 11;
  repeated string shipment_fids = 12;
}

enum EPCIdentifierType {
  EPC_IDENTIFIER_TYPE_INVALID = 0;
  EPC_IDENTIFIER_TYPE_MAWB = 1;
}

enum EPCEventType {
  EPC_EVENT_TYPE_INVALID = 0;
  EPC_EVENT_TYPE_MAWB_CREATED = 1;
  EPC_EVENT_TYPE_MAWB_UPDATED = 2;
  EPC_EVENT_TYPE_MAWB_DELETED = 3;
}

enum ShipmentAgentType {
  SHIPMENT_AGENT_TYPE_INVALID = 0;
  SHIPMENT_AGENT_TYPE_INSOURCED = 1;
  SHIPMENT_AGENT_TYPE_OUTSOURCED = 2;
}

message PublishAirEPCResponse {}
