// TEAM: ocean_service_offerings

syntax = "proto3";

package flexport.offerings.pricingaudit.v1beta1;

import "flexport/offerings/pricing/v1/pricing_api.proto";
import "flexport/offerings/pricing/v1beta1/pricing.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "PricingAuditProto";
option java_package = "com.flexport.offerings.pricingaudit.v1beta1";
option ruby_package = "Flexport::Offerings::PricingAudit::V1Beta1";

/* This file contains the proto definitions for events published to SNS by the Pricing Engine Audit service.
 * This schema is used by the the Pricing Engine Audit service which is responsible for documenting the key
 * decisions made by the Pricing Engine and providing a detailed log of events for a given request.
 */

// Audit input event to document the request to the Pricing Engine
message InputAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  // Optional field: identifier to distinguish between the different requests in a batch request
  google.protobuf.StringValue identifier = 3;
  // The request component contains the request object that was sent to the Pricing Engine
  oneof request {
    offerings.pricing.v1.GetPricingRecommendationsRequest get_pricing_recommendations_request = 4;
    offerings.pricing.v1.AdjustLineItemsRequest adjust_line_items_request = 5;
  }
  string client = 6;
  repeated OfferingAudit offerings = 7;
  string quote_id = 8;
  string freight_method = 9;
  string freight_type = 10;
  string origin_port_fid = 11;
  string destination_port_fid = 12;
  string air_service_tier = 13;
}

message OfferingAudit {
  string fid = 1;
  string configuration_fid = 2;
  string client_fid = 3;
  repeated ChargeAudit charges = 4;
}

message ChargeAudit {
  string slug = 1;
  string source = 2;
  RateAudit cost_rate = 3;
  RateAudit sell_rate = 4;
}

message RateAudit {
  string type = 1;
  string amount = 2;
  string currency = 3;
}

// Audit input event to document the application of a list price rule given a request
message ListPriceApplicationAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  // Indicate whether the general world rule was applied or if an address specific list price rule was applied
  bool is_default_world_rule = 6;
  // The snapshot_id, rule_source, and rule_mode can be used in conjunction to identify the specific snapshot file that was applied
  // - snapshot_id is an epoch
  // - rule_source is the type of the snapshot file
  // - rule_mode is the mode of the snapshot file
  string snapshot_id = 7;
  offerings.pricing.v1beta1.RuleSource rule_source = 8;
  RuleMode rule_mode = 9;
}

// Audit input event to document the application of a specific pricing rule given a request
message SpecificPricingRuleApplicationAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  string origin_port_fid = 5;
  string destination_port_fid = 6;
  // Indicates whether the rule was applied to a door-to-door, door-to-port, port-to-door, or port-to-port request
  offerings.pricing.v1beta1.FreightType freight_type = 7;
  // Indicates whether the rule was applied to an enterprise, smb, or key request
  offerings.pricing.v1beta1.Segment segment = 8;
  // The client_id is used to identify the client that the rule was applied to
  string client_id = 10;
  // The match_level is used to indicate whether the rule was applied exactly or if it was a fuzzy match
  MatchLevel match_level = 11;
  // The snapshot_id, rule_source, and rule_mode can be used in conjunction to identify the specific snapshot file that was applied
  // - snapshot_id is an epoch
  // - rule_source is the type of the snapshot file
  // - rule_mode is the mode of the snapshot file
  string snapshot_id = 3;
  offerings.pricing.v1beta1.RuleSource rule_source = 4;
  RuleMode rule_mode = 12;
}

// Audit input event to document the available markups given a request
message GetMarkupsAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  // Optional field: identifier to distinguish between the different requests in a batch request
  google.protobuf.StringValue identifier = 3;
  // Optional field: Origin + Mainfreight + Destination + Additional Freight markup
  google.protobuf.StringValue omda_markup_percentage = 4;
  // Optional field: main freight list price markup used by ListPriceApplication
  google.protobuf.StringValue main_freight_list_price_upper_guardrail_percentage = 6;
  // Optional field: main freight list price markup used by ListPriceApplication
  google.protobuf.StringValue main_freight_list_price_lower_guardrail_percentage = 7;
  // Optional field: origin leg list price markup used by SpecificPricingRuleApplication
  google.protobuf.StringValue origin_leg_upper_guardrail_percentage = 8;
  // Optional field: origin leg list price markup used by SpecificPricingRuleApplication
  google.protobuf.StringValue origin_leg_lower_guardrail_percentage = 9;
  // Optional field: destination leg list price markup used by SpecificPricingRuleApplication
  google.protobuf.StringValue destination_leg_upper_guardrail_percentage = 10;
  // Optional field: destination leg list price markup used by SpecificPricingRuleApplication
  google.protobuf.StringValue destination_leg_lower_guardrail_percentage = 11;
  // Mode of the snapshot file
  RuleMode rule_mode = 14;
}

// Audit input event to document the application of a specific markup strategy given a request
message MarkupAppliedAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  // Optional field: identifier to distinguish between the different requests in a batch request
  google.protobuf.StringValue identifier = 3;
  // Indicates how the markup was applied
  MarkupStrategy markup_strategy = 4;
  // Mode of the snapshot file
  RuleMode rule_mode = 6;
}

// Audit input event to document the response from the Pricing Engine given a request
message OutputAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message component is free text that can be used to provide additional context to the event
  string message = 2;
  // Optional field: identifier to distinguish between the different requests in a batch request
  google.protobuf.StringValue identifier = 3;
  // The response component contains the response object that was sent from the Pricing Engine
  oneof response {
    offerings.pricing.v1.GetPricingRecommendationsResponse get_pricing_recommendations_response = 4;
    offerings.pricing.v1.AdjustLineItemsResponse adjust_line_items_response = 5;
  }
}

// Audit input event to document an error from the Pricing Engine given a request
message RuntimeExceptionAuditEvent {
  // The attributes component includes properties that are common to all audit events and can be used for grouping
  AuditEventAttributes attributes = 1;
  // The message contains the error message that was sent from the Pricing Engine
  string message = 2;
}

// Message attributes referenced by each audit log event
message AuditEventAttributes {
  // The name of the API request that generated the event
  string api_name = 1;
  // The identifier is used to group together a series of events that are related to a single request
  string request_id = 2;
  google.protobuf.Timestamp timestamp = 3;
}

enum RuleMode {
  RULE_MODE_INVALID = 0;
  RULE_MODE_AIR = 1;
  RULE_MODE_CARTAGE = 2;
  RULE_MODE_OCEAN_FCL = 3;
  RULE_MODE_DRAYAGE = 4;
}

enum MatchLevel {
  MATCH_LEVEL_INVALID = 0;
  MATCH_LEVEL_EXACT = 1;
  MATCH_LEVEL_FUZZY = 2;
  MATCH_LEVEL_NONE = 3;
}

enum MarkupStrategy {
  MARKUP_STRATEGY_INVALID = 0;
  MARKUP_STRATEGY_DISTRIBUTE_MARKUP_ACROSS_OFFERINGS = 1;
  MARKUP_STRATEGY_UNIFORM_MARKUP_WITH_OMDA_MARKUP = 2;
  MARKUP_STRATEGY_UNIFORM_MARKUP_WITH_LIST_PRICE_MARKUP = 3;
  MARKUP_STRATEGY_NO_MARKUP = 4;
}
