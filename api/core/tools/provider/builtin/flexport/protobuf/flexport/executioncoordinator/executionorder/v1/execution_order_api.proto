// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executionorder.v1;

import "flexport/executioncoordinator/executionorder/v1/execution_order.proto";
import "flexport/executioncoordinator/executionorder/v1/execution_order_field_mask.proto";
import "flexport/executioncoordinator/executionorder/v1/nullable_execution_order.proto";
import "flexport/executioncoordinator/types/query/v1/filters.proto";
import "flexport/executioncoordinator/types/query/v1/order_by.proto";

option java_multiple_files = true;
option java_outer_classname = "ExecutionOrderApiProto";
option java_package = "com.flexport.executioncoordinator.executionorder.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionOrder::V1";

// This file: http://go/eo-api-proto.
//
// An API for interacting with ExecutionOrder.
service ExecutionOrderAPI {
  // Retrieves the current revision of an ExecutionOrder.
  rpc GetExecutionOrder(GetExecutionOrderRequest) returns (GetExecutionOrderResponse);
  // Retrieves all revisions of an ExecutionOrder, sorted in chronological order (earliest revision first).
  rpc ListExecutionOrderRevisions(ListExecutionOrderRevisionsRequest) returns (ListExecutionOrderRevisionsResponse);
  // Creates or updates an ExecutionOrder. Idempotent.
  rpc UpsertExecutionOrder(UpsertExecutionOrderRequest) returns (UpsertExecutionOrderResponse);
  // Lists ExecutionOrders based on provided filters.
  rpc ListExecutionOrders(ListExecutionOrdersRequest) returns (ListExecutionOrdersResponse);
  // Retrieves the current revision for multiple ExecutionOrders.
  rpc BatchGetExecutionOrders(BatchGetExecutionOrdersRequest) returns (BatchGetExecutionOrdersResponse);
}

// An API for interacting with ExecutionOrder entities.
service ExecutionOrderEntityAPI {
  // Update an entity for an ExecutionOrder.
  rpc UpdateExecutionOrderEntity(UpdateExecutionOrderEntityRequest) returns (UpdateExecutionOrderEntityResponse);
  // Update multiple entities for an ExecutionOrder.
  rpc BatchUpdateExecutionOrderEntity(BatchUpdateExecutionOrderEntityRequest) returns (BatchUpdateExecutionOrderEntityResponse);
}

// An API for interacting with ExecutionOrder status.
service ExecutionOrderStatusAPI {
  option deprecated = true;

  // Update the status for an ExecutionOrder.
  rpc UpdateExecutionOrderStatus(UpdateExecutionOrderStatusRequest) returns (UpdateExecutionOrderStatusResponse);
}

// The request for GetExecutionOrder.
message GetExecutionOrderRequest {
  // Heads up: "entity not found" behavior varies based on the identifier provided:
  // If fid is provided, a gRPC NOT_FOUND error is returned.
  // If shipment_fid is provided, an empty response is returned. See http://go/flex-id-eo.
  oneof identifier {
    string fid = 1;
    string shipment_fid = 2;
  }
  //
  // Specific revision to get, if any. The default value (0) returns the current revision.
  uint32 revision = 3;
}

// The response for GetExecutionOrder.
// If the request identifier was a shipment_fid and the shipment_fid has no corresponding
// ExecutionOrder entity (yet), then an empty response is returned. See http://go/flex-id-eo.
message GetExecutionOrderResponse {
  flexport.executioncoordinator.executionorder.v1.ExecutionOrder execution_order = 1;
}

// The request for ListExecutionOrderRevisions.
message ListExecutionOrderRevisionsRequest {
  // Heads up: "entity not found" behavior varies based on the identifier provided:
  // If fid is provided, a gRPC NOT_FOUND error is returned.
  // If shipment_fid is provided, an empty response is returned. See http://go/flex-id-eo.
  oneof identifier {
    string fid = 1;
    string shipment_fid = 2;
  }
}

// The response for ListExecutionOrderRevisions.
// If the request identifier was a shipment_fid and the shipment_fid has no corresponding
// ExecutionOrder entity (yet), then an empty list is returned. See http://go/flex-id-eo.
message ListExecutionOrderRevisionsResponse {
  repeated flexport.executioncoordinator.executionorder.v1.ExecutionOrder revisions = 1;
}

// The request for UpsertExecutionOrder.
message UpsertExecutionOrderRequest {
  //
  // Source of the request to change the ExecutionOrder. This field is required.
  flexport.executioncoordinator.executionorder.v1.ExecutionOrderRevisionSource revision_source = 2;
  //
  // Revision number of the current ExecutionOrder that the request intends to replace.
  // - If the revision number of the currently persisted ExecutionOrder differs, then the request
  //   is rejected.
  // - This restriction is designed to ensure that ordering systems don't make conflicting edits. It will
  //   not scale to many ordering systems constantly updating the order, but it should ensure data integrity
  //   for the near term as we get the EC-NIS up and running.
  int32 based_on_order_revision = 3;
  //
  // A field mask that limits the fields to upsert.
  ExecutionOrderFieldMask upsert_mask = 4;
  //
  // The new ExecutionOrder.
  flexport.executioncoordinator.executionorder.v1.ExecutionOrder execution_order = 1;
}

// The response for UpsertExecutionOrder.
message UpsertExecutionOrderResponse {
  flexport.executioncoordinator.executionorder.v1.ExecutionOrder execution_order = 1;
}

// The request message containing the query to retrieve ExecutionOrders for.
message ListExecutionOrdersRequest {
  //
  // The maximum number of entries to return. Defaults to 100, with a maximum limit of 10000.
  // If the value provided exceeds 10000, then 10000 will be used as the limit.
  uint32 limit = 1;
  //
  // All filters are "ANDed" together.
  flexport.executioncoordinator.types.query.v1.TimestampFilter created_time = 2;
  flexport.executioncoordinator.types.query.v1.TimestampFilter revision_created_time = 3;
  flexport.executioncoordinator.types.query.v1.StringFilter nominating_client_fid = 4;
  flexport.executioncoordinator.types.query.v1.StringFilter order_status = 5;
  flexport.executioncoordinator.types.query.v1.IntegerFilter revision_number = 6;
  flexport.executioncoordinator.types.query.v1.StringFilter shipper_entity_fid = 8;
  flexport.executioncoordinator.types.query.v1.StringFilter consignee_entity_fid = 9;
  flexport.executioncoordinator.types.query.v1.StringFilter buyer_entity_fid = 10;
  flexport.executioncoordinator.types.query.v1.StringFilter seller_entity_fid = 11;
  flexport.executioncoordinator.types.query.v1.StringFilter importer_of_record_fid = 12;
  flexport.executioncoordinator.types.query.v1.StringFilter dangerous_goods_review_status = 13;
  repeated flexport.executioncoordinator.types.query.v1.StringFilter tags = 14;
  flexport.executioncoordinator.types.query.v1.StringFilter transit_offering_mode = 15;
  //
  // The order of the results. Default is undefined.
  flexport.executioncoordinator.types.query.v1.OrderBy order_by = 7;
}

// The response message containing the ExecutionOrders for the provided query.
message ListExecutionOrdersResponse {
  repeated flexport.executioncoordinator.executionorder.v1.ExecutionOrder execution_orders = 1;
}

// The request for BatchGetExecutionOrders.
message BatchGetExecutionOrdersRequest {
  // Only supply execution_order_fids or shipment_fids, not both. Supplying both
  // will result in an error.
  // When a ExecutionOrder cannot be found or the Shipment does
  // not have a ExecutionOrder yet, it will be omitted from the response.
  repeated string execution_order_fids = 1;
  repeated string shipment_fids = 2;
}

// The order of the returned results matches the order of the shipment_fids in the request.
// If no ExecutionOrder is found for a given shipment_fid, then an empty NullableExecutionOrder
// message is included at that array index in the response so that ordering is preserved.
// In other words, nullable_execution_orders.size in the response will always equal
// shipment_fids.size in the request, and the ordering will be consistent.
message BatchGetExecutionOrdersResponse {
  repeated flexport.executioncoordinator.executionorder.v1.NullableExecutionOrder nullable_execution_orders = 1;
}

// The request for UpdateExecutionOrderEntity.
message UpdateExecutionOrderEntityRequest {
  // Entity to update
  flexport.executioncoordinator.executionorder.v1.Entity entity_name = 1;
  // The new json value for the entity
  string entity_json = 2;
  // idempotent key to make the API idempotent
  string idempotent_key = 3;
  // Human user that triggers the entity update, if there is
  string user_fid = 4;
  // The ExecutionOrder of the entity
  string execution_order_fid = 5;
}

// The response for UpdateExecutionOrderEntity.
message UpdateExecutionOrderEntityResponse {
  // Activity record that is generated with the update
  flexport.executioncoordinator.executionorder.v1.EntityActivity activity = 1;
}

// The request for BatchUpdateExecutionOrderEntity.
message BatchUpdateExecutionOrderEntityRequest {
  repeated UpdateEntityPiece piece = 1;
  // idempotent key to make the API idempotent
  string idempotent_key = 2;
  // Human user that triggers the entity update, if there is
  string user_fid = 3;
  // The ExecutionOrder of the entity
  string execution_order_fid = 4;
}

message UpdateEntityPiece {
  // Entity to update
  flexport.executioncoordinator.executionorder.v1.Entity entity_name = 1;
  // The new json value for the entity
  string entity_json = 2;
}

// The response for BatchUpdateExecutionOrderEntity.
message BatchUpdateExecutionOrderEntityResponse {
  // Activity records that are generated with the batch update
  repeated flexport.executioncoordinator.executionorder.v1.EntityActivity activity = 1;
}

// The request for UpdateExecutionOrderStatus.
message UpdateExecutionOrderStatusRequest {
  option deprecated = true;

  // The new order status of the ExecutionOrder
  flexport.executioncoordinator.executionorder.v1.ExecutionOrderStatus order_status = 1;
  // idempotent key to make the API idempotent
  string idempotent_key = 2;
  // Human user that triggers the entity update, if there is
  string user_fid = 3;
  // The ExecutionOrder of the entity
  string execution_order_fid = 4;
}

// The response for UpdateExecutionOrderStatus.
message UpdateExecutionOrderStatusResponse {
  option deprecated = true;

  // Activity records that are generated with the status update
  flexport.executioncoordinator.executionorder.v1.StatusActivity activity = 1;
}
