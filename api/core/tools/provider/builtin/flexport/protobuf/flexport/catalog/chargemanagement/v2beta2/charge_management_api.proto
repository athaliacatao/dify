// TEAM: commerce_charges

syntax = "proto3";

package flexport.catalog.chargemanagement.v2beta2;

import "flexport/catalog/charge/v2beta1/charge.proto";
import "flexport/catalog/offering/v2beta1/offering.proto";
import "flexport/catalog/rate/v1/rate.proto";

option java_multiple_files = true;
option java_outer_classname = "ChargeManagementApiProto";
option java_package = "com.flexport.catalog.chargemanagement.v2beta2";
option ruby_package = "Flexport::Catalog::ChargeManagement::V2Beta2";

// The charge-management service definition.
service ChargeManagementAPI {
  option deprecated = true;
  // Endpoint for fetching charges that apply to one or more offerings.
  rpc GetCharges(GetChargesRequest) returns (GetChargesResponse) {
    option deprecated = true;
  }
  // Endpoint for fetching markups that apply to one or more offerings.
  rpc GetMarkups(GetMarkupsRequest) returns (GetMarkupsResponse) {
    option deprecated = true;
  };
}

message GetChargesRequest {
  catalog.charge.v2beta1.EvaluateChargesContext context = 1;
  repeated catalog.offering.v2beta1.ClientOfferingDto offerings = 2;
}

message GetChargesResponse {
  string deprecation_warning = 4; // Optional field for deprecation warnings
  repeated catalog.offering.v2beta1.ClientOfferingDto offerings = 1;

  // per shipment insurance
  // doc: https://docs.google.com/document/d/1uH7L7rYjPE0iCbgX1_Z4138dV9V3zhpt-yE5_nGQbUs/edit#heading=h.n53saav4q00h
  catalog.rate.v1.AmountWithCurrency per_shipment_insured_amount_with_currency = 2;
  catalog.rate.v1.AmountWithCurrency per_shipment_insurance_premium_with_currency = 3;
}

message GetMarkupsRequest {
  catalog.charge.v2beta1.EvaluateMarkupsContext context = 1;
  repeated catalog.offering.v2beta1.ClientOfferingDto offerings = 2;
}

// Note: can simplify the response structure in the future
message GetMarkupsResponse {
  string deprecation_warning = 2; // Optional field for deprecation warnings
  repeated catalog.offering.v2beta1.ClientOfferingDto offerings = 1;
}
