// TEAM: trucking_carriers

syntax = "proto3";

package flexport.monolith.funnelmanagement.usersignup.v1beta1;

import "flexport/monolith/funnelmanagement/usersignup/v1beta1/user_signup.proto";

option java_multiple_files = true;
option java_outer_classname = "UserSignupApiProto";
option java_package = "com.flexport.monolith.funnelmanagement.usersignup.v1beta1";
option ruby_package = "Flexport::Monolith::FunnelManagement::UserSignup::V1Beta1";

/*
  The FunnelManagement UserSignupAPI service definition. 
  This service has rpc apis to allow user account creation for the app depending on FunnelManagement Engine.
  Ignition App is the only consumer of this service now and the service has one rpc api to create user account for Ignition App.
*/
service UserSignupAPI {
  /*
    Attempts to create a user account in the IAM Service or creates a record IneligibleUserCapabilities table.
    Creates the user account in the IAM NIS if 'eligible' flag in user_signup_data is set to true. 
    Creates IneligibleUserCapabilities record if 'eligible' flag in user_signup_data is set to false.
    If the action was successful, the returns a IgnitionUserSignupResponse message with no payload.
    If the action failed, the rpc will return an error with the appropriate message.
  */
  rpc IgnitionUserSignup(IgnitionUserSignupRequest) returns (IgnitionUserSignupResponse);
}

// The request message for the IgnitionUserSignup rpc api.
message IgnitionUserSignupRequest {
  // The user_signup_data has attributes to capture generic information for a user signup.
  UserSignupData user_signup_data = 1;
  // The ignition_user_signup_data has attributes to capture information specific to the ignition app.
  IgnitionUserSignupData ignition_user_signup_data = 2;
}

// The response message for the IgnitionUserSignup rpc api.
message IgnitionUserSignupResponse {
}
