// TEAM: workflow_platform

syntax = "proto3";

package flexport.rulesengine.evaluateoutput.v1;

option java_multiple_files = true;
option java_outer_classname = "EvaluateOutputProto";
option java_package = "com.flexport.rulesengine.evaluateoutput.v1";
option ruby_package = "Flexport::RulesEngine::EvaluateOutput::V1";

// The EvaluateOutput per each input.
message EvaluateOutput {
  repeated EvaluateOutputPerRule outputs = 1;
}

// The EvaluateOutput per each input per each rule.
message EvaluateOutputPerRule {
  EvaluateHit hit = 1;
  EvaluateStatus status = 2;
  // the error message if status is EVALUATE_STATUS_ERROR.
  string error_message = 3;
  // The output in JSON text or Protobuf bytes if status is EVALUATE_STATUS_SUCCESS.
  bytes output = 4;
  // The index of the result branch if status is EVALUATE_STATUS_SUCCESS.
  // -1 indicates no branch was matched.
  int32 result_branch_index = 5;
  // The id of the result branch if status is EVALUATE_STATUS_SUCCESS.
  // -1 indicates no branch was matched.
  int64 result_branch_id = 7;
  // Whether the result branch is the default branch.
  bool result_branch_is_default = 8;
  // The index of result row of a decision table if status is EVALUATE_STATUS_SUCCESS.
  // -1 indicates no row was matched.
  int32 decision_table_result_row_index = 6;
}

// The hitting information of the rule, it's helpful for client to debug.
message EvaluateHit {
  // The FID of object if provided.
  string object_fid = 1;
  // The FID of rule, empty if in decision table.
  string rule_fid = 2;
  // The FID of rule management if exists.
  string rule_management_fid = 3;
  // The FID of rule set if exists.
  string rule_set_fid = 4;
  // The FID of decision table if exists.
  string decision_table_fid = 5;
  // The branch count.
  int32 branch_count = 13;
  // The index of the rule in the hit list.
  // It's the hit-row number for decision table when hitting policy is ALL.
  int32 index = 11;
  // The index of the rule in the container.
  // It's the hit-row number for decision table when hitting policy is ALL.
  int32 sub_index = 12;
}

// The EvaluateStatus.
enum EvaluateStatus {
  EVALUATE_STATUS_INVALID = 0;
  EVALUATE_STATUS_SUCCESS = 1;
  EVALUATE_STATUS_ERROR = 2;
  EVALUATE_STATUS_NOT_MATCHED = 3;
}
