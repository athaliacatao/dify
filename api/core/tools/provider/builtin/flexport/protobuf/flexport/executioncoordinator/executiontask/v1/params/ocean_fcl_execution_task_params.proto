// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executiontask.v1;

option java_multiple_files = true;
option java_outer_classname = "OceanFclExecutionTaskParamsProto";
option java_package = "com.flexport.executioncoordinator.executiontask.v1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionTask::V1";

import "flexport/executioncoordinator/executioncargo/v1/execution_cargo.proto";
import "flexport/executioncoordinator/executiontask/v1/params/trucking_execution_task_params.proto";
import "flexport/executioncoordinator/types/enums/v1/ocean_fcl_role.proto";
import "flexport/executioncoordinator/types/enums/v1/transport_mode.proto";
import "flexport/executioncoordinator/types/noinvolvement/v1/ocean_fcl_no_involvement_info.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";
import "google/protobuf/wrappers.proto";

// Parameters for an ocean FCL ExecutionTask.
//
// This message roughly corresponds to the information we include on carrier bookings
// placed with vessel-owning ocean carriers. A carrier booking is a request for an ocean carrier
// to move one or more containers from point A (called the "Place of Receipt") to point B (called
// the "Place of Delivery"). There may be many physical legs managed by the ocean carrier to get
// the containers from A to B, and these are all part of the same ExecutionTask. Consider the case
// of one container going from Yantian to Chicago via Vancouver. Generally the ocean carrier
// manages the rail leg. So such an ExecutionTask will include these physical legs:
//
// - Yantian => Vancouver [ocean]
// - Vancouver => Chicago [rail]
//
// One ocean FCL ExecutionTask may correspond to one physical leg in the case of a simple
// "port-to-port" (or really, "container-yard-to-container-yard" / CY-to-CY) shipment with no
// intermediate stops. But in many cases one ocean FCL ExecutionTask corresponds to several
// physical legs, and in some cases ocean carriers can even manage trucking legs.
//
// Aside: the terms "Place of Receipt" and "Place of Delivery" come from the idioms for
// Master Bills of Lading (MBLs) issued by ocean carriers to their customers (such as Flexport),
// and these terms reflect the notion of "receipt" and "delivery" _from the perspective of
// the ocean carrier_. See http://go/eo-locations.
//
// For most Flexport-managed ocean FCL the "Place of Receipt" on the carrier booking/MBL is the
// container yard for the origin port and the "Place of Delivery" is the container yard for the
// destination port. It is possible, however, for vessel-owning ocean carriers to also provide
// trucking services. So the MBL boundary in some cases is actually door-to-door.
//
// For shipments with door-to-door MBL coverage, the ocean FCL ExecutionTask represents the
// entire physical movement of the container, since Flexport has delegated all freight
// responsibility to the ocean carrier. Here are the physical movements that might be represented
// by such an ExecutionTask:
//
// - factory => Haiphong CY [truck]
// - Haiphong CY => Yantian CY [ocean] <= "feeder" leg from smaller ocean port to larger ocean port
// - Yantian CY => Vancouver CY [ocean]
// - Vancouver CY => Chicago CY [rail]
// - Chicago CY => client warehouse [truck]
//
message OceanFclExecutionTaskParams {
  //
  // The ocean FCL carrier responsible for execution (corresponds to carrier.rb).
  // Monolith model: app/models/carrier.rb
  string carrier_fid = 1;
  //
  // The contract to be used to make a booking with the carrier.
  // Monolith model: engines/ocean_procurement/app/models/ocean_procurement/carrier_contract.rb
  string carrier_contract_fid = 2;
  //
  // The carrier service string to be used to make a booking with the carrier.
  // Examples: "AUE" (for "Asia-U.S. East Coast Service") or "PN1" (for "Pacific North 1").
  string carrier_service_string_fid = 12;
  //
  // The code used to indicate to the carrier which client or contract we're booking under.
  // This can be any arbitrary string.
  // Examples: "BULLET B" or "FOO_CLIENT NAC3744".
  string booking_code = 4;
  //
  // The ocean port where cargo is loaded onto the main ocean vessel.
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string port_of_loading_fid = 5;
  //
  // The ocean port where cargo is unloaded from the main ocean vessel. This is sometimes
  // called the "port of discharge" but has a distinct meaning -- see comment at bottom of file.
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string port_of_unloading_fid = 10;
  //
  // The place where Flexport acting as NVOCC releases possession of the goods.
  // This is the place of delivery that gets added to the auto-generated NRA and HBL.
  // The value is derived from shipment.graph.place_of_delivery.
  // See comments in shipment_node_tags.rb for more information.
  string fmc_delivery_fid = 21;
  //
  // Inland port on an ocean shipment.
  // Ex: Chicago in a Yantian => Vancouver => Chicago
  // Monolith model: engines/network_engine/app/models/network_engine/port.rb
  string inland_port_fid = 11;
  //
  // Fulfillment Management Tool used for an ocean shipment.
  // Monolith model: engines/ocean_fmt_assignment/app/models/ocean_fmt_assignment/fmt_assignment.rb
  string fmt_assignment_fid = 19;
  //
  // The planned route for this ExecutionTask.
  // Must include the Port of Loading and Port of Unloading.
  // May include intermediate ports of calling or transshipment ports.
  // May include origin inland or feeder ports before the Port of Loading.
  // May include destination inland or feeder ports after the Port of Unloading.
  OceanFclRoute planned_route = 8;
  //
  // The count of twenty-foot-container equivalent units to be moved as part of the ExecutionTask.
  google.protobuf.Int32Value teu = 9;
  //
  // Estimated time of departure from the Port of Loading.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate etd_proforma = 13;
  //
  // The container data and any per-container cargo data.
  // The execution_cargo's value must be a ActiveIso6346Container.
  repeated flexport.executioncoordinator.executioncargo.v1.ExecutionCargo container_cargos = 14;
  //
  // The main freight role defines how exactly Flexport intermediates the relationship between the
  // external ocean carrier and a client for a given shipment.
  flexport.executioncoordinator.types.enums.v1.OceanFclRole role = 3;
  //
  // Info related to the role.
  oneof role_related_info {
    flexport.executioncoordinator.types.noinvolvement.v1.OceanFclNoInvolvementInfo no_involvement_info = 15;
    OceanFclTaskFullServiceInfo full_service_info = 18;
  }
  //
  // Whether there is assignment from the Fulfillment Management Tool (http://go/fmt)
  // backing this ExecutionTask.
  google.protobuf.BoolValue has_fmt_assignment = 16;
  //
  // What did we derive this ExecutionTask revision from?
  OceanFclSource source = 17;
  // HACK HACK HACK
  // Trucking legs managed by ocean provider.
  // See go/trucking-legs-on-non-trucking-task for more details
  repeated TruckingExecutionTaskParams managed_trucking_params = 20;
}

// Info related to fulfillment of the full service role.
message OceanFclTaskFullServiceInfo {
  //
  // Does a partner (e.g. DT China) own the contract with the ocean carrier for main freight?
  // If this is the case, then the shipment should not be planned through FMT assignment.
  // https://github.flexport.io/flexport/flexport/tree/master/slack_messages/C018LHP3BM2_1611901080.028100.md
  google.protobuf.BoolValue is_partner_owned_carrier_contract = 1;
}

// A planned ocean FCL route.
message OceanFclRoute {
  repeated OceanFclRouteLeg legs = 1;
}

// A planned ocean FCL route leg.
message OceanFclRouteLeg {
  string carrier_string = 1;
  OceanFclRoutePortCall origin_port_call = 2;
  OceanFclRoutePortCall destination_port_call = 3;
  flexport.executioncoordinator.types.enums.v1.TransportMode transport_mode = 4;
  // The ship's IMO identifier (International Maritime Organization).
  // Includes only the 7 digit identifier, without any prefix. Eg: "9462732"
  string vessel_imo_number = 5;
  // The "external" voyage number, whenever it is available.
  // (Carriers will often have internal voyage numbers that aren't necessarily shared by other
  // carriers in the same alliance.)
  string voyage_number = 6;
}

// A planned ocean FCL route port call, or visit to a port.
message OceanFclRoutePortCall {
  string port_fid = 1;
  // Proforma dates represent the carriers' internal weekly schedule.
  // Although they are often inaccurate, proforma dates are useful when referencing a sailing.
  // As an example, a sailing that was *supposed* to depart on Jul/1 may have its departure
  // delayed initially to Jul/8 and later on delayed again to Jul/15. However, when communicating
  // with partners and carriers, specifying the vessels' proforma date of Jul/1 will give them
  // enough information to identify the targeted sailing.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate proforma_date = 2;
  // Our latest information on when the vessel is scheduled to call this port.
  flexport.os.v1.types.walltimedate.v1.WallTimeDate estimated_date = 3;
}

// Indicates where an OceanFcl ExecutionTask came from.
enum OceanFclSource {
  OCEAN_FCL_SOURCE_INVALID = 0;
  OCEAN_FCL_SOURCE_FMT_ASSIGNMENT = 1;
  OCEAN_FCL_SOURCE_CARRIER_BOOKING = 2;
  OCEAN_FCL_SOURCE_LEGACY_GRAPH = 3;
  OCEAN_FCL_SOURCE_ITINERARY = 4;
}

// The following fields on fmt_assignment.rb are omitted from this proto:
//
// shipment_id => derive from execution_order_fid on execution_task.proto
// contract_type => does not appear to be used by the ocean FCL ExecutionProvider

// PORT OF UNLOADING VS PORT OF DISCHARGE
// ======================================
//
// https://www.gistnet.com/sub/glossary/port_of_discharge.html
// The port at which a vessel unloads a particular consignment of cargo having completed its
// transportation of the consignment. This term applies strictly to a physical function of a
// particular vessel, and should not be confused with the notion of a destination port or inland
// point – that is, the point at which a transportation carrier fulfills its contract of carriage.
//
// https://www.gistnet.com/sub/glossary/port_of_unloading.html
// The port (or airport, though this is typically referred to as airport of unloading) at which
// cargo is taken off a vessel (or aircraft) at the final destination for the particular mode of
// transportation (ocean, inland waterway or air mode). For international commerce, the port of
// unloading would be in another country from which the cargo began its transportation. If this
// port is in the country of ultimate destination, and this is where customs clearance will occur,
// the port of unloading becomes the Customs Port of Entry; otherwise, for in-transit cargo,
// the port of unloading is merely a transfer point.
//
// Example container route:
// FeederPort -> HK -> LA -> CHI
// Both HK and LA are Ports of Discharge
// Only LA is the Port of Unloading
