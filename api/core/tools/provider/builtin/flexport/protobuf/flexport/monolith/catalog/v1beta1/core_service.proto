// TEAM: service_catalog

syntax = "proto3";

package flexport.monolith.catalog.v1beta1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "CoreServiceProto";
option java_package = "com.flexport.monolith.catalog.v1beta1";
option ruby_package = "Flexport::Monolith::Catalog::V1Beta1";

// Address info needed Catalog NIS.
message Address {
  string fid = 1;
  google.protobuf.StringValue country_code = 2;
  google.protobuf.StringValue iata_code = 3;
  google.protobuf.BoolValue has_loading_dock = 4;
  google.protobuf.StringValue company_fid = 5;
  google.protobuf.StringValue loc_code = 6;
  google.protobuf.BoolValue railport = 7;
  google.protobuf.StringValue city = 8;
  google.protobuf.DoubleValue lat = 9;
  google.protobuf.DoubleValue lng = 10;
}

// Client info needed in Catalog NIS.
message Client {
  string fid = 1;
  Segment segment = 2;
  repeated string switches = 3;
  ClientDotOrgInfo client_dot_org_info = 4;
  google.protobuf.BoolValue wants_commercial_invoice_transcription = 5;
  google.protobuf.BoolValue wants_order_management_service = 6;
  google.protobuf.BoolValue wants_order_management_special_treatment_service = 7;
}

// Client_segments enum in core.
enum Segment {
  SEGMENT_INVALID = 0;
  SEGMENT_EMERGING = 1;
  SEGMENT_SMB = 2;
  SEGMENT_MID_MARKET = 3;
  SEGMENT_NOT_QUALIFIED = 4;
  SEGMENT_UNKNOWN = 5;
  SEGMENT_ENTERPRISE = 6;
  SEGMENT_QUICK_QUOTE = 7;
}

// Dot org setting needed for evaluating conditional charges.
message ClientDotOrgInfo {
  EnrollmentStatus dot_org_enrollment_status = 1;
  google.protobuf.Timestamp dot_org_enrollment_date_time = 2;
}

// Enrollment_statuses enum in core.
enum EnrollmentStatus {
  ENROLLMENT_STATUS_INVALID = 0;
  ENROLLMENT_STATUS_ENROLLED = 1;
  ENROLLMENT_STATUS_TRIAL = 2;
  ENROLLMENT_STATUS_PAUSED = 3;
  ENROLLMENT_STATUS_CANCELLED = 4;
  ENROLLMENT_STATUS_ENROLLED_WITH_EXCEPTIONS = 5;
  ENROLLMENT_STATUS_INTERESTED = 6;
  ENROLLMENT_STATUS_NOT_INTERESTED = 7;
  ENROLLMENT_STATUS_PENDING = 8;
  ENROLLMENT_STATUS_ENROLLED_WITH_VISIBILITY = 9;
}

// fields are defined in monorail/modules/trade/app/service_catalog_models/service_item_template.rb
// example:
//  {
//    "service_item_template": {
//      "id": 1,
//      "capture_type": {
//        "value": "mark_up_percent"
//      },
//      "category": "freight",
//      "general_ledger_category": {
//        "value": "freight_category"
//      },
//      "service_type": "Shipment",
//      "slug": "air_freight",
//      "title": "Air Freight"
//      }
//    }
// only includes fields that are used in SIT config page for now: https://core.flexport.com/service_item_templates
// use google.protobuf Wrapper types for nullable columns
// use primitive types for not-null columns, or columns with default value
message ServiceItemTemplate {
  int32 id = 1;
  google.protobuf.StringValue capture_type = 2;
  string category = 3;
  google.protobuf.StringValue general_ledger_category = 4;
  string service_type = 5;
  string slug = 6;
  string title = 7;
}

message ServiceConfig {
  repeated ServiceOfferingServiceChargeTypeConfig service_offering_service_charge_type_configs = 1;
}

// base, included("benchmark" in db), and dormant are defined in
// engines/catalog/app/models/catalog/offering/service_offering_service_charge_type_config.rb
// service_charge_type_id, service_charge_type_slug, and service_charge_type_title are defined in
// engines/catalog/app/models/catalog/charge/service_charge_type.rb
// offering_type is defined in
// engines/catalog/app/models/catalog/offering/service_offering_config.rb
// use primitive types for not-null columns, or columns with default value
message ServiceOfferingServiceChargeTypeConfig {
  bool base = 1;
  bool included = 2; // defined as "benchmark" in db, TRUE means the charge be rolled up to base
  bool dormant = 3;
  string offering_type = 4;
  int32 service_charge_type_id = 5;
  string service_charge_type_slug = 6;
  string service_charge_type_title = 7;
}

// The list of ServiceChargeToTemplateItem
message ServiceChargeToTemplateTable {
  repeated ServiceChargeToTemplateItem service_charge_to_template_items = 1;
}

// fields are defined in engines/catalog/app/models/catalog/service_charge_to_template_map.rb
message ServiceChargeToTemplateItem {
  string charge_type_title = 1;
  string charge_type_slug = 2;
  string item_template_title = 3;
  string item_template_slug = 4;
  string item_template_category = 5;
  string mapping_tier = 6;
  string mapping_service_type = 7;
  string item_template_fid = 8;
}
