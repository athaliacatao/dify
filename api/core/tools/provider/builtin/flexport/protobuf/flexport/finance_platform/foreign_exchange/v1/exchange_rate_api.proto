// TEAM: finance_platform
/*
 * Protobuf definitions for Foreign Exchange APIs. Used for converting from one
 * currency to another.
 */

syntax = "proto3";

package flexport.finance_platform.foreign_exchange.v1;

import "flexport/finance_platform/foreign_exchange/v1/exchange_rate.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "ForeignExchangeAPIProto";
option java_package = "com.flexport.finance_platform.foreign_exchange.v1";
option ruby_package = "Flexport::FinancePlatform::ForeignExchange::V1";

// The protocol for all foreign exchange rate API.
service ExchangeRateAPI {
  // Get the latest exchange rate dto. A custom FX source may optionally be
  // specified to fetch rates retreived from that source, else the Flexport
  // company default source will be used.
  rpc GetCurrentExchangeRate(GetCurrentExchangeRateRequest) returns (GetCurrentExchangeRateResponse);
  // Get the latest exchange rate dto before a specific time, return the
  // exchange rate with earliest time otherwise. A custom FX source may
  // optionally be specified to fetch rates retreived from that source, else the
  // Flexport company default source will be used.
  rpc GetExchangeRateAsOf(GetExchangeRateAsOfRequest) returns (GetExchangeRateAsOfResponse);
  // Get exchange rate dto with core database id.
  rpc FindExchangeRate(FindExchangeRateRequest) returns (FindExchangeRateResponse);
  // Fetch new exchange rate from openexchangerate api.
  rpc FetchAndStoreExchangeRate(FetchAndStoreExchangeRateRequest) returns (FetchAndStoreExchangeRateResponse);
}

message GetCurrentExchangeRateRequest {
  // Note: The `optional` keyword here enables field presence tracking. By
  // default, empty values for fx_source will serialize to `FX_SOURCE_INVALID`
  // @see https://github.com/uber/prototool/tree/dev/style#enums
  optional flexport.finance_platform.foreign_exchange.v1.FXSource fx_source = 1;
}

message GetCurrentExchangeRateResponse {
  flexport.finance_platform.foreign_exchange.v1.ExchangeRateDto exchange_rate = 1;
}

message GetExchangeRateAsOfRequest {
  google.protobuf.Timestamp time = 1;
  optional flexport.finance_platform.foreign_exchange.v1.FXSource fx_source = 2;
}

message GetExchangeRateAsOfResponse {
  flexport.finance_platform.foreign_exchange.v1.ExchangeRateDto exchange_rate = 1;
}

message FindExchangeRateRequest {
  int32 id = 1;
}

message FindExchangeRateResponse {
  flexport.finance_platform.foreign_exchange.v1.ExchangeRateDto exchange_rate = 1;
}

message FetchAndStoreExchangeRateRequest {}

message FetchAndStoreExchangeRateResponse {}
