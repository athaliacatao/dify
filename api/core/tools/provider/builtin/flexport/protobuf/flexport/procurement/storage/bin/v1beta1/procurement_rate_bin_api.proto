// TEAM: procurement

syntax = "proto3";

package flexport.procurement.storage.bin.v1beta1;

import "flexport/procurement/storage/bin/v1beta1/surcharge_inclusion.proto";
import "flexport/procurement/storage/bin/v1beta1/surcharge_rate_item.proto";

option java_multiple_files = true;
option java_outer_classname = "ProcurementRateBinApiProto";
option java_package = "com.flexport.procurement.storage.bin.v1beta1";
option ruby_package = "Flexport::Procurement::Storage::Bin::V1Beta1";

service ProcurementRateBinAPI {
  rpc AddRates(AddRatesRequest) returns (AddRatesResponse) {}
  rpc GetRates(GetRatesRequest) returns (GetRatesResponse) {}
  rpc GetRateGroups(GetRateGroupsRequest) returns (GetRateGroupsResponse) {}
  rpc SearchRates(SearchRatesRequest) returns (SearchRatesResponse) {}
  rpc SearchRateGroups(SearchRateGroupsRequest) returns (SearchRateGroupsResponse) {}
  rpc UpsertSurchargeInclusions(UpsertSurchargeInclusionsRequest) returns (UpsertSurchargeInclusionsResponse) {}
  rpc UpsertSurchargeRateItems(UpsertSurchargeRateItemsRequest) returns (UpsertSurchargeRateItemsResponse) {}
}

message AddRatesRequest {
  oneof payload {
    string file_fid = 1;
    bytes data = 2;
  }

  enum AssetType {
    ASSET_TYPE_INVALID = 0;
    ASSET_TYPE_FPS_PIE = 1 [deprecated = true];
    ASSET_TYPE_FPS_CSV = 2;
  }

  AssetType asset_type = 3;
  optional int64 digitization_job_id = 4;
}

message AddRatesResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
    REQUEST_RESULT_FAILED_TO_INTAKE = 3;
  }

  RequestResult result = 1;
}

message GetRatesRequest {
  oneof id {
    string rate_key = 1 [deprecated = true];
    RateQuery query = 2;
    int32 rate_item_id = 3;
  }
}

message GetRatesResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
  repeated RateItem rate_items = 2;
}

message GetRateGroupsRequest {
  oneof id {
    RateGroupKey rate_group_key = 1;
    RateQuery query = 2;
  }
}

message GetRateGroupsResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
  repeated RateGroup rate_groups = 2;
}

message RateGroupKey {
  int64 group_id = 1;
  string rate_key = 2 [deprecated = true];
  int32 rate_item_id = 3;
}

message RateQuery {
  // Time of rate validity, UTC epoch seconds
  int64 valid_at_time = 1;

  // Using the rate state at a given instance time, UTC epoch seconds
  optional int64 instance_time = 2;

  optional DataSource data_source = 4;
  // deprecated, use carrier_filter
  optional QueryProperty carrier = 5 [deprecated = true];
  // list of ordered stops with the origin first and destination last
  repeated QueryProperty stops = 6;
  // deprecated, use contract_filter
  optional QueryProperty contract = 20 [deprecated = true];
  // deprecated, use client_filter
  optional QueryProperty client = 21 [deprecated = true];
  // deprecated, partner information not saved
  optional QueryProperty origin_partner = 22 [deprecated = true];
  // deprecated, partner information not saved
  optional QueryProperty destination_partner = 23 [deprecated = true];
  // deprecated, will handle commodities when standardized with hs codes
  repeated QueryProperty commodities = 30 [deprecated = true];
  // deprecated because callers probably wouldn't know the bullet group ahead of time
  optional QueryProperty bullet_group = 31 [deprecated = true];
  // deprecated, premium service logic refinement required,
  // will probably want a premium_service_filter instead
  repeated QueryProperty premium_services = 32 [deprecated = true];
  // deprecated, use service_string_filter
  optional QueryProperty service_lane = 33 [deprecated = true];
  // deprecated, use carrier_filter
  optional QueryProperty carrier_scac = 34 [deprecated = true];

  optional QueryFilter contract_filter = 35;
  optional QueryFilter carrier_filter = 36;
  // only client fid values supported
  optional QueryFilter client_filter = 37;
  optional QueryFilter service_string_filter = 38;
}

message RateGroup {
  RateGroupKey rate_group_key = 1;
  repeated RateItem rate_items = 2;
}

message RateItem {
  string rate_key = 1 [deprecated = true];
  Property carrier = 2;
  Property contract = 3;
  string amendment_number = 4;
  int64 amendment_index = 5;
  optional Property origin = 6;
  optional Property destination = 7;
  optional Property origin_via = 8;
  optional Property destination_via = 9;
  optional string line_item = 10;

  // UTC epoch seconds
  int64 valid_from = 11;

  // UTC epoch seconds
  int64 valid_to = 12;

  string currency = 13;

  // Prices in micros (millionths of a unit of currency)
  // deprecated, see price
  optional int64 price_20 = 14 [deprecated = true];
  optional int64 price_40 = 15 [deprecated = true];
  optional int64 price_40_hc = 16 [deprecated = true];
  optional int64 price_45_hc = 17 [deprecated = true];

  optional bool arb_allowed = 18;
  string contract_type = 19;
  optional string source_sheet_name = 20;
  optional Property charge_code = 21;
  repeated Property commodities = 22;
  optional string service_lane = 23;
  optional string misc = 24;
  optional Property rate_over = 26;
  repeated Property premium_services = 27;
  repeated Property inclusive_charges = 28;
  repeated Property subject_to_charges = 29;
  optional string bullet_group = 30;
  int64 intern_version = 31;
  string data_source = 32;
  string state = 33;

  Property carrier_scac = 34 [deprecated = true];

  oneof price {
    PriceContainer price_container = 35;
    int64 price_flat = 36;
  }

  optional Property arb_restriction = 37;

  optional int32 asset_id = 38;

  int32 rate_item_id = 39;

  optional string client_fid = 40;
}

message QueryProperty {
  oneof property {
    string value = 1;
    string fid = 2;
  }
}

message Property {
  string value = 1;
  ValueType type = 2;
  optional string fid = 3;

  enum ValueType {
    VALUE_TYPE_INVALID = 0;
    VALUE_TYPE_UNSPECIFIED = 1;
    VALUE_TYPE_FID = 2;
    VALUE_TYPE_PORT_CODE = 3;
    VALUE_TYPE_NUMBER = 4;
    VALUE_TYPE_STRING = 5;
  }

  optional string comment = 4;
}

message PriceContainer {
  // Prices in micros (millionths of a unit of currency)
  optional int64 price_20 = 14;
  optional int64 price_40 = 15;
  optional int64 price_40_hc = 16;
  optional int64 price_45_hc = 17;
}

message SearchRatesRequest {
  oneof id {
    SearchRateQuery query = 1;
  }
}

message SearchRatesResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
  repeated RateItem rate_items = 2;
}

message SearchRateGroupsRequest {
  SearchRateQuery query = 1;
}

message SearchRateGroupsResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
  repeated RateGroup rate_groups = 2;
}

enum DataSource {
  DATA_SOURCE_INVALID = 0;
  // Default data source.
  DATA_SOURCE_AUTO = 1;
  // Deprecated - use to be the PIE AI Parser, now it's been renamed to DATA_SOURCE_AI_PARSER
  DATA_SOURCE_FPS_PIE = 2 [deprecated = true];
  // Depraecated - use to be the FPS PPS Parser, now it's been renamed to DATA_SOURCE_PPS
  DATA_SOURCE_FPS_PPS = 3 [deprecated = true];
  // Data source comes from AI parsers in PIE.
  DATA_SOURCE_AI_PARSER = 4;
  // Data source comes from PPS python parsers.
  DATA_SOURCE_PPS = 5;
}

message SearchRateQuery {
  // Time of rate validity, UTC epoch seconds
  int64 valid_from_time = 1;
  int64 valid_to_time = 2;

  // Using the rate state at a given instance time, UTC epoch seconds
  optional int64 instance_time = 3;

  optional DataSource data_source = 4;

  optional RouteFilter route_filter = 5;
  optional QueryFilter contract_filter = 6;
  optional QueryFilter carrier_filter = 7;
  optional QueryFilter client_filter = 8;
  optional QueryFilter service_string_filter = 9;
}

// Query for column values.
// Ex: Asking for all nac (client) rates would require include_null to be false and include_non_null to be true.
message QueryFilter {
  bool include_null = 1;
  // if include_non_null is false, then the include_specific list is ignored
  // if include_non_null is true, then an empty include_specific list means include all non_null
  // if include_non_null is true and include_specific is not empty,
  //    then only query for values that are in include_specific
  bool include_non_null = 2;
  // query for specific values
  repeated QueryProperty include_specific = 3;
}

message RouteFilter {
  // absence of this property means there will be no filter applied on origin
  optional QueryProperty origin = 1;
  // absence of this property means there will be no filter applied on destination
  optional QueryProperty destination = 2;
}

message UpsertSurchargeInclusionsRequest {
  repeated SurchargeInclusion surcharge_inclusion = 1;
}

message UpsertSurchargeInclusionsResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
}

message UpsertSurchargeRateItemsRequest {
  repeated SurchargeRateItem surcharge_rate_item = 1;
}

message UpsertSurchargeRateItemsResponse {
  enum RequestResult {
    REQUEST_RESULT_INVALID = 0;
    REQUEST_RESULT_OK = 1;
    REQUEST_RESULT_FAIL = 2;
  }

  RequestResult result = 1;
}
