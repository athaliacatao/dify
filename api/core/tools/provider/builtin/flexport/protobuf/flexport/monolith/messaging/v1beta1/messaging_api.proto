// TEAM: emerald

syntax = "proto3";

package flexport.monolith.messaging.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "MessagingApiProto";
option java_package = "com.flexport.monolith.messaging.v1beta1";
option ruby_package = "Flexport::Monolith::Messaging::V1Beta1";

import "flexport/monolith/messaging/v1beta1/message.proto";
import "flexport/monolith/messaging/v1beta1/message_change.proto";
import "flexport/monolith/messaging/v1beta1/message_query.proto";

// This is the API for services to interact with Messaging.
// Production readiness: https://docs.google.com/document/d/1czU07Han9W-h3ZUlmnBalPf-8Mw3MzFNXxGLsISicxk
// PLEASE read API developer guide: https://flexport.atlassian.net/wiki/spaces/EN/pages/2252407401/Messaging+API+Developer+Guide
service MessagingAPI {
  // Create a message.
  rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse);
  // Update a message.
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse);
  // Delete a message.
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
  // Get a message.
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse);
  // List messages.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);
}

message CreateMessageRequest {
  // namespaces must be registered in app/services/messaging/application_registry.rb
  string application_namespace = 1;
  // Your change data.
  MessageCreate message_create = 2;
}

message CreateMessageResponse {
  // The fid of created message.
  string fid = 1;
}

message UpdateMessageRequest {
  // namespaces must be registered in app/services/messaging/application_registry.rb
  string application_namespace = 1;
  // Target message FID
  string fid = 2;
  // Audit who did the change
  string updated_by_fid = 3;
  // Your change data.
  MessageUpdate message_update = 4;
}

message UpdateMessageResponse {}

message DeleteMessageRequest {
  // namespaces must be registered in app/services/messaging/application_registry.rb
  string application_namespace = 1;
  // Target message FID
  string fid = 2;
  // Audit who did the change
  string deleted_by_fid = 3;
}

message DeleteMessageResponse {}

message GetMessageRequest {
  // namespaces must be registered in app/services/messaging/application_registry.rb
  string application_namespace = 1;
  // Target message FID
  string fid = 2;
}

message GetMessageResponse {
  Message message = 1;
}

message ListMessagesRequest {
  // namespaces must be registered in app/services/messaging/application_registry.rb
  string application_namespace = 1;
  // Query criteria.
  MessageQuery message_query = 2;
  // Permission filter of viewable messages. Mandatory if your namespace enabled visibility plugin.
  VisibilityFilter visibility_filter = 3;
  // Max page size is 1000. If 0, the server may decide any page size (implementation detail: now using 1000).
  int32 page_size = 4;
  // For first page, leave it empty. For next page, pass next_page_token of previous page response to it.
  string page_token = 5;
}

message ListMessagesResponse {
  // The list.
  repeated Message messages = 1;
  // For getting the next page, use it as the next request's page_token field.
  // Present if there is a next page.
  // Empty if this is the last page.
  string next_page_token = 2;
}
