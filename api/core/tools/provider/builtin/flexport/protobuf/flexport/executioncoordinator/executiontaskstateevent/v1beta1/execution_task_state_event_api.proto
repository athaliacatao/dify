// TEAM: forwarding_platform

syntax = "proto3";

package flexport.executioncoordinator.executiontaskstateevent.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "ExecutionTaskStateEventApiProto";
option java_package = "com.flexport.executioncoordinator.executiontaskstateevent.v1beta1";
option ruby_package = "Flexport::ExecutionCoordinator::ExecutionTaskStateEvent::V1Beta1";

import "flexport/executioncoordinator/executiontaskstateevent/v1/execution_task_state_event.proto";
import "flexport/executioncoordinator/executiontaskstateevent/v1beta1/query_filters.proto";
import "flexport/executioncoordinator/types/query/v1/distinct_on.proto";
import "flexport/executioncoordinator/types/query/v1/filters.proto";
import "flexport/executioncoordinator/types/query/v1/order_by.proto";
import "flexport/executioncoordinator/types/query/v1/page_request.proto";

// This file: http://go/etse-api-proto.
//
// An API for reading ExecutionTaskStateEvents.
// - See execution_task_state_event.proto for entity details.
// - ExecutionTaskStateEvents cannot be written using gRPC. The ExecutionCoordinator just persists
//   the events emitted on the execution_task_state Kinesis topic. All events are immutable.
//
// This API is in beta. Query expressiveness is limited and performance is not tuned.
// Please ping #forwarding-platform. We can extend it and load test it to support your use case.
service ExecutionTaskStateEventAPI {
  // Retrieves ExecutionTaskStateEvents for a provided query.
  rpc ListExecutionTaskStateEvents(ListExecutionTaskStateEventsRequest) returns (ListExecutionTaskStateEventsResponse);
}

// The request for ListExecutionTaskStateEvents.
message ListExecutionTaskStateEventsRequest {
  //
  // The arguments used for paging. Either page_request.first or page_request.last will be used as the limit.
  flexport.executioncoordinator.types.query.v1.PageRequest page_request = 12;
  //
  // All filters are "ANDed" together.
  flexport.executioncoordinator.types.query.v1.TimestampFilter processed_time = 3;
  flexport.executioncoordinator.types.query.v1.StringFilter execution_task_fid = 7;
  flexport.executioncoordinator.types.query.v1.StringFilter execution_order_fid = 8;
  flexport.executioncoordinator.types.query.v1.StringFilter shipment_fid = 13;
  // NOTE(ayoung): Not implemented as of July 2021.
  flexport.executioncoordinator.types.query.v1.StringFilter place_fid = 16;
  flexport.executioncoordinator.types.query.v1.StringFilter details_case = 9;
  flexport.executioncoordinator.types.query.v1.StringFilter container_fid = 5;
  flexport.executioncoordinator.types.query.v1.StringFilter cargo_fid = 17;
  flexport.executioncoordinator.types.query.v1.StringFilter route_shape_leg_fid = 18;
  // Filter on the entry point that sourced the event.
  // Currently this is only accurate for events created after 2021-06-16.
  flexport.executioncoordinator.types.query.v1.StringFilter entry_point = 15;
  //
  // Filter more specific details on an ExecutionTaskStateEvents.
  // Only for queries on a single entity identifier (ExecutionOrder, ExecutionTask, or shipment).
  ExecutionTaskStateEventDetailsFilter details = 14;
  //
  // Reserve numbers 10 and 11 for dropped fields order_by and distinct_on
  // which are replaced by order_by_filter and distinct_on_filter.
  // flexport.executioncoordinator.types.query.v1.OrderBy order_by = 10 [deprecated = true];
  // flexport.executioncoordinator.types.query.v1.DistinctOn distinct_on = 11 [deprecated = true];
  //
  // The order of the results supports a combination of columns. Defaults to ORDER_BY_PROCESSED_TIME_ASC order.
  repeated flexport.executioncoordinator.types.query.v1.OrderBy order_by_filter = 21;
  //
  // A distinct on clause supports a combination of columns. Behaves like PostgreSQL DISTINCT ON. Default is none.
  // Warning: This is an experimental feature. Ping #forwarding-platform if you have a use case.
  repeated flexport.executioncoordinator.types.query.v1.DistinctOn distinct_on_filter = 22;
  //
  // BELOW FIELDS APPLY TO REJECTED EVENTS ONLY:
  // Filter more specific rejected reasons on an rejected ExecutionTaskStateEvents.
  // Only applied when is_rejected is set to be true.
  flexport.executioncoordinator.types.query.v1.StringFilter rejected_reason = 19;
  //
  // Whether to query execution tasks using the taskStateEventRejectedQueryService.
  // Defaults to false, which will use taskStateEventQueryService.
  bool is_rejected = 20;
}

// The response for ListExecutionTaskStateEvents.
message ListExecutionTaskStateEventsResponse {
  repeated flexport.executioncoordinator.executiontaskstateevent.v1.ExecutionTaskStateEvent execution_task_state_events = 1;
}
