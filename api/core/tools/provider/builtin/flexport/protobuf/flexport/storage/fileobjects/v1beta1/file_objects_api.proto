// TEAM: document_intelligence

syntax = "proto3";

package flexport.storage.fileobjects.v1beta1;

import "google/protobuf/struct.proto";

option java_multiple_files = true;
option java_outer_classname = "FileObjectsApiProto";
option java_package = "com.flexport.storage.fileobjects.v1beta1";
option ruby_package = "Flexport::Storage::FileObjects::V1Beta1";

// Consider using the google wrapper types for future message fields that are
// optional. You'll also need to add this to the BUILD file once it gets used
// import "google/protobuf/wrappers.proto";

// CRUD operations exposed by the Storage Service.
service FileObjectsAPI {
  // Request a signed token to get permission to upload or download.
  rpc GetSignedToken(GetSignedTokenRequest) returns (GetSignedTokenResponse);
  // Request a signed URL to upload the specified file.
  rpc GetUploadUrl(GetUploadUrlRequest) returns (GetUploadUrlResponse);
  // Request a signed URL to download the specified file.
  rpc GetDownloadUrl(GetDownloadUrlRequest) returns (GetDownloadUrlResponse);
  // Request a file object with a signed URL to download the specified file.
  rpc GetFileObject(GetFileObjectRequest) returns (GetFileObjectResponse);
  // Do not use this without explicit permission from Andy Hamon.
  rpc GetFileMetadataInternalOnlyDoNotUseOrYouWillBeFired(GetFileMetadataInternalOnlyDoNotUseOrYouWillBeFiredRequest) returns (GetFileMetadataInternalOnlyDoNotUseOrYouWillBeFiredResponse);
  // Obtain the S3 details for a File Object.
  rpc GetStorageKey(GetStorageKeyRequest) returns (GetStorageKeyResponse);
  // Copy over a file to Storage Service S3 bucket.
  rpc CopyFile(CopyFileRequest) returns (CopyFileResponse);
  // Search for file objects based on a related entity FID
  rpc ListFileObjectsByReferencedEntity(ListFileObjectsByReferencedEntityRequest) returns (ListFileObjectsByReferencedEntityResponse);
  // Request a signed URL to upload the specified file.
  rpc MarkUploadCompleted(MarkUploadCompletedRequest) returns (MarkUploadCompletedResponse);
}

// namespace, producer_fid, and producer_type are required
message GetSignedTokenRequest {
  string namespace = 1;
  string producer_fid = 2;
  string producer_type = 3;
  bool can_upload = 4;
  bool can_download = 5;
}

message GetSignedTokenResponse {
  string token = 1;
}

// All arguments are required
message GetUploadUrlRequest {
  string filename = 1;
  string file_content_type = 2;
  uint64 file_size_in_bytes = 3;
  uint64 expires_in_seconds = 4;
  string namespace = 5;
  string producer_fid = 6;
  string producer_type = 7;
}

// We'll also want to have a way to pass back an error response
message GetUploadUrlResponse {
  string upload_url = 1;
  string file_object_fid = 2;
}

message GetDownloadUrlRequest {
  // required
  string file_object_fid = 3;
  // required, max is 7 days
  uint64 expires_in_seconds = 4;
  // Optional:
  // - true means the file will open on the page in frontend
  // - false means it will auto download
  bool inline = 5;
  // Optional:
  // Default is the retrieved file_object's file name
  string file_name = 6;
}

// We'll also want to have a way to pass back an error response
message GetDownloadUrlResponse {
  string download_url = 1;
}

// All arguments are required.
message GetFileObjectRequest {
  string file_object_fid = 1;
  uint64 expires_in_seconds = 2;
}

// The file object.
message GetFileObjectResponse {
  string file_object_fid = 1;
  string download_url = 2;
  string filename = 3;
  string file_content_type = 4;
  uint64 file_size_in_bytes = 5;
  string producer_fid = 6;
}

// All arguments are required.
message GetStorageKeyRequest {
  string file_object_fid = 1;
}

// Contains the S3 key for the file object.
message GetStorageKeyResponse {
  string storage_key = 1;
  string bucket = 2;
}

// All arguments are required
message CopyFileRequest {
  string filename = 1;
  string file_content_type = 2;
  uint64 file_size_in_bytes = 3;
  string namespace = 5;
  string producer_fid = 6;
  string producer_type = 7;
  string source_object = 8;
}

message CopyFileResponse {
  string file_object_fid = 1;
  string error = 2;
}

message GetFileMetadataInternalOnlyDoNotUseOrYouWillBeFiredRequest {
  string file_object_fid = 1;
}

message GetFileMetadataInternalOnlyDoNotUseOrYouWillBeFiredResponse {
  string file_object_fid = 1;
  string filename = 2;
  string file_content_type = 3;
  uint64 file_size_in_bytes = 4;
  google.protobuf.Struct combined_tags_and_metadata = 5;
  string storage_namespace = 6;
}

message ListFileObjectsByReferencedEntityRequest {
  // Required. For the time being, the only supported FID type is
  // flx::core:shipment
  string referenced_entity_fid = 1;
}

message FileObjectMetadata {
  string file_object_fid = 1;
  string filename = 2;
  string file_content_type = 3;
  uint64 file_size_in_bytes = 4;
  google.protobuf.Struct tags = 5;
  string storage_namespace = 6;
  string producer_fid = 7;
}

message ListFileObjectsByReferencedEntityResponse {
  repeated FileObjectMetadata results = 1;
}

// All arguments are required.
message MarkUploadCompletedRequest {
  string file_object_fid = 1;
}

// Empty intentionally, this is functionally a `void` return
message MarkUploadCompletedResponse {}
