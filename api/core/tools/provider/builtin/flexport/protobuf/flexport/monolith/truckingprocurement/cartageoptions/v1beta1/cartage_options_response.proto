// TEAM: trucking_pricing_rate_management

syntax = "proto3";

package flexport.monolith.truckingprocurement.cartageoptions.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "CartageOptionsResponse";
option java_package = "com.flexport.monolith.truckingprocurement.cartageoptions.v1beta1";
option ruby_package = "Flexport::Monolith::TruckingProcurement::CartageOptions::V1Beta1";

message GetCartageOptionsResponse {
  repeated Rate ordered_list_of_options = 1;
}

message Rate {
  oneof rate {
    CarrierRate success_result = 1;
    P44Rate success_p44_result = 2;
    NoRate failure_result = 3;
  }
  // Can be used to look up log for the request using: TruckingProcurement::Rates::FindRateLog.where(uuid: internal_response_uuid)
  string internal_response_uuid = 4;
}

message CarrierRate {
  repeated LineItem line_items = 1;
  string trucking_carrier_fid = 2;
  string carrier_freq_percentage = 3; // This is the frequency of how often this carrier gets assigned for this origin/destination pair
}

message P44Rate {
  repeated P44LineItem line_items = 1;
}

message LineItem {
  Amount amount = 1;
  string charge_group_fid = 2;
  string procurement_contract_fid = 3;
}

message P44LineItem {
  Amount amount = 1;
  string charge_group_fid = 2; // Cartage
  string type = 3; // Slow or Fast
  uint64 transit_time_in_minutes = 4;
}

message Amount {
  int32 usd_amount_micros = 1;
  int32 native_amount_micros = 2;
  string native_currency_code = 3;
  string conversion_date = 4; // Will use exchange_rate_api.proto to get the exchange rate
}

message NoRate {
  RateMatchFailReason reason = 1;
}

enum RateMatchFailReason {
  RATE_MATCH_FAIL_REASON_INVALID = 0;
  RATE_MATCH_FAIL_REASON_ADDRESS_INVALID = 1;
  RATE_MATCH_FAIL_REASON_ZONE_MAPPING_FAILED = 2;
  RATE_MATCH_FAIL_REASON_NO_RATE_IN_DB = 3;
  RATE_MATCH_FAIL_REASON_ERROR = 4;
}
