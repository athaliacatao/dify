// TEAM: service_catalog

syntax = "proto3";

package flexport.commerce.merchandising.catalog.data_authority.offering.v1beta1;

import "flexport/catalog/rate/v1/rate.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.flexport.commerce.merchandising.catalog.dataauthority.offering.v1beta1";
option ruby_package = "Flexport::Commerce::Merchandising::Catalog::DataAuthority::Offering::V1Beta1";

// The rates with eligibility and charges.
//
// For the same offering, there could be one or multiple rates based on segment/tier.
// For restricted offerings, certain conditions must be met to be eligible for the rate.
message PricingPolicy {
  // The exclusive criteria for pricing policy in an offering.
  // e.g. NAC (client specific) or SRT (FLEX-ID specific)
  EligibilityFormula eligibility = 1;
  // The non-overlapping pricing schedules across time span.
  repeated PricingSchedule schedules = 2;
}

// The rates under a specific time span.
//
// In logistics, the rates are usually time aware with a given refresh frequency.
// The [cost, markup, sell_rate] is under migration:
// - End goal: [cost, sell_rate] (no markup)
// - Current state: [cost, markup (optional)] (when markup is missing, it'll be dynamically calculated)
message PricingSchedule {
  // The inclusive starting time of the schedule.
  google.protobuf.Timestamp effective_time = 1;
  // The exclusive ending time of the schedule.
  google.protobuf.Timestamp expiration_time = 2;

  // Internal cost (historically known as ICC) for the rate.
  repeated Cost costs = 3;
  // Deprecated. Historically used as a margin on top of the cost.
  repeated Markup markups = 4;
  // The default list price (also referred as MSRP, macro price).
  repeated SellRate sell_rates = 5;

  // The offering restriction bound to pricing schedule.
  optional Restriction restriction = 6;

  // Schedule source metadata for traceability.
  // This is used for data sync with monolith pricing window structure.
  optional string source_id = 7;
  // Schedule creation timestamp.
  // Internally used for calculating schedule override.
  optional google.protobuf.Timestamp created_at = 8;
}

// The offering restriction bound to pricing schedule.
message Restriction {
  optional double min_distance_km = 1;
  optional double max_distance_km = 2;
  optional double min_volume_cbm = 3;
  optional double max_volume_cbm = 4;
  optional double min_weight_kg = 5;
  optional double max_weight_kg = 6;
  optional int64 min_container_count_fourty_five_ft_hc = 7;
  optional int64 max_container_count_fourty_five_ft_hc = 8;
  optional int64 min_container_count_fourty_ft = 9;
  optional int64 max_container_count_fourty_ft = 10;
  optional int64 min_container_count_fourty_ft_hc = 11;
  optional int64 max_container_count_fourty_ft_hc = 12;
  optional int64 min_container_count_twenty_ft = 13;
  optional int64 max_container_count_twenty_ft = 14;
}

// The internal adjusted cost.
//
// The value is mostly consumed by downstream for accounting purpose.
// Note that the cost is different from the procurement cost.
message Cost {
  // The charge type. e.g. flx::catalog:charge_type:ocean_fcl_base
  string charge_type_fid = 1;
  // The cost rate for the charge type.
  Rate rate = 2;
  // The source metadata of the cost for auditability.
  string source = 3;
  // The id of the cost source for auditability.
  string source_id = 4;
}

// The legacy margin on top of the cost.
//
// The markup is on deprecation in favor of directly pushing the sell rate.
message Markup {
  // The charge type. e.g. flx::catalog:charge_type:ocean_fcl_base
  string charge_type_fid = 1;
  // The markup rate for the charge type.
  Rate rate = 2;
  // The source metadata of the markup for auditability.
  string source = 3;
  // The id of the markup source for auditability.
  string source_id = 4;
}

// The sell rate (also referred as MSRP, macro price).
//
// Note that the value might be further adjusted at evaluation time.
message SellRate {
  // The charge type. e.g. flx::catalog:charge_type:ocean_fcl_base
  string charge_type_fid = 1;
  // The sell rate for the charge type.
  Rate rate = 2;
  // The source metadata of the sell rate for auditability.
  string source = 3;
  // The id of the sell rate source for auditability.
  string source_id = 4;
}

// The rate represents the unit price for a charge.
//
// The rates are evaluated against given parameters to produce the final price.
message Rate {
  // The rate type. For legacy rate json, it's prefixed with `LEGACY_AIR_RATE`.
  string type = 1;
  // The calculation formula for the rate.
  RateFormula formula = 2;
}

// The formula which consumes a set of parameters to produce the final price.
message RateFormula {
  oneof formula {
    // Legacy rate formula is serialized as a json string.
    flexport.catalog.rate.v1.RateDto legacy_rate = 1;
    // Formula expression = 2;
  }
}

// The expression to evaluate whether a rate is eligible for a given context.
//
// The eligibility is intended to be a differentiator for conditional rates in an offering.
message EligibilityFormula {
  oneof formula {
    // The formula will be expanded for complex use cases,
    // the first version assumes all conditions are joined with "AND" on all the key-value pairs given.
    // Example for FAK offering:
    // {
    //   "client_segment": "smb"
    // }
    // Example for NAC offering:
    // {
    //   "client_fid": "flx::core:client:dbid/12345"
    // }
    google.protobuf.Struct formula_json = 1;
    // Formula expression = 2;
  }
}
