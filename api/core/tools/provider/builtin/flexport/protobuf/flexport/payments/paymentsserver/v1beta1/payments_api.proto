// TEAM: finance

syntax = "proto3";

package flexport.payments.paymentsserver.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "PaymentsApiProto";
option java_package = "com.flexport.payments.paymentsserver.v1beta1";
option ruby_package = "Flexport::Payments::PaymentsServer::V1Beta1";

import "flexport/payments/creditmemo/v1beta1/credit_memo.proto";
import "flexport/payments/invoice/draft/v1beta1/invoice.proto";
import "flexport/payments/invoice/v1beta1/invoice.proto";
import "flexport/payments/payment/draft/v1beta1/payment.proto";
import "flexport/payments/payment/v1beta1/payment.proto";
import "flexport/payments/paymentmethod/v1beta1/payment_method.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// The protocol for all payments api.
service PaymentsAPI {
  // Share an invoice to a client.
  rpc InvoiceShare(InvoiceShareRequest) returns (InvoiceShareResponse);
  // Credit a shared invoice.
  rpc CreditInvoice(CreditInvoiceRequest) returns (CreditInvoiceResponse);
  // Void a shared invoice.
  rpc VoidInvoice(VoidInvoiceRequest) returns (VoidInvoiceResponse);
  // Get a payment method.
  rpc GetPaymentMethods(GetPaymentMethodsRequest) returns (GetPaymentMethodsResponse);
  // Create a payment method.
  rpc CreatePaymentMethod(CreatePaymentMethodRequest) returns (CreatePaymentMethodResponse);
  // Update the nickname for a payment method.
  rpc UpdatePaymentMethodNickname(UpdatePaymentMethodNicknameRequest) returns (UpdatePaymentMethodNicknameResponse);
  // Make a payment method as preferred method.
  rpc MakePaymentMethodPreferred(MakePaymentMethodPreferredRequest) returns (MakePaymentMethodPreferredResponse);
  // Agree to terms for a payment method.
  rpc PaymentMethodAgreeToTerms(PaymentMethodAgreeToTermsRequest) returns (PaymentMethodAgreeToTermsResponse);
  // Verify a payment method.
  rpc VerifyPaymentMethod(VerifyPaymentMethodRequest) returns (VerifyPaymentMethodResponse);
  // Destroy a payment method.
  rpc DestroyPaymentMethod(DestroyPaymentMethodRequest) returns (DestroyPaymentMethodResponse);
  // Apply a payment on an invoice.
  rpc ApplyPayment(ApplyPaymentRequest) returns (ApplyPaymentResponse);
  // Update a payment.
  rpc UpdatePayment(UpdatePaymentRequest) returns (UpdatePaymentResponse);
  // Mark a payment failed.
  rpc MarkPaymentFailed(MarkPaymentFailedRequest) returns (MarkPaymentFailedResponse);
  // Create a payment event.
  rpc CreatePaymentEvent(CreatePaymentEventRequest) returns (CreatePaymentEventResponse);
  // Destroy payments on an invoice.
  rpc DestroyPayments(DestroyPaymentsRequest) returns (DestroyPaymentsResponse);
  // Get Credit Memo.
  rpc GetCreditMemos(GetCreditMemosRequest) returns (GetCreditMemosResponse);
  // Get payments.
  rpc GetPayments(GetPaymentsRequest) returns (GetPaymentsResponse);
  // Get invoices.
  rpc GetInvoices(GetInvoicesRequest) returns (GetInvoicesResponse);
}

message GetCreditMemosRequest {
  flexport.payments.creditmemo.v1beta1.CreditMemoFilterDto filters = 1;
  google.protobuf.Struct sort = 2;
}

message GetCreditMemosResponse {
  repeated flexport.payments.creditmemo.v1beta1.CreditMemoDto credit_memos = 1;
}

message GetPaymentsRequest {
  flexport.payments.payment.v1beta1.PaymentFilterDto filters = 1;
  google.protobuf.Struct sort = 2;
}

message GetPaymentsResponse {
  repeated flexport.payments.payment.draft.v1beta1.PaymentDto payments = 1;
}

message GetInvoicesRequest {
  flexport.payments.invoice.v1beta1.InvoiceFilterDto filters = 1;
  google.protobuf.Struct sort = 2;
}

message GetInvoicesResponse {
  repeated flexport.payments.invoice.draft.v1beta1.InvoiceDto invoices = 1;
}

message ApplyPaymentRequest {
  google.protobuf.Int32Value payment_method_id = 1;
  google.protobuf.Int32Value sender_id = 2;
  google.protobuf.Int32Value broker_id = 3;
  google.protobuf.Timestamp issued_at_time = 4;
  repeated google.protobuf.Struct invoice_id_charges = 5;
  repeated int64 document_ids = 6;
}

message ApplyPaymentResponse {
  flexport.payments.payment.draft.v1beta1.PaymentDto payment = 1;
}

message UpdatePaymentRequest {
  int32 id = 1;
  google.protobuf.Struct params = 2;
}

message UpdatePaymentResponse {}

message MarkPaymentFailedRequest {
  int32 id = 1;
}

message MarkPaymentFailedResponse {}

message DestroyPaymentsRequest {
  int32 draft_invoice_id = 1;
}

message DestroyPaymentsResponse {
  repeated int32 ids = 1;
}

message CreatePaymentEventRequest {
  int32 id = 1;
  google.protobuf.Struct event_params = 2;
}

message CreatePaymentEventResponse {}

message InvoiceShareRequest {
  flexport.payments.invoice.draft.v1beta1.Invoice draft_invoice = 1;
  int32 shared_by_user_id = 2;
}

message InvoiceShareResponse {
  // For now, just return the ID. Will build the response DTO in the invoice read gRPC ticket.
  int32 id = 1;
}

message CreditInvoiceRequest {
  int32 finance_invoice_id = 1;
  int32 draft_invoice_id = 2;
  int64 amount_micros = 3;
  string currency_code = 4;
  string credit_reason = 5;
  int32 user_id = 6;
  int32 category = 7;
  int32 invoice_item_id = 8;
}

message CreditInvoiceResponse {}

message VoidInvoiceRequest {
  int32 finance_invoice_id = 1;
  int32 draft_invoice_id = 2;
  int32 user_id = 3;
}

message VoidInvoiceResponse {}

message GetPaymentMethodsRequest {
  flexport.payments.paymentmethod.v1beta1.PaymentMethodFilterDto filters = 1;
  google.protobuf.Struct sort = 2;
}

message GetPaymentMethodsResponse {
  repeated flexport.payments.paymentmethod.v1beta1.PaymentMethodDto payment_methods = 1;
}

message CreatePaymentMethodRequest {
  int32 user_id = 1;
  int32 client_id = 2;
  google.protobuf.Struct params = 3;
  // stripe id is temporary when we communicate with stripe via core
  google.protobuf.StringValue stripe_customer_id = 4;
}

message CreatePaymentMethodResponse {
  flexport.payments.paymentmethod.v1beta1.PaymentMethodDto payment_method = 1;
}

message UpdatePaymentMethodNicknameRequest {
  int32 id = 1;
  string nickname = 2;
}

message UpdatePaymentMethodNicknameResponse {}

message MakePaymentMethodPreferredRequest {
  int32 id = 1;
}

message MakePaymentMethodPreferredResponse {}

message PaymentMethodAgreeToTermsRequest {
  int32 id = 1;
  int32 user_id = 2;
  int32 terms_doc_id = 3;
  int32 terms_and_conditions_agreement_version = 4;
}

message PaymentMethodAgreeToTermsResponse {}

message VerifyPaymentMethodRequest {
  int32 id = 1;
  google.protobuf.Int32Value deposit_amount_1 = 2;
  google.protobuf.Int32Value deposit_amount_2 = 3;
}

message VerifyPaymentMethodResponse {
  flexport.payments.paymentmethod.v1beta1.PaymentMethodDto payment_method = 1;
}

message DestroyPaymentMethodRequest {
  int32 id = 1;
}

message DestroyPaymentMethodResponse {}
