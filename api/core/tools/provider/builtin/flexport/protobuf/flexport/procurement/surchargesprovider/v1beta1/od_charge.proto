// TEAM: procurement

syntax = "proto3";

package flexport.procurement.surchargesprovider.v1beta1;

import "flexport/os/v1/types/walltimedateordatetime/v1/wall_time_date_or_date_time.proto";

option java_multiple_files = true;
option java_outer_classname = "OdChargeProto";
option java_package = "com.flexport.procurement.surchargesprovider.v1beta1";
option ruby_package = "Flexport::Procurement::SurchargesProvider::V1Beta1";

// Origin/Destination charge.
message ODCharge {
  string fid = 1;
  flexport.os.v1.types.walltimedateordatetime.v1.WallTimeDateOrDateTime effective_from = 2;
  flexport.os.v1.types.walltimedateordatetime.v1.WallTimeDateOrDateTime effective_to = 3;
  flexport.os.v1.types.walltimedateordatetime.v1.WallTimeDateOrDateTime created_at = 4;
  Mode mode = 5;
  string charge_type = 6;
  string other_info = 7;
  string partner_company_fid = 8;
  string carrier_fid = 9;
  string rate_price_micros = 10;
  string currency_code = 11;
  RatePerUnit rate_per_unit = 12;
  repeated RateBreak rate_breaks = 13;
  string maximum_charge_micros = 14;
  string minimum_charge_micros = 15;
  string port_fid = 16;
  string country_code = 17;
  AppliesAt applies_at = 18;
  string charge_code_fid = 19;
}

// Units that a rate is charged at.
enum RatePerUnit {
  RATE_PER_UNIT_INVALID = 0;
  RATE_PER_UNIT_PER_KG = 1;
  RATE_PER_UNIT_PER_BILL = 2;
  RATE_PER_UNIT_PER_CBM = 3;
  RATE_PER_UNIT_PER_CONTAINER = 4;
  RATE_PER_UNIT_TOTAL = 5;
  RATE_PER_UNIT_PER_PALLET = 6;
  RATE_PER_UNIT_PER_PERCENT_OF_TOTAL = 7;
  RATE_PER_UNIT_PER_GW_KG = 8;
  RATE_PER_UNIT_PER_PALLET_PER_DAY = 9;
  RATE_PER_UNIT_PER_PIECE = 10;
}

// Rate breaks.
message RateBreak {
  int32 break_amount = 1;
  BreakUnit break_unit = 2;
  string rate_micros = 3;
}

// Units that a rate could break on.
enum BreakUnit {
  BREAK_UNIT_INVALID = 0;
  BREAK_UNIT_CBM = 1;
  BREAK_UNIT_FOOT = 2;
  BREAK_UNIT_FOOT_HC = 3;
  BREAK_UNIT_KG = 4;
}

// Where the charge applies at.
enum AppliesAt {
  APPLIES_AT_INVALID = 0;
  APPLIES_AT_ORIGIN = 1;
  APPLIES_AT_DESTINATION = 2;
}

// Mode a charge is for.
enum Mode {
  MODE_INVALID = 0;
  MODE_AIR = 1;
  MODE_OCEAN = 2;
  MODE_TRUCKING = 3;
}
