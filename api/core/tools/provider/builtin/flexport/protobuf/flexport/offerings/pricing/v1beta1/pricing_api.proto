// TEAM: ocean_service_offerings

syntax = "proto3";

package flexport.offerings.pricing.v1beta1;

import "flexport/catalog/charge/v3/charge_api.proto";
import "flexport/catalog/rate/v1/rate.proto";
import "flexport/monolith/catalog/v1beta1/core_service.proto";
import "flexport/offerings/pricing/v1beta1/pricing.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option java_outer_classname = "PricingApiProto";
option java_package = "com.flexport.offerings.pricing.v1beta1";
option ruby_package = "Flexport::Offerings::Pricing::V1Beta1";

// A pricing rules querying service
service PricingAPI {
  // Get client specific pricing adjustment based on various attributes, e.g. client info and shipment info.
  rpc GetPricingAdjustment(GetPricingAdjustmentRequest) returns (GetPricingAdjustmentResponse);

  // Retrieves all OceanFCL pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetOceanFCLPricingRules(GetOceanFCLPricingRulesRequest) returns (GetOceanFCLPricingRulesResponse);

  // Retrieves all Air pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetAirPricingRules(GetAirPricingRulesRequest) returns (GetAirPricingRulesResponse);

  // Retrieves all Air list pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetAirListPricingRules(GetAirListPricingRulesRequest) returns (GetAirListPricingRulesResponse);

  // Retrieves all Cartage list pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetCartageListPricingRules(GetCartageListPricingRulesRequest) returns (GetCartageListPricingRulesResponse);

  // Retrieves all OceanFCL list pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetOceanFCLListPricingRules(GetOceanFCLListPricingRulesRequest) returns (GetOceanFCLListPricingRulesResponse);

  // Retrieves all Drayage list pricing rules from the latest snapshot. Or from a specified snapshot.
  rpc GetDrayageListPricingRules(GetDrayageListPricingRulesRequest) returns (GetDrayageListPricingRulesResponse);

  // Retrieves List Price for a Cartage offering
  rpc BatchGetCartageOfferingsSellRates(BatchGetCartageOfferingsSellRatesRequest) returns (BatchGetCartageOfferingsSellRatesResponse);

  // Retrieves List Price for a Air offering
  rpc BatchGetAirOfferingsSellRates(BatchGetAirOfferingsSellRatesRequest) returns (BatchGetAirOfferingsSellRatesResponse);

  // Retrieves List Price for a Drayage offering
  rpc BatchGetDrayageOfferingsSellRates(BatchGetDrayageOfferingsSellRatesRequest) returns (BatchGetDrayageOfferingsSellRatesResponse);

  // Retrieves List Price for a OceanFCL offering
  rpc BatchGetOceanFCLOfferingsSellRates(BatchGetOceanFCLOfferingsSellRatesRequest) returns (BatchGetOceanFCLOfferingsSellRatesResponse);

  // Retrieves all client segments from the latest snapshot. Or from a specified snapshot.
  rpc GetClientSegments(GetClientSegmentsRequest) returns (GetClientSegmentsResponse);

  // Get the target OMDA markup from the latest data science model output for different freight types.
  // This is currently only supports quoting OMDA markups.
  rpc GetTargetOmdaMarkup(GetTargetOmdaMarkupRequest) returns (GetTargetOmdaMarkupResponse);
}

// Request message for get target omda markup rpc request.
// All fields are required unless labeled as optional.
message GetTargetOmdaMarkupRequest {
  // Unique identifier for the request, used for traceability.
  optional string request_id = 1;
  // Unique identifier for the quote, used for traceability. Only applicable for quoting OMDA markups.
  optional string quote_id = 2;
  // Method of freight shipment. Example: OceanFCL, Air, etc.
  FreightMethod freight_method = 3;
  // Fid of the client. For a guest client, provide the guest client FID flx::core:client:dbid/0.
  // If client_fid is not provided, a wildcard (missing client) DS rule will attempt matched
  optional string client_fid = 4;
  // Type of freight service
  FreightType freight_type = 5;
  // Origin port fid of the main freight shipment. Ex: flx::core:port:dbid/12345
  string origin_port_fid = 6;
  // Destination port fid of the main freight shipment. Ex: flx::core:port:dbid/12345
  string destination_port_fid = 7;
  // Air service tier for air freight. This is required only when freight_method is Air.
  optional AirServiceTier air_service_tier = 8;
  // The id of the shipment associated with the request
  optional string shipment_id = 9;
}

message GetTargetOmdaMarkupResponse {
  // The target OMDA markup percent for the given freight type.
  // If specified 0.11 means 11% markup. 0.0973 means 9.73% markup.
  // If not set, it means a target OMDA markup could not be found and default value (0.0) should be treated as null.
  // You may use the generated method has_target_omda_markup() -> boolean to determine whether this value has been set.
  optional double target_omda_markup = 1;
}

message GetPricingAdjustmentRequest {
  // Unique identifier for the pricing adjustment request, used for traceability.
  string request_id = 1;
  // e.g. 'Apple' Client object
  monolith.catalog.v1beta1.Client client = 2;
  // Optional field: includes all the fields needed for resolving the individual charge rates to a total charge.
  catalog.charge.v3.OrderAttributesForRateEvaluation order_attributes_for_rate_evaluation = 3;
  // Contains leg level offerings (not multi-modal offerings) and their associated charges.
  // e.g. Key is an Ocean FCL Offering from Shanghai to Seattle. Value is a list of charges associated with this offering.
  OfferingToChargesMap charges_per_offerings = 4;
}

message GetPricingAdjustmentResponse {
  // Unique identifier for the pricing adjustment request, used for traceability.
  string request_id = 1;
  // Map of offering id and updated charges. Only updated charges will be included.
  // Offering with no charge adjustment will not be included.
  // e.g. Key is offering id (12345) of Ocean FCL Offering from Shanghai to Seattle.
  // Value is a list of updated sell rate with guardrails, associated with this offering.
  map<string, ListOfSellRateWithGuardrail> charges_per_offering = 2;
  // e.g. A status with status code = OK, sub reason code is SUCCESS_ADJUSTED
  APIResponseStatus api_response_status = 3;
}

message GetOceanFCLPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetOceanFCLPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated OceanFCLPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

message GetAirPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetAirPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated AirPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

// GetCartageOfferingsSellRates API
message BatchGetCartageOfferingsSellRatesRequest {
  // An identifier for this request, only used for logging purposes. A random UUID generated by the client is recommended.
  string request_id = 1;
  repeated GetCartageOfferingsSellRatesRequest requests = 2;
}

message BatchGetCartageOfferingsSellRatesResponse {
  // A "version" of the data used to compute this response. This is only for logging purposes.
  string snapshot_id = 1;
  repeated GetCartageOfferingsSellRatesResponse responses = 2;
}

message GetCartageOfferingsSellRatesRequest {
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response. Must be unique among
  // all requests in the same API Batch request. A random UUID generated by the client or an increasing number are recommended.
  string identifier = 1;
  // Location of the cartage offering. i.e. "Flexport Amsterdam Warehouse"
  string address_fid = 2;
  // Charges in the cartage offering that are being requested to be priced. The key of the map should be the charge code. i.e. "Cartage Base"
  map<string, catalog.rate.v1.RateDto> charge_code_to_rates_map = 3;
  // Sell rate type requested. i.e. SELL_RATE_TYPE_LIST_PRICE to request the List Price of an offering.
  SellRateType requested_type = 4;
}

message GetCartageOfferingsSellRatesResponse {
  // Grpc status of each request within the Batch request
  google.rpc.Status status = 1;
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response.
  string identifier = 2;
  // Same map as the request but with all amounts priced.
  map<string, catalog.rate.v1.RateDto> charge_code_to_sell_rates_map = 3;
}

// GetAirOfferingsSellRates API
message BatchGetAirOfferingsSellRatesRequest {
  // An identifier for this request, only used for logging purposes. A random UUID generated by the client is recommended.
  string request_id = 1;
  repeated GetAirOfferingsSellRatesRequest requests = 2;
}

message BatchGetAirOfferingsSellRatesResponse {
  // A "version" of the data used to compute this response. This is only for logging purposes.
  string snapshot_id = 1;
  repeated GetAirOfferingsSellRatesResponse responses = 2;
}

message GetAirOfferingsSellRatesRequest {
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response. Must be unique among
  // all requests in the same API Batch request. A random UUID generated by the client or an increasing number are recommended.
  string identifier = 1;
  string origin_port_fid = 2;
  string destination_port_fid = 3;
  // Charges in the air offering that are being requested to be priced. The key of the map should be the charge code. i.e. "Air Base"
  map<string, catalog.rate.v1.RateDto> charge_code_to_rates_map = 4;
  // Sell rate type requested. i.e. SELL_RATE_TYPE_LIST_PRICE to request the List Price of an offering.
  SellRateType requested_type = 5;
}

message GetAirOfferingsSellRatesResponse {
  // Grpc status of each request within the Batch request
  google.rpc.Status status = 1;
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response.
  string identifier = 2;
  // Same map as the request but with all amounts priced.
  map<string, catalog.rate.v1.RateDto> charge_code_to_sell_rates_map = 3;
}

// GetDrayageOfferingsSellRates API
message BatchGetDrayageOfferingsSellRatesRequest {
  // An identifier for this request, only used for logging purposes. A random UUID generated by the client is recommended.
  string request_id = 1;
  repeated GetDrayageOfferingsSellRatesRequest requests = 2;
}

message BatchGetDrayageOfferingsSellRatesResponse {
  // A "version" of the data used to compute this response. This is only for logging purposes.
  string snapshot_id = 1;
  repeated GetDrayageOfferingsSellRatesResponse responses = 2;
}

message GetDrayageOfferingsSellRatesRequest {
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response. Must be unique among
  // all requests in the same API Batch request. A random UUID generated by the client or an increasing number are recommended.
  string identifier = 1;
  // Location of the Drayage offering. i.e. "Flexport Amsterdam Warehouse"
  string port_fid = 2;
  // Charges in the Drayage offering that are being requested to be priced. The key of the map should be the charge code. i.e. "Drayage Base"
  map<string, catalog.rate.v1.RateDto> charge_code_to_rates_map = 3;
  // Sell rate type requested. i.e. SELL_RATE_TYPE_LIST_PRICE to request the List Price of an offering.
  SellRateType requested_type = 4;
}

message GetDrayageOfferingsSellRatesResponse {
  // Grpc status of each request within the Batch request
  google.rpc.Status status = 1;
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response.
  string identifier = 2;
  // Same map as the request but with all amounts priced.
  map<string, catalog.rate.v1.RateDto> charge_code_to_sell_rates_map = 3;
}

// GetOceanFCLOfferingsSellRates API
message BatchGetOceanFCLOfferingsSellRatesRequest {
  // An identifier for this request, only used for logging purposes. A random UUID generated by the client is recommended.
  string request_id = 1;
  repeated GetOceanFCLOfferingsSellRatesRequest requests = 2;
}

message BatchGetOceanFCLOfferingsSellRatesResponse {
  // A "version" of the data used to compute this response. This is only for logging purposes.
  string snapshot_id = 1;
  repeated GetOceanFCLOfferingsSellRatesResponse responses = 2;
}

message GetOceanFCLOfferingsSellRatesRequest {
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response. Must be unique among
  // all requests in the same API Batch request. A random UUID generated by the client or an increasing number are recommended.
  string identifier = 1;
  string origin_port_fid = 2;
  string destination_port_fid = 3;
  // Charges in the OceanFCL offering that are being requested to be priced. The key of the map should be the charge code. i.e. "Ocean FCL Base"
  map<string, catalog.rate.v1.RateDto> charge_code_to_rates_map = 4;
  // Sell rate type requested. i.e. SELL_RATE_TYPE_LIST_PRICE to request the List Price of an offering.
  SellRateType requested_type = 5;
}

message GetOceanFCLOfferingsSellRatesResponse {
  // Grpc status of each request within the Batch request
  google.rpc.Status status = 1;
  // A unique identifier clients can use to map each request in the batch request to a response in the batch response.
  string identifier = 2;
  // Same map as the request but with all amounts priced.
  map<string, catalog.rate.v1.RateDto> charge_code_to_sell_rates_map = 3;
}

message GetAirListPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetAirListPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated AirListPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

message GetCartageListPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetCartageListPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated CartageListPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

message GetOceanFCLListPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetOceanFCLListPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated OceanFCLListPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

message GetDrayageListPricingRulesRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the price rules to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  // The maximum number of rules to be returned. Used for Offset Pagination.
  // Max value allowed is 50,000. Default value is 30,000
  optional int32 limit = 4;
}

message GetDrayageListPricingRulesResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated DrayageListPricingRule pricing_rules = 2;
  // If true, there are no more pricing rules to be read.
  bool is_end_of_pagination = 3;
}

message GetClientSegmentsRequest {
  // Used only for logging purposes. A random UUID is recommended.
  string request_id = 1;
  // Snapshot id of the S3 file to read. If not provided will use the latest snapshot id that exists.
  optional string snapshot_id = 2;
  // Used for Offset Pagination. The number of records to skip.
  // Default value is 0
  optional int32 offset = 3;
  optional int32 limit = 4;
}

message GetClientSegmentsResponse {
  // Id of the snapshot where the data was read from.
  string snapshot_id = 1;
  repeated ClientSegment client_segments = 2;
  // If true, there are no more client segment data to be read.
  bool is_end_of_pagination = 3;
}
