// TEAM: kingsroad

syntax = "proto3";

package flexport.originops.grpcserver.datachecker.v1beta1;

import "flexport/originops/grpcserver/datachecker/v1beta1/data_checker.proto";

option java_multiple_files = true;
option java_outer_classname = "DataCheckerApiProto";
option java_package = "com.flexport.originops.grpcserver.datachecker.v1beta1";
option ruby_package = "Flexport::OriginOps::GRpcServer::DataChecker::V1Beta1";

// An API for checking shipment info consistency and return inconsistent fields.
service DataCheckerAPI {
  // Check shipment data.
  rpc CheckShipment(CheckShipmentRequest) returns (CheckShipmentResponse);
}

// All fields are crc32 values except shipment_id.
// For any primitive types or enum types, call field.toString.crc32.
// For any composite type, a dedicated crc32 function is needed, make sure java & ruby get the same results.
message CheckShipmentRequest {
  uint64 shipment_id = 1;
  uint32 name = 2;
  uint32 incoterm = 3;
  uint32 priority = 4;
  uint32 mode = 5;
  uint32 status = 6;
  uint32 cargo_ready_date = 7;
  uint32 client_id = 8;
  uint32 involved_parties = 9;
  uint32 partners = 10;
  uint32 quote_accepted_info = 11;
  uint32 dangerous_goods_info = 12;
  uint32 legs = 13;
  uint32 notes = 14;
  uint32 air_fulfillment = 15;
  uint32 ocean_fulfillment = 16;
  uint32 cargo_movement = 17;
  uint32 scheduling = 18;
  uint32 messages = 19;
  uint32 documents = 20;
  uint32 requested_services = 21;
  uint32 comments = 22;
  uint32 messaging = 23;
  uint32 invoicing = 24;
  uint32 ocean_fmt_assignment = 25;
  uint32 ocean_carrier_bookings = 26;
  uint32 ocean_consol = 27;
  uint32 ocean_fcl_fulfillment_details = 28;
  uint32 ocean_master_bill_number = 29;
  uint32 ocean_master_bill_of_lading = 30;
  uint32 ocean_house_bill_of_ladings = 31;
}

// Only contains inconsistent fields.
message CheckShipmentResponse {
  uint64 shipment_id = 1;
  repeated InconsistentField inconsistent_fields = 2;
}
