// TEAM: workflow_platform

syntax = "proto3";

package flexport.rulesengine.ruleservice.v2;

option java_multiple_files = true;
option java_outer_classname = "RuleServiceApiProto";
option java_package = "com.flexport.rulesengine.ruleservice.v2";
option ruby_package = "Flexport::RulesEngine::RuleService::V2";

import "flexport/rulesengine/clientstatus/v1/client_status.proto";
import "flexport/rulesengine/evaluatematch/v1/evaluate_match.proto";
import "flexport/rulesengine/evaluateoutput/v1/evaluate_output.proto";

// RuleAPI.
service RuleServiceAPI {
  // Evaluate.
  rpc Evaluate(EvaluateRequest) returns (EvaluateResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Subscription.
  rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeResponse);
}

message EvaluateRequest {
  flexport.rulesengine.evaluatematch.v1.EvaluateMatch match = 1;
  // Multiple inputs as JSON text or Protobuf bytes.
  repeated bytes inputs = 2;
  // Whether to include null result or not.
  // WARN: The performance could be hurt for a huge decision table.
  bool include_null_result = 3;
}

message EvaluateResponse {
  // The list of EvaluateOutput per each input.
  repeated flexport.rulesengine.evaluateoutput.v1.EvaluateOutput outputs = 1;
}

message SubscribeRequest {
  flexport.rulesengine.clientstatus.v1.ClientStatus status = 1;
}

message SubscribeResponse {}
