// TEAM: dot_org

syntax = "proto3";

package flexport.dotorg.carboncalculation.v1beta1;

import "flexport/dotorg/carboncalculation/v1/leg_data_type.proto";
import "flexport/network/v1beta1/address.proto";
import "flexport/os/v1/types/walltimedate/v1/wall_time_date.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;
option java_outer_classname = "CarbonCalculationRequestLegProto";
option java_package = "com.flexport.dotorg.carboncalculation.v1beta1";
option ruby_package = "Flexport::DotOrg::CarbonCalculation::V1Beta1";

// Represents a request leg. Analogous to CarbonCalculation::RequestLeg in Dot Org NIS.
message CarbonCalculationRequestLeg {
  flexport.dotorg.carboncalculation.v1.CarbonCalculationTransportationMode transportation_mode = 1;
  google.protobuf.DoubleValue weight_in_tonnes = 2;
  google.protobuf.DoubleValue teus = 4;
  google.protobuf.DoubleValue distance_in_km = 5;
  google.protobuf.DoubleValue origin_lat = 6;
  google.protobuf.DoubleValue origin_lng = 7;
  google.protobuf.DoubleValue destination_lat = 8;
  google.protobuf.DoubleValue destination_lng = 9;
  google.protobuf.StringValue origin_country_code = 10;
  google.protobuf.StringValue destination_country_code = 11;
  google.protobuf.StringValue origin_city = 12;
  google.protobuf.StringValue destination_city = 13;
  google.protobuf.StringValue origin_postcode = 14;
  google.protobuf.StringValue destination_postcode = 15;
  google.protobuf.StringValue origin_address = 16;
  google.protobuf.StringValue destination_address = 17;
  google.protobuf.StringValue origin_port = 18;
  google.protobuf.StringValue destination_port = 19;
  flexport.network.v1beta1.Address origin_place = 20;
  flexport.network.v1beta1.Address destination_place = 21;
  bool is_inland = 22;
  bool is_lcl = 23;
  bool is_reefer = 24;
  flexport.dotorg.carboncalculation.v1.TruckingServiceType trucking_service_type = 25;
  flexport.dotorg.carboncalculation.v1.FlightType flight_type = 26;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate calculation_date = 27;
  CalculatorMethodology calculator_methodology = 28;
  google.protobuf.DoubleValue final_weight_in_tonnes = 29;
  google.protobuf.StringValue client_fid = 30;
  google.protobuf.StringValue execution_order_fid = 31;
  google.protobuf.FloatValue emissions_factor_in_tonnes = 32;
  google.protobuf.DoubleValue tkm = 33;
  google.protobuf.DoubleValue total_tco2e = 34;
  google.protobuf.StringValue shipment_fid = 35;
  google.protobuf.StringValue vessel_fid = 36;
  flexport.os.v1.types.walltimedate.v1.WallTimeDate departure_time = 37;
  google.protobuf.DoubleValue approximate_gcd = 38;
}

// Represents different calculator methodologies that can be used to calculate carbon emissions.
enum CalculatorMethodology {
  CALCULATOR_METHODOLOGY_INVALID = 0;
  CALCULATOR_METHODOLOGY_GLEC = 1;
}
