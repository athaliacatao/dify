// TEAM: iam_platform
// NOTE: Types defined in this file were copy/pasted from the fpos_api repo: https://github.flexport.io/flexport/fpos_api/blob/a73a81bb095d139cbb7ed4aadba8b6664e59e1a5/type/src/main/proto/flexport/os/grpc/type/metadata/v1beta1/metadata.proto
// Currently, there's no good way to import protobuf sources from remote repositories.
// A few options were explored before arriving at this decision:
//
//   1. Use bazel to make remote git repo sources available during build time (bazel git_repository rule)
//      This approach technically works in that Bazel can compile protos imported from external repositories, however
//      the linter used by monorepo CI systems (prototool) cannot detect these external resources which cause CI
//      jobs to fail.
//   2. Move these protos to the fpos_api repository
//      This approach also technically works, however it has a few maintenance issues:
//         - The User type may need to be used in other protobuf definitions in the monorepo, having these types
//           in an external repo makes it impossible to use in protobuf definitions in the monorepro
//         - The bazel github remote repository dependency on the fpos_api is also used throughout the codebase
//           and it's pinned to a specific commit. Changing the commit changes it for all projects in the monorepo
//           which could be problematic if breaking changes are introduced to the fpos_api repo.
//
// The decision to copy/paste the required types from the fpos_api repo is very much a kick-the-can-down-the-road
// decision, however it can be easily changed in the future if necessary.

syntax = "proto3";

package flexport.fs.v1beta1;

option java_multiple_files = true;
option java_outer_classname = "EntityProto";
option java_package = "com.flexport.fs.v1beta1";
option ruby_package = "Flexport::FS::V1Beta1";

import "google/protobuf/wrappers.proto";

// The protocol to be used in the API Endpoint. Currently only gRpc is supported.
enum ApiProtocol {
  API_PROTOCOL_INVALID = 0;
  API_PROTOCOL_GRPC = 1;
}

// The Intended Scope of an API Endpoint. Note that this is used in determining the default gRpc Service to be called.
enum ApiScope {
  API_SCOPE_INVALID = 0;
  API_SCOPE_PUBLIC = 1;
  API_SCOPE_FPOS = 2;
  API_SCOPE_SERVICE = 3;
}

// The identification of an FPOS service. As an example, visibility would be:
// {
//   "system": "com.flexport.os",
//   "name": "visibility"
// }
message FPOSService {
  // only present if overriden, if absent, default is
  // "fpos"
  google.protobuf.StringValue system = 1;
  // if absent, the service of the receiver is implied.
  google.protobuf.StringValue name = 2;
}

// The Identification of the Operations part of an APIEndpoint.
// It identifies the protocol and the scope of the APIEndpoint implementation
// The gRpc Services implementing the Operations part of an APIEndpoint are expected to be "discoverable" and
// "addressable" with only the information contained in this message
message APIEndpointOperations {
  ApiProtocol protocol = 1;
  // The FPOS service that hosts this APIEndpoint.
  // If not present, the receiver must know which
  // service hosts the provided endpoint and version
  FPOSService service = 2;
  // The sub-service that declares the APIEndpoint
  // if null, declared by the service at the top level.
  google.protobuf.StringValue home = 3;
  // the "path" of the endpoint within the declaring "sub-service"
  // required
  google.protobuf.StringValue endpoint_name = 4;
  // The version of the Endpoint
  // required
  google.protobuf.StringValue version = 5;
  // if absent, the receiving must know the Scope of the API Endpoint
  ApiScope scope = 6;
}

// The Id of an entity in the system.
// A valid entity needs to have at least its "id" or one entry in the aliases map.
message EntityId {
  // If absent, the receiver must have enough information to infer the "home"
  // of the entity
  APIEndpointOperations home = 1;
  // Entity identifier (required)
  google.protobuf.StringValue id = 2;
}
