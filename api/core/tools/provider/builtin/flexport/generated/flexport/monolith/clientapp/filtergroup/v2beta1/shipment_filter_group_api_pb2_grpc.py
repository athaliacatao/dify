# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.monolith.clientapp.filtergroup.v2beta1 import (
    shipment_filter_group_api_pb2 as flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2,
)


class ShipmentFilterGroupAPIStub:
    """This API handles the backward sync from SIS to Monolith"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpsertShipmentFilterGroup = channel.unary_unary(
            "/flexport.monolith.clientapp.filtergroup.v2beta1.ShipmentFilterGroupAPI/UpsertShipmentFilterGroup",
            request_serializer=flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupResponse.FromString,
        )


class ShipmentFilterGroupAPIServicer:
    """This API handles the backward sync from SIS to Monolith"""

    def UpsertShipmentFilterGroup(self, request, context):
        """Upsert the sis filter group to monolith filter group"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ShipmentFilterGroupAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UpsertShipmentFilterGroup": grpc.unary_unary_rpc_method_handler(
            servicer.UpsertShipmentFilterGroup,
            request_deserializer=flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.monolith.clientapp.filtergroup.v2beta1.ShipmentFilterGroupAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ShipmentFilterGroupAPI:
    """This API handles the backward sync from SIS to Monolith"""

    @staticmethod
    def UpsertShipmentFilterGroup(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.clientapp.filtergroup.v2beta1.ShipmentFilterGroupAPI/UpsertShipmentFilterGroup",
            flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupRequest.SerializeToString,
            flexport_dot_monolith_dot_clientapp_dot_filtergroup_dot_v2beta1_dot_shipment__filter__group__api__pb2.UpsertShipmentFilterGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
