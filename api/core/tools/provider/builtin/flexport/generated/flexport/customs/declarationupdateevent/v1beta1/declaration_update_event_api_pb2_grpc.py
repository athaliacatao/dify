# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.customs.declarationupdateevent.v1beta1 import declaration_update_event_api_pb2 as flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2


class DeclarationUpdateEventAPIStub(object):
    """The DeclarationUpdateEventAPI allows a customs authority integration to transmit the results of a customs
    declaration update to another system.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleDeclarationUpdateEvent = channel.unary_unary(
                '/flexport.customs.declarationupdateevent.v1beta1.DeclarationUpdateEventAPI/HandleDeclarationUpdateEvent',
                request_serializer=flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventRequest.SerializeToString,
                response_deserializer=flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventResponse.FromString,
                )


class DeclarationUpdateEventAPIServicer(object):
    """The DeclarationUpdateEventAPI allows a customs authority integration to transmit the results of a customs
    declaration update to another system.
    """

    def HandleDeclarationUpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DeclarationUpdateEventAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleDeclarationUpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleDeclarationUpdateEvent,
                    request_deserializer=flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventRequest.FromString,
                    response_serializer=flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.customs.declarationupdateevent.v1beta1.DeclarationUpdateEventAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DeclarationUpdateEventAPI(object):
    """The DeclarationUpdateEventAPI allows a customs authority integration to transmit the results of a customs
    declaration update to another system.
    """

    @staticmethod
    def HandleDeclarationUpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.customs.declarationupdateevent.v1beta1.DeclarationUpdateEventAPI/HandleDeclarationUpdateEvent',
            flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventRequest.SerializeToString,
            flexport_dot_customs_dot_declarationupdateevent_dot_v1beta1_dot_declaration__update__event__api__pb2.HandleDeclarationUpdateEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
