# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.executioncoordinator.executionorder.v1beta1 import (
    execution_order_api_pb2 as flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2,
)


class ExecutionOrderAPIStub:
    """define beta version EO APIs"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateExecutionOrder = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1beta1.ExecutionOrderAPI/CreateExecutionOrder",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderResponse.FromString,
        )
        self.UpdateExecutionOrderStatus = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1beta1.ExecutionOrderAPI/UpdateExecutionOrderStatus",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.FromString,
        )


class ExecutionOrderAPIServicer:
    """define beta version EO APIs"""

    def CreateExecutionOrder(self, request, context):
        """This API will accept a bunch of sub-entities that relate to EO such as Service/Quote/Itinerary
        One common use case is when a quote is accepted and we need to create the first revision of EO.
        Also, as side effect, we can create Itineary/EP, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateExecutionOrderStatus(self, request, context):
        """Update the status for an ExecutionOrder."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExecutionOrderAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateExecutionOrder": grpc.unary_unary_rpc_method_handler(
            servicer.CreateExecutionOrder,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderResponse.SerializeToString,
        ),
        "UpdateExecutionOrderStatus": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateExecutionOrderStatus,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.executioncoordinator.executionorder.v1beta1.ExecutionOrderAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ExecutionOrderAPI:
    """define beta version EO APIs"""

    @staticmethod
    def CreateExecutionOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1beta1.ExecutionOrderAPI/CreateExecutionOrder",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.CreateExecutionOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateExecutionOrderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1beta1.ExecutionOrderAPI/UpdateExecutionOrderStatus",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1beta1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
