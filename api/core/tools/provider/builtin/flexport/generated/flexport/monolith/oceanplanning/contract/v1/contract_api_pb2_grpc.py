# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.monolith.oceanplanning.contract.v1 import contract_api_pb2 as flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2


class ContractAPIStub(object):
    """Retrieve contract information.
    Contracts are inventory allocation agreements we have with the carriers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetByFid = channel.unary_unary(
                '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/GetByFid',
                request_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidResponse.FromString,
                )
        self.GetByContractNumber = channel.unary_unary(
                '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/GetByContractNumber',
                request_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberResponse.FromString,
                )
        self.UpsertContract = channel.unary_unary(
                '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/UpsertContract',
                request_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractResponse.FromString,
                )


class ContractAPIServicer(object):
    """Retrieve contract information.
    Contracts are inventory allocation agreements we have with the carriers.
    """

    def GetByFid(self, request, context):
        """Fetches contract information for the given FIDs.

        FIDs that weren't found will be returned as an empty proto message. The results are
        returned in the same order they were requested.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetByContractNumber(self, request, context):
        """Fetches contract information for the given contract numbers.

        Contract numbers that weren't found will be returned as an empty proto message. The results are
        returned in the same order they were requested.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertContract(self, request, context):
        """Update or create the contract with the given carrier/contract number.
        Idempotent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContractAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetByFid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByFid,
                    request_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidResponse.SerializeToString,
            ),
            'GetByContractNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetByContractNumber,
                    request_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberResponse.SerializeToString,
            ),
            'UpsertContract': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertContract,
                    request_deserializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.monolith.oceanplanning.contract.v1.ContractAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ContractAPI(object):
    """Retrieve contract information.
    Contracts are inventory allocation agreements we have with the carriers.
    """

    @staticmethod
    def GetByFid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/GetByFid',
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidRequest.SerializeToString,
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByFidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetByContractNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/GetByContractNumber',
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberRequest.SerializeToString,
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.GetByContractNumberResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.oceanplanning.contract.v1.ContractAPI/UpsertContract',
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractRequest.SerializeToString,
            flexport_dot_monolith_dot_oceanplanning_dot_contract_dot_v1_dot_contract__api__pb2.UpsertContractResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
