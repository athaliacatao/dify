# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.exceptionmanagement.server.v1beta1 import (
    exception_management_api_pb2 as flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2,
)


class ExceptionManagementAPIStub:
    """This is the API for managing exceptions."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOperationalException = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/CreateOperationalException",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionResponse.FromString,
        )
        self.BatchCreateOperationalExceptions = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/BatchCreateOperationalExceptions",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsResponse.FromString,
        )
        self.UpdateOperationalException = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/UpdateOperationalException",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionResponse.FromString,
        )
        self.BatchUpdateOperationalExceptions = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/BatchUpdateOperationalExceptions",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsResponse.FromString,
        )
        self.ListOperationalExceptions = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListOperationalExceptions",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsResponse.FromString,
        )
        self.ListExtendedOperationalExceptions = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListExtendedOperationalExceptions",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsResponse.FromString,
        )
        self.ListOperationalExceptionTypes = channel.unary_unary(
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListOperationalExceptionTypes",
            request_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesRequest.SerializeToString,
            response_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesResponse.FromString,
        )


class ExceptionManagementAPIServicer:
    """This is the API for managing exceptions."""

    def CreateOperationalException(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchCreateOperationalExceptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateOperationalException(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchUpdateOperationalExceptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOperationalExceptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListExtendedOperationalExceptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListOperationalExceptionTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExceptionManagementAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateOperationalException": grpc.unary_unary_rpc_method_handler(
            servicer.CreateOperationalException,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionResponse.SerializeToString,
        ),
        "BatchCreateOperationalExceptions": grpc.unary_unary_rpc_method_handler(
            servicer.BatchCreateOperationalExceptions,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsResponse.SerializeToString,
        ),
        "UpdateOperationalException": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateOperationalException,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionResponse.SerializeToString,
        ),
        "BatchUpdateOperationalExceptions": grpc.unary_unary_rpc_method_handler(
            servicer.BatchUpdateOperationalExceptions,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsResponse.SerializeToString,
        ),
        "ListOperationalExceptions": grpc.unary_unary_rpc_method_handler(
            servicer.ListOperationalExceptions,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsResponse.SerializeToString,
        ),
        "ListExtendedOperationalExceptions": grpc.unary_unary_rpc_method_handler(
            servicer.ListExtendedOperationalExceptions,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsResponse.SerializeToString,
        ),
        "ListOperationalExceptionTypes": grpc.unary_unary_rpc_method_handler(
            servicer.ListOperationalExceptionTypes,
            request_deserializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesRequest.FromString,
            response_serializer=flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ExceptionManagementAPI:
    """This is the API for managing exceptions."""

    @staticmethod
    def CreateOperationalException(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/CreateOperationalException",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.CreateOperationalExceptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchCreateOperationalExceptions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/BatchCreateOperationalExceptions",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchCreateOperationalExceptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateOperationalException(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/UpdateOperationalException",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.UpdateOperationalExceptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchUpdateOperationalExceptions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/BatchUpdateOperationalExceptions",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.BatchUpdateOperationalExceptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOperationalExceptions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListOperationalExceptions",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListExtendedOperationalExceptions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListExtendedOperationalExceptions",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListExtendedOperationalExceptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListOperationalExceptionTypes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.exceptionmanagement.server.v1beta1.ExceptionManagementAPI/ListOperationalExceptionTypes",
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesRequest.SerializeToString,
            flexport_dot_exceptionmanagement_dot_server_dot_v1beta1_dot_exception__management__api__pb2.ListOperationalExceptionTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
