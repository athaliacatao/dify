# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.jobs_queue.asyncjobclient.v1beta1 import async_job_client_api_pb2 as flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2


class AsyncJobClientAPIStub(object):
    """The protocol for handling async jobs that were callback'ed from the jobs queue server.
    All gRPC services that want to make async jobs with jobs queue, should set up these
    rpc endpoints.

    Refer to sample_rb_grpc_srvr/app/rpc/async_jobs_controller.rb for an example setup.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Callback = channel.unary_unary(
                '/flexport.jobsqueue.asyncjobclient.v1beta1.AsyncJobClientAPI/Callback',
                request_serializer=flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackRequest.SerializeToString,
                response_deserializer=flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackResponse.FromString,
                )


class AsyncJobClientAPIServicer(object):
    """The protocol for handling async jobs that were callback'ed from the jobs queue server.
    All gRPC services that want to make async jobs with jobs queue, should set up these
    rpc endpoints.

    Refer to sample_rb_grpc_srvr/app/rpc/async_jobs_controller.rb for an example setup.
    """

    def Callback(self, request, context):
        """Listens for async callback from jobs queue.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AsyncJobClientAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Callback': grpc.unary_unary_rpc_method_handler(
                    servicer.Callback,
                    request_deserializer=flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackRequest.FromString,
                    response_serializer=flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.jobsqueue.asyncjobclient.v1beta1.AsyncJobClientAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AsyncJobClientAPI(object):
    """The protocol for handling async jobs that were callback'ed from the jobs queue server.
    All gRPC services that want to make async jobs with jobs queue, should set up these
    rpc endpoints.

    Refer to sample_rb_grpc_srvr/app/rpc/async_jobs_controller.rb for an example setup.
    """

    @staticmethod
    def Callback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.jobsqueue.asyncjobclient.v1beta1.AsyncJobClientAPI/Callback',
            flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackRequest.SerializeToString,
            flexport_dot_jobs__queue_dot_asyncjobclient_dot_v1beta1_dot_async__job__client__api__pb2.CallbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
