# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.monolith.booking.processamendment.v1beta1 import process_amendment_api_pb2 as flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2


class ProcessAmendmentAPIStub(object):
    """This service is used internally for the booking service to send a message to core
    to apply or reject a booking amendment.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApplyAmendment = channel.unary_unary(
                '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/ApplyAmendment',
                request_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentResponse.FromString,
                )
        self.RejectAmendment = channel.unary_unary(
                '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/RejectAmendment',
                request_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentResponse.FromString,
                )
        self.CreateApprovalNeededActionItem = channel.unary_unary(
                '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/CreateApprovalNeededActionItem',
                request_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemResponse.FromString,
                )


class ProcessAmendmentAPIServicer(object):
    """This service is used internally for the booking service to send a message to core
    to apply or reject a booking amendment.
    """

    def ApplyAmendment(self, request, context):
        """Close the approval action items for OA and client parties when amendment is applied.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectAmendment(self, request, context):
        """Close approval action items for OA and client parties when amendment is rejected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateApprovalNeededActionItem(self, request, context):
        """Create an approval action item when a order proposal is created that needs manual approval.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessAmendmentAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApplyAmendment': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyAmendment,
                    request_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentResponse.SerializeToString,
            ),
            'RejectAmendment': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectAmendment,
                    request_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentResponse.SerializeToString,
            ),
            'CreateApprovalNeededActionItem': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateApprovalNeededActionItem,
                    request_deserializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcessAmendmentAPI(object):
    """This service is used internally for the booking service to send a message to core
    to apply or reject a booking amendment.
    """

    @staticmethod
    def ApplyAmendment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/ApplyAmendment',
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentRequest.SerializeToString,
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.ApplyAmendmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RejectAmendment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/RejectAmendment',
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentRequest.SerializeToString,
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.RejectAmendmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateApprovalNeededActionItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.booking.processamendment.v1beta1.ProcessAmendmentAPI/CreateApprovalNeededActionItem',
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemRequest.SerializeToString,
            flexport_dot_monolith_dot_booking_dot_processamendment_dot_v1beta1_dot_process__amendment__api__pb2.CreateApprovalNeededActionItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
