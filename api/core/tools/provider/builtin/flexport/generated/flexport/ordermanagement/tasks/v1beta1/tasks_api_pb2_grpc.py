# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.ordermanagement.tasks.v1beta1 import (
    tasks_api_pb2 as flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2,
)


class OrderManagementTaskAPIStub:
    """Services for Order Management to create tasks and adjust their statuses.

    The Client App team doesn't want to own a gRPC api for creating tasks but is
    OK with us creating our own that calls their engine.

    See http://go/stoplight-tasks for more details.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
            "/flexport.ordermanagement.tasks.v1beta1.OrderManagementTaskAPI/CreateTask",
            request_serializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskRequest.SerializeToString,
            response_deserializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskResponse.FromString,
        )
        self.SetTaskStatus = channel.unary_unary(
            "/flexport.ordermanagement.tasks.v1beta1.OrderManagementTaskAPI/SetTaskStatus",
            request_serializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusRequest.SerializeToString,
            response_deserializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusResponse.FromString,
        )


class OrderManagementTaskAPIServicer:
    """Services for Order Management to create tasks and adjust their statuses.

    The Client App team doesn't want to own a gRPC api for creating tasks but is
    OK with us creating our own that calls their engine.

    See http://go/stoplight-tasks for more details.
    """

    def CreateTask(self, request, context):
        """Creates a Task for a given client to execute on."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetTaskStatus(self, request, context):
        """Updates the status of a Task."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OrderManagementTaskAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateTask": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTask,
            request_deserializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskRequest.FromString,
            response_serializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskResponse.SerializeToString,
        ),
        "SetTaskStatus": grpc.unary_unary_rpc_method_handler(
            servicer.SetTaskStatus,
            request_deserializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusRequest.FromString,
            response_serializer=flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.ordermanagement.tasks.v1beta1.OrderManagementTaskAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class OrderManagementTaskAPI:
    """Services for Order Management to create tasks and adjust their statuses.

    The Client App team doesn't want to own a gRPC api for creating tasks but is
    OK with us creating our own that calls their engine.

    See http://go/stoplight-tasks for more details.
    """

    @staticmethod
    def CreateTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.ordermanagement.tasks.v1beta1.OrderManagementTaskAPI/CreateTask",
            flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskRequest.SerializeToString,
            flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.CreateTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetTaskStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.ordermanagement.tasks.v1beta1.OrderManagementTaskAPI/SetTaskStatus",
            flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusRequest.SerializeToString,
            flexport_dot_ordermanagement_dot_tasks_dot_v1beta1_dot_tasks__api__pb2.SetTaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
