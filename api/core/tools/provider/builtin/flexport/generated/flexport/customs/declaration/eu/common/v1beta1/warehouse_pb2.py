# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: flexport/customs/declaration/eu/common/v1beta1/warehouse.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""

from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n>flexport/customs/declaration/eu/common/v1beta1/warehouse.proto\x12.flexport.customs.declaration.eu.common.v1beta1"l\n\tWarehouse\x12K\n\x04type\x18\x01 \x01(\x0e\x32=.flexport.customs.declaration.eu.common.v1beta1.WarehouseType\x12\x12\n\nidentifier\x18\x02 \x01(\t*\xc5\x01\n\rWarehouseType\x12\x1a\n\x16WAREHOUSE_TYPE_INVALID\x10\x00\x12\x14\n\x10WAREHOUSE_TYPE_R\x10\x01\x12\x14\n\x10WAREHOUSE_TYPE_S\x10\x02\x12\x14\n\x10WAREHOUSE_TYPE_T\x10\x03\x12\x14\n\x10WAREHOUSE_TYPE_U\x10\x04\x12\x14\n\x10WAREHOUSE_TYPE_V\x10\x05\x12\x14\n\x10WAREHOUSE_TYPE_Y\x10\x06\x12\x14\n\x10WAREHOUSE_TYPE_Z\x10\x07\x42l\n2com.flexport.customs.declaration.eu.common.v1beta1P\x01\xea\x02\x33\x46lexport::Customs::Declaration::EU::Common::V1Beta1b\x06proto3'
)

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(
    DESCRIPTOR, "flexport.customs.declaration.eu.common.v1beta1.warehouse_pb2", _globals
)
if _descriptor._USE_C_DESCRIPTORS == False:
    _globals["DESCRIPTOR"]._options = None
    _globals[
        "DESCRIPTOR"
    ]._serialized_options = b"\n2com.flexport.customs.declaration.eu.common.v1beta1P\001\352\0023Flexport::Customs::Declaration::EU::Common::V1Beta1"
    _globals["_WAREHOUSETYPE"]._serialized_start = 225
    _globals["_WAREHOUSETYPE"]._serialized_end = 422
    _globals["_WAREHOUSE"]._serialized_start = 114
    _globals["_WAREHOUSE"]._serialized_end = 222
# @@protoc_insertion_point(module_scope)
