# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.monolith.truckingprocurement.v1beta1 import core_service_api_pb2 as flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2


class CoreServiceAPIStub(object):
    """This is used by the trucking planner NIS so the internal rate service can be used
    to calculate rates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateCosts = channel.unary_unary(
                '/flexport.monolith.truckingprocurement.v1beta1.CoreServiceAPI/CalculateCosts',
                request_serializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsResponse.FromString,
                )
        self.CalculateCostsBatch = channel.unary_unary(
                '/flexport.monolith.truckingprocurement.v1beta1.CoreServiceAPI/CalculateCostsBatch',
                request_serializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchResponse.FromString,
                )


class CoreServiceAPIServicer(object):
    """This is used by the trucking planner NIS so the internal rate service can be used
    to calculate rates.
    """

    def CalculateCosts(self, request, context):
        """Uses the rate service to calculate how much it would cost
        to do a move as specified given the provided contracts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateCostsBatch(self, request, context):
        """Allows for multiple trucking moves to be costed in a single grpc call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreServiceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateCosts': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateCosts,
                    request_deserializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsResponse.SerializeToString,
            ),
            'CalculateCostsBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateCostsBatch,
                    request_deserializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.monolith.truckingprocurement.v1beta1.CoreServiceAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoreServiceAPI(object):
    """This is used by the trucking planner NIS so the internal rate service can be used
    to calculate rates.
    """

    @staticmethod
    def CalculateCosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.truckingprocurement.v1beta1.CoreServiceAPI/CalculateCosts',
            flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsRequest.SerializeToString,
            flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateCostsBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.truckingprocurement.v1beta1.CoreServiceAPI/CalculateCostsBatch',
            flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchRequest.SerializeToString,
            flexport_dot_monolith_dot_truckingprocurement_dot_v1beta1_dot_core__service__api__pb2.CalculateCostsBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
