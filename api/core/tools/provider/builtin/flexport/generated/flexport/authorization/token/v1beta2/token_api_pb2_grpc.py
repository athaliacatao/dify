# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.authorization.token.v1beta2 import token_api_pb2 as flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2


class TokenAPIStub(object):
    """Retrieve operations and resources relevant to permissions.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIamTokenPublicKeyJwks = channel.unary_unary(
                '/flexport.authorization.token.v1beta2.TokenAPI/GetIamTokenPublicKeyJwks',
                request_serializer=flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.SerializeToString,
                response_deserializer=flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.FromString,
                )


class TokenAPIServicer(object):
    """Retrieve operations and resources relevant to permissions.
    """

    def GetIamTokenPublicKeyJwks(self, request, context):
        """Used to fetch the IAM jwt public key in JWKS format. This is meant to to replace the practice of
        storing the key in application configuration, by providing an API to fetch the most recent copy of
        the key on-demand.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIamTokenPublicKeyJwks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIamTokenPublicKeyJwks,
                    request_deserializer=flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.FromString,
                    response_serializer=flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.authorization.token.v1beta2.TokenAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TokenAPI(object):
    """Retrieve operations and resources relevant to permissions.
    """

    @staticmethod
    def GetIamTokenPublicKeyJwks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.authorization.token.v1beta2.TokenAPI/GetIamTokenPublicKeyJwks',
            flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.SerializeToString,
            flexport_dot_authorization_dot_token_dot_v1beta2_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
