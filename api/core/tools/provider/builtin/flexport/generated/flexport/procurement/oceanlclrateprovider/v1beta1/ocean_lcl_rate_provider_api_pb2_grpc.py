# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.procurement.oceanlclrateprovider.v1beta1 import (
    ocean_lcl_rate_provider_api_pb2 as flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2,
)


class OceanLclRateProviderAPIStub:
    """Service used to retrieve Ocean Lcl Rates."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestRates = channel.unary_unary(
            "/flexport.procurement.oceanlclrateprovider.v1beta1.OceanLclRateProviderAPI/RequestRates",
            request_serializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesRequest.SerializeToString,
            response_deserializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesResponse.FromString,
        )
        self.S3RatesReady = channel.unary_unary(
            "/flexport.procurement.oceanlclrateprovider.v1beta1.OceanLclRateProviderAPI/S3RatesReady",
            request_serializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyRequest.SerializeToString,
            response_deserializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyResponse.FromString,
        )


class OceanLclRateProviderAPIServicer:
    """Service used to retrieve Ocean Lcl Rates."""

    def RequestRates(self, request, context):
        """Find Ocean LCL rates matching a given request."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def S3RatesReady(self, request, context):
        """Let procurement know that rates are waiting in the s3 bucket."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OceanLclRateProviderAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RequestRates": grpc.unary_unary_rpc_method_handler(
            servicer.RequestRates,
            request_deserializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesRequest.FromString,
            response_serializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesResponse.SerializeToString,
        ),
        "S3RatesReady": grpc.unary_unary_rpc_method_handler(
            servicer.S3RatesReady,
            request_deserializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyRequest.FromString,
            response_serializer=flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.procurement.oceanlclrateprovider.v1beta1.OceanLclRateProviderAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class OceanLclRateProviderAPI:
    """Service used to retrieve Ocean Lcl Rates."""

    @staticmethod
    def RequestRates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.procurement.oceanlclrateprovider.v1beta1.OceanLclRateProviderAPI/RequestRates",
            flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesRequest.SerializeToString,
            flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.RequestRatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def S3RatesReady(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.procurement.oceanlclrateprovider.v1beta1.OceanLclRateProviderAPI/S3RatesReady",
            flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyRequest.SerializeToString,
            flexport_dot_procurement_dot_oceanlclrateprovider_dot_v1beta1_dot_ocean__lcl__rate__provider__api__pb2.S3RatesReadyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
