# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.schedulemanager.heuristics.v1 import (
    heuristics_api_pb2 as flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2,
)


class HeuristicsAPIStub:
    """API for interacting with shipment schedule heuristics"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateSchedule = channel.unary_unary(
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/EvaluateSchedule",
            request_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleRequest.SerializeToString,
            response_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleResponse.FromString,
        )
        self.GetScheduleViolation = channel.unary_unary(
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetScheduleViolation",
            request_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationRequest.SerializeToString,
            response_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationResponse.FromString,
        )
        self.GetScheduleViolations = channel.unary_unary(
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetScheduleViolations",
            request_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsRequest.SerializeToString,
            response_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsResponse.FromString,
        )
        self.GetHeuristicViolation = channel.unary_unary(
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetHeuristicViolation",
            request_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationRequest.SerializeToString,
            response_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationResponse.FromString,
        )
        self.ListHeuristicViolations = channel.unary_unary(
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/ListHeuristicViolations",
            request_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsRequest.SerializeToString,
            response_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsResponse.FromString,
        )


class HeuristicsAPIServicer:
    """API for interacting with shipment schedule heuristics"""

    def EvaluateSchedule(self, request, context):
        """Retrieves heuristics evaluation results for a shipment schedule."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetScheduleViolation(self, request, context):
        """Retrieves Schedule Violation matching specified FID."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetScheduleViolations(self, request, context):
        """Retrieves all Schedule Violations in DB for specified shipment."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetHeuristicViolation(self, request, context):
        """Retrieves Heuristic Violation matching specified FID."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListHeuristicViolations(self, request, context):
        """Retrieves Heuristic Violations matching filters."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_HeuristicsAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "EvaluateSchedule": grpc.unary_unary_rpc_method_handler(
            servicer.EvaluateSchedule,
            request_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleRequest.FromString,
            response_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleResponse.SerializeToString,
        ),
        "GetScheduleViolation": grpc.unary_unary_rpc_method_handler(
            servicer.GetScheduleViolation,
            request_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationRequest.FromString,
            response_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationResponse.SerializeToString,
        ),
        "GetScheduleViolations": grpc.unary_unary_rpc_method_handler(
            servicer.GetScheduleViolations,
            request_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsRequest.FromString,
            response_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsResponse.SerializeToString,
        ),
        "GetHeuristicViolation": grpc.unary_unary_rpc_method_handler(
            servicer.GetHeuristicViolation,
            request_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationRequest.FromString,
            response_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationResponse.SerializeToString,
        ),
        "ListHeuristicViolations": grpc.unary_unary_rpc_method_handler(
            servicer.ListHeuristicViolations,
            request_deserializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsRequest.FromString,
            response_serializer=flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.schedulemanager.heuristics.v1.HeuristicsAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class HeuristicsAPI:
    """API for interacting with shipment schedule heuristics"""

    @staticmethod
    def EvaluateSchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/EvaluateSchedule",
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleRequest.SerializeToString,
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.EvaluateScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetScheduleViolation(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetScheduleViolation",
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationRequest.SerializeToString,
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetScheduleViolations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetScheduleViolations",
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsRequest.SerializeToString,
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetScheduleViolationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetHeuristicViolation(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/GetHeuristicViolation",
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationRequest.SerializeToString,
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.GetHeuristicViolationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListHeuristicViolations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.schedulemanager.heuristics.v1.HeuristicsAPI/ListHeuristicViolations",
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsRequest.SerializeToString,
            flexport_dot_schedulemanager_dot_heuristics_dot_v1_dot_heuristics__api__pb2.ListHeuristicViolationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
