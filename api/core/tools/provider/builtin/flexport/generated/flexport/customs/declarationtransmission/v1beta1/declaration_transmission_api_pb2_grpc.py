# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.customs.declarationtransmission.v1beta1 import (
    declaration_transmission_api_pb2 as flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2,
)


class DeclarationTransmissionAPIStub:
    """The DeclarationTransmissionAPI service allows users to transmit customs declaration
    information to government adapter services. The service is meant to be agnostic to the type of
    declaration and the country for which the declaration is made.

    The purpose of the service is to provide a way to seamlessly integrate multiple third party broker tools,
    irrespective of the type of goods being declared or the specific customs protocols of different countries.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDeclarationTransmission = channel.unary_unary(
            "/flexport.customs.declarationtransmission.v1beta1.DeclarationTransmissionAPI/CreateDeclarationTransmission",
            request_serializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionRequest.SerializeToString,
            response_deserializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionResponse.FromString,
        )
        self.ListDeclarationTransmissions = channel.unary_unary(
            "/flexport.customs.declarationtransmission.v1beta1.DeclarationTransmissionAPI/ListDeclarationTransmissions",
            request_serializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsRequest.SerializeToString,
            response_deserializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsResponse.FromString,
        )


class DeclarationTransmissionAPIServicer:
    """The DeclarationTransmissionAPI service allows users to transmit customs declaration
    information to government adapter services. The service is meant to be agnostic to the type of
    declaration and the country for which the declaration is made.

    The purpose of the service is to provide a way to seamlessly integrate multiple third party broker tools,
    irrespective of the type of goods being declared or the specific customs protocols of different countries.
    """

    def CreateDeclarationTransmission(self, request, context):
        """CreateDeclarationTransmission creates a new declaration in an external system through the adapter service.
        There must be none pending or successful transmissions for the declaration for a new transmission to be accepted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListDeclarationTransmissions(self, request, context):
        """ListDeclarationTransmission returns all the transmission statuses related to a declaration.
        This is useful for tracking the progress of the declaration transmission process and
        ensuring that the declaration has been successfully transmitted to the intended destination.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DeclarationTransmissionAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateDeclarationTransmission": grpc.unary_unary_rpc_method_handler(
            servicer.CreateDeclarationTransmission,
            request_deserializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionRequest.FromString,
            response_serializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionResponse.SerializeToString,
        ),
        "ListDeclarationTransmissions": grpc.unary_unary_rpc_method_handler(
            servicer.ListDeclarationTransmissions,
            request_deserializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsRequest.FromString,
            response_serializer=flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.customs.declarationtransmission.v1beta1.DeclarationTransmissionAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class DeclarationTransmissionAPI:
    """The DeclarationTransmissionAPI service allows users to transmit customs declaration
    information to government adapter services. The service is meant to be agnostic to the type of
    declaration and the country for which the declaration is made.

    The purpose of the service is to provide a way to seamlessly integrate multiple third party broker tools,
    irrespective of the type of goods being declared or the specific customs protocols of different countries.
    """

    @staticmethod
    def CreateDeclarationTransmission(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.customs.declarationtransmission.v1beta1.DeclarationTransmissionAPI/CreateDeclarationTransmission",
            flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionRequest.SerializeToString,
            flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.CreateDeclarationTransmissionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListDeclarationTransmissions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.customs.declarationtransmission.v1beta1.DeclarationTransmissionAPI/ListDeclarationTransmissions",
            flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsRequest.SerializeToString,
            flexport_dot_customs_dot_declarationtransmission_dot_v1beta1_dot_declaration__transmission__api__pb2.ListDeclarationTransmissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
