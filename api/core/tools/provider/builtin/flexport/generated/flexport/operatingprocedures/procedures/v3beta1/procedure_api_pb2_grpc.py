# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.operatingprocedures.procedures.v3beta1 import procedure_api_pb2 as flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2


class ProcedureAPIStub(object):
    """The protocol for retrieving all procedures of a given category from the operating_procedures service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFilteredProcedures = channel.unary_unary(
                '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetFilteredProcedures',
                request_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresRequest.SerializeToString,
                response_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresResponse.FromString,
                )
        self.GetMultipleClientsFilteredProcedures = channel.unary_unary(
                '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetMultipleClientsFilteredProcedures',
                request_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresRequest.SerializeToString,
                response_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresResponse.FromString,
                )
        self.GetProceduresMatchingShipment = channel.unary_unary(
                '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetProceduresMatchingShipment',
                request_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentRequest.SerializeToString,
                response_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentResponse.FromString,
                )


class ProcedureAPIServicer(object):
    """The protocol for retrieving all procedures of a given category from the operating_procedures service.
    """

    def GetFilteredProcedures(self, request, context):
        """Retrieves a list of Procedures for a given procedure type, client fid and criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultipleClientsFilteredProcedures(self, request, context):
        """Retrieves a list of Procedures for a given procedure type, list of client fids, and criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProceduresMatchingShipment(self, request, context):
        """Retrieves a list of matching procedures given a procedures type and a shipment fid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcedureAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFilteredProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFilteredProcedures,
                    request_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresRequest.FromString,
                    response_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresResponse.SerializeToString,
            ),
            'GetMultipleClientsFilteredProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultipleClientsFilteredProcedures,
                    request_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresRequest.FromString,
                    response_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresResponse.SerializeToString,
            ),
            'GetProceduresMatchingShipment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProceduresMatchingShipment,
                    request_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentRequest.FromString,
                    response_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProcedureAPI(object):
    """The protocol for retrieving all procedures of a given category from the operating_procedures service.
    """

    @staticmethod
    def GetFilteredProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetFilteredProcedures',
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresRequest.SerializeToString,
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetFilteredProceduresResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultipleClientsFilteredProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetMultipleClientsFilteredProcedures',
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresRequest.SerializeToString,
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetMultipleClientsFilteredProceduresResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProceduresMatchingShipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.operatingprocedures.procedures.v3beta1.ProcedureAPI/GetProceduresMatchingShipment',
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentRequest.SerializeToString,
            flexport_dot_operatingprocedures_dot_procedures_dot_v3beta1_dot_procedure__api__pb2.GetProceduresMatchingShipmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
