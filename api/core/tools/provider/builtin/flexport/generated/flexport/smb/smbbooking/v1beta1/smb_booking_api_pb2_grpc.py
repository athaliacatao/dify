# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.smb.smbbooking.v1beta1 import (
    smb_booking_api_pb2 as flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2,
)


class SmbBookingAPIStub:
    """API for SmbBooking data"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSmbBooking = channel.unary_unary(
            "/flexport.smb.smbbooking.v1beta1.SmbBookingAPI/GetSmbBooking",
            request_serializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingRequest.SerializeToString,
            response_deserializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingResponse.FromString,
        )
        self.ListSmbBookingsByClient = channel.unary_unary(
            "/flexport.smb.smbbooking.v1beta1.SmbBookingAPI/ListSmbBookingsByClient",
            request_serializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientRequest.SerializeToString,
            response_deserializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientResponse.FromString,
        )


class SmbBookingAPIServicer:
    """API for SmbBooking data"""

    def GetSmbBooking(self, request, context):
        """Find SmbBooking data for FLexId/ShippingPlanId request."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListSmbBookingsByClient(self, request, context):
        """List SmbBookings for a given client. If the client does not exist, return empty response. Pagination is not implemented. The only use case for now is to determine if a client has at least one smb booking."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SmbBookingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetSmbBooking": grpc.unary_unary_rpc_method_handler(
            servicer.GetSmbBooking,
            request_deserializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingRequest.FromString,
            response_serializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingResponse.SerializeToString,
        ),
        "ListSmbBookingsByClient": grpc.unary_unary_rpc_method_handler(
            servicer.ListSmbBookingsByClient,
            request_deserializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientRequest.FromString,
            response_serializer=flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.smb.smbbooking.v1beta1.SmbBookingAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class SmbBookingAPI:
    """API for SmbBooking data"""

    @staticmethod
    def GetSmbBooking(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.smb.smbbooking.v1beta1.SmbBookingAPI/GetSmbBooking",
            flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingRequest.SerializeToString,
            flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.GetSmbBookingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListSmbBookingsByClient(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.smb.smbbooking.v1beta1.SmbBookingAPI/ListSmbBookingsByClient",
            flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientRequest.SerializeToString,
            flexport_dot_smb_dot_smbbooking_dot_v1beta1_dot_smb__booking__api__pb2.ListSmbBookingsByClientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
