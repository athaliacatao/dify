# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.customsciservice.splitcommercialinvoicesyncapi.v1beta1 import split_commercial_invoice_sync_api_pb2 as flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2


class SplitCommercialInvoiceSyncAPIStub(object):
    """Once split CIs are successfully processed we will sync them to core in one job.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SplitSyncToCore = channel.unary_unary(
                '/flexport.customsciservice.splitcommercialinvoicesyncapi.v1beta1.SplitCommercialInvoiceSyncAPI/SplitSyncToCore',
                request_serializer=flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreRequest.SerializeToString,
                response_deserializer=flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreResponse.FromString,
                )


class SplitCommercialInvoiceSyncAPIServicer(object):
    """Once split CIs are successfully processed we will sync them to core in one job.
    """

    def SplitSyncToCore(self, request, context):
        """If client_fid and invoice_numbers are passed to a SplitSyncToCore message, it will trigger a job to sync the CIs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SplitCommercialInvoiceSyncAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SplitSyncToCore': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitSyncToCore,
                    request_deserializer=flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreRequest.FromString,
                    response_serializer=flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.customsciservice.splitcommercialinvoicesyncapi.v1beta1.SplitCommercialInvoiceSyncAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SplitCommercialInvoiceSyncAPI(object):
    """Once split CIs are successfully processed we will sync them to core in one job.
    """

    @staticmethod
    def SplitSyncToCore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.customsciservice.splitcommercialinvoicesyncapi.v1beta1.SplitCommercialInvoiceSyncAPI/SplitSyncToCore',
            flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreRequest.SerializeToString,
            flexport_dot_customsciservice_dot_splitcommercialinvoicesyncapi_dot_v1beta1_dot_split__commercial__invoice__sync__api__pb2.SplitSyncToCoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
