# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.monolith.networkentities.port.v1 import (
    port_api_pb2 as flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2,
)


class PortAPIStub:
    """This service is used by any NIS to retrieve Port entities from monolith DB."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPorts = channel.unary_unary(
            "/flexport.monolith.networkentities.port.v1.PortAPI/ListPorts",
            request_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsResponse.FromString,
        )
        self.FindPortsByLocode = channel.unary_unary(
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindPortsByLocode",
            request_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeResponse.FromString,
        )
        self.FindSeaPortsByLocode = channel.unary_unary(
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindSeaPortsByLocode",
            request_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeResponse.FromString,
        )
        self.FindPortsByIataCode = channel.unary_unary(
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindPortsByIataCode",
            request_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeResponse.FromString,
        )


class PortAPIServicer:
    """This service is used by any NIS to retrieve Port entities from monolith DB."""

    def ListPorts(self, request, context):
        """Returns port entities for given fids.
        Order is preserved between the list of response ports and the list of request fids.
        If a port is not found for an fid or an error is encountered (eg fid's format),
        then the response Port object will have all of its fields be empty.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FindPortsByLocode(self, request, context):
        """Look up ports by their UN/LOCODE."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FindSeaPortsByLocode(self, request, context):
        """Look up sea ports by their UN/LOCODE."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FindPortsByIataCode(self, request, context):
        """Look up ports by their iata code."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PortAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListPorts": grpc.unary_unary_rpc_method_handler(
            servicer.ListPorts,
            request_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsResponse.SerializeToString,
        ),
        "FindPortsByLocode": grpc.unary_unary_rpc_method_handler(
            servicer.FindPortsByLocode,
            request_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeResponse.SerializeToString,
        ),
        "FindSeaPortsByLocode": grpc.unary_unary_rpc_method_handler(
            servicer.FindSeaPortsByLocode,
            request_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeResponse.SerializeToString,
        ),
        "FindPortsByIataCode": grpc.unary_unary_rpc_method_handler(
            servicer.FindPortsByIataCode,
            request_deserializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.monolith.networkentities.port.v1.PortAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class PortAPI:
    """This service is used by any NIS to retrieve Port entities from monolith DB."""

    @staticmethod
    def ListPorts(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.networkentities.port.v1.PortAPI/ListPorts",
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsRequest.SerializeToString,
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.ListPortsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FindPortsByLocode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindPortsByLocode",
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeRequest.SerializeToString,
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByLocodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FindSeaPortsByLocode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindSeaPortsByLocode",
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeRequest.SerializeToString,
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindSeaPortsByLocodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FindPortsByIataCode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.networkentities.port.v1.PortAPI/FindPortsByIataCode",
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeRequest.SerializeToString,
            flexport_dot_monolith_dot_networkentities_dot_port_dot_v1_dot_port__api__pb2.FindPortsByIataCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
