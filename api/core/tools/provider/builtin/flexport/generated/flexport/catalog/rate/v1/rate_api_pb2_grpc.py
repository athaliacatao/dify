# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.catalog.rate.v1 import rate_api_pb2 as flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2


class RateAPIStub:
    """The rate service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EvaluateRates = channel.unary_unary(
            "/flexport.catalog.rate.v1.RateAPI/EvaluateRates",
            request_serializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesRequest.SerializeToString,
            response_deserializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesResponse.FromString,
        )
        self.CalculateSellRate = channel.unary_unary(
            "/flexport.catalog.rate.v1.RateAPI/CalculateSellRate",
            request_serializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateRequest.SerializeToString,
            response_deserializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateResponse.FromString,
        )


class RateAPIServicer:
    """The rate service definition."""

    def EvaluateRates(self, request, context):
        """Evaluates cost and sell rates."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CalculateSellRate(self, request, context):
        """Calculate the selling rate for a given cost rate."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RateAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "EvaluateRates": grpc.unary_unary_rpc_method_handler(
            servicer.EvaluateRates,
            request_deserializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesRequest.FromString,
            response_serializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesResponse.SerializeToString,
        ),
        "CalculateSellRate": grpc.unary_unary_rpc_method_handler(
            servicer.CalculateSellRate,
            request_deserializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateRequest.FromString,
            response_serializer=flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("flexport.catalog.rate.v1.RateAPI", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class RateAPI:
    """The rate service definition."""

    @staticmethod
    def EvaluateRates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.catalog.rate.v1.RateAPI/EvaluateRates",
            flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesRequest.SerializeToString,
            flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.EvaluateRatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CalculateSellRate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.catalog.rate.v1.RateAPI/CalculateSellRate",
            flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateRequest.SerializeToString,
            flexport_dot_catalog_dot_rate_dot_v1_dot_rate__api__pb2.CalculateSellRateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
