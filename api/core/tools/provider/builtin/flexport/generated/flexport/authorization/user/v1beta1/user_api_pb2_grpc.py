# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.authorization.user.v1beta1 import user_api_pb2 as flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2


class UserAPIStub(object):
    """Operations relevant to a user.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeactivateUserByEmail = channel.unary_unary(
                '/flexport.authorization.user.v1beta1.UserAPI/DeactivateUserByEmail',
                request_serializer=flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailRequest.SerializeToString,
                response_deserializer=flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailResponse.FromString,
                )


class UserAPIServicer(object):
    """Operations relevant to a user.
    """

    def DeactivateUserByEmail(self, request, context):
        """Deactivates the user with the supplied email. This RPC will call out to AuthZ's Auth0 ManagementAPI to remove
        any Auth0 accounts associated with the given email. This call will be successful in the following cases:
        1) The user getting deactivated in the monolith does not have any associated accounts in Auth0.
        2) The user has associated accounts in Auth0 and all have been deleted.
        For other cases, RPC will fail with an exception
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeactivateUserByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateUserByEmail,
                    request_deserializer=flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailRequest.FromString,
                    response_serializer=flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.authorization.user.v1beta1.UserAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserAPI(object):
    """Operations relevant to a user.
    """

    @staticmethod
    def DeactivateUserByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.authorization.user.v1beta1.UserAPI/DeactivateUserByEmail',
            flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailRequest.SerializeToString,
            flexport_dot_authorization_dot_user_dot_v1beta1_dot_user__api__pb2.DeactivateUserByEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
