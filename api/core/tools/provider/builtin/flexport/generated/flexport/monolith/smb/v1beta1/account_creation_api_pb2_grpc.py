# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.monolith.smb.v1beta1 import account_creation_api_pb2 as flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2


class AccountCreationAPIStub(object):
    """An API for data exchange between Core and SMB NIS.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompanyExistByEmail = channel.unary_unary(
                '/flexport.monolith.smb.v1beta1.AccountCreationAPI/CompanyExistByEmail',
                request_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailResponse.FromString,
                )
        self.CompanyExistByTaxID = channel.unary_unary(
                '/flexport.monolith.smb.v1beta1.AccountCreationAPI/CompanyExistByTaxID',
                request_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDResponse.FromString,
                )
        self.UpdateClientInformation = channel.unary_unary(
                '/flexport.monolith.smb.v1beta1.AccountCreationAPI/UpdateClientInformation',
                request_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationRequest.SerializeToString,
                response_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationResponse.FromString,
                )


class AccountCreationAPIServicer(object):
    """An API for data exchange between Core and SMB NIS.
    """

    def CompanyExistByEmail(self, request, context):
        """Check company existence by email.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompanyExistByTaxID(self, request, context):
        """Check company existence by tax id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClientInformation(self, request, context):
        """Update client with information from onboarding
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountCreationAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompanyExistByEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.CompanyExistByEmail,
                    request_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailResponse.SerializeToString,
            ),
            'CompanyExistByTaxID': grpc.unary_unary_rpc_method_handler(
                    servicer.CompanyExistByTaxID,
                    request_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDResponse.SerializeToString,
            ),
            'UpdateClientInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClientInformation,
                    request_deserializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationRequest.FromString,
                    response_serializer=flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.monolith.smb.v1beta1.AccountCreationAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountCreationAPI(object):
    """An API for data exchange between Core and SMB NIS.
    """

    @staticmethod
    def CompanyExistByEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.smb.v1beta1.AccountCreationAPI/CompanyExistByEmail',
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailRequest.SerializeToString,
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompanyExistByTaxID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.smb.v1beta1.AccountCreationAPI/CompanyExistByTaxID',
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDRequest.SerializeToString,
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.CompanyExistByTaxIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClientInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.monolith.smb.v1beta1.AccountCreationAPI/UpdateClientInformation',
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationRequest.SerializeToString,
            flexport_dot_monolith_dot_smb_dot_v1beta1_dot_account__creation__api__pb2.UpdateClientInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
