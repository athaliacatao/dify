# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: flexport/executioncoordinator/executionorderstateevent/v1/details/shipment_marked_as_completed.proto
"""Generated protocol buffer code."""

from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\ndflexport/executioncoordinator/executionorderstateevent/v1/details/shipment_marked_as_completed.proto\x12\x39\x66lexport.executioncoordinator.executionorderstateevent.v1"\x1b\n\x19ShipmentMarkedAsCompletedB\xa0\x01\n=com.flexport.executioncoordinator.executionorderstateevent.v1B\x1eShipmentMarkedAsCompletedProtoP\x01\xea\x02<Flexport::ExecutionCoordinator::ExecutionOrderStateEvent::V1b\x06proto3'
)


_SHIPMENTMARKEDASCOMPLETED = DESCRIPTOR.message_types_by_name["ShipmentMarkedAsCompleted"]
ShipmentMarkedAsCompleted = _reflection.GeneratedProtocolMessageType(
    "ShipmentMarkedAsCompleted",
    (_message.Message,),
    {
        "DESCRIPTOR": _SHIPMENTMARKEDASCOMPLETED,
        "__module__": "flexport.executioncoordinator.executionorderstateevent.v1.details.shipment_marked_as_completed_pb2",
        # @@protoc_insertion_point(class_scope:flexport.executioncoordinator.executionorderstateevent.v1.ShipmentMarkedAsCompleted)
    },
)
_sym_db.RegisterMessage(ShipmentMarkedAsCompleted)

if _descriptor._USE_C_DESCRIPTORS == False:
    DESCRIPTOR._options = None
    DESCRIPTOR._serialized_options = b"\n=com.flexport.executioncoordinator.executionorderstateevent.v1B\036ShipmentMarkedAsCompletedProtoP\001\352\002<Flexport::ExecutionCoordinator::ExecutionOrderStateEvent::V1"
    _SHIPMENTMARKEDASCOMPLETED._serialized_start = 163
    _SHIPMENTMARKEDASCOMPLETED._serialized_end = 190
# @@protoc_insertion_point(module_scope)
