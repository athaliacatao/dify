# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.executioncoordinator.executionorder.v1 import (
    execution_order_api_pb2 as flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2,
)


class ExecutionOrderAPIStub:
    """This file: http://go/eo-api-proto.

    An API for interacting with ExecutionOrder.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetExecutionOrder = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/GetExecutionOrder",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderResponse.FromString,
        )
        self.ListExecutionOrderRevisions = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/ListExecutionOrderRevisions",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsResponse.FromString,
        )
        self.UpsertExecutionOrder = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/UpsertExecutionOrder",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderResponse.FromString,
        )
        self.ListExecutionOrders = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/ListExecutionOrders",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersResponse.FromString,
        )
        self.BatchGetExecutionOrders = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/BatchGetExecutionOrders",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersResponse.FromString,
        )


class ExecutionOrderAPIServicer:
    """This file: http://go/eo-api-proto.

    An API for interacting with ExecutionOrder.
    """

    def GetExecutionOrder(self, request, context):
        """Retrieves the current revision of an ExecutionOrder."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListExecutionOrderRevisions(self, request, context):
        """Retrieves all revisions of an ExecutionOrder, sorted in chronological order (earliest revision first)."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpsertExecutionOrder(self, request, context):
        """Creates or updates an ExecutionOrder. Idempotent."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListExecutionOrders(self, request, context):
        """Lists ExecutionOrders based on provided filters."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchGetExecutionOrders(self, request, context):
        """Retrieves the current revision for multiple ExecutionOrders."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExecutionOrderAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetExecutionOrder": grpc.unary_unary_rpc_method_handler(
            servicer.GetExecutionOrder,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderResponse.SerializeToString,
        ),
        "ListExecutionOrderRevisions": grpc.unary_unary_rpc_method_handler(
            servicer.ListExecutionOrderRevisions,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsResponse.SerializeToString,
        ),
        "UpsertExecutionOrder": grpc.unary_unary_rpc_method_handler(
            servicer.UpsertExecutionOrder,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderResponse.SerializeToString,
        ),
        "ListExecutionOrders": grpc.unary_unary_rpc_method_handler(
            servicer.ListExecutionOrders,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersResponse.SerializeToString,
        ),
        "BatchGetExecutionOrders": grpc.unary_unary_rpc_method_handler(
            servicer.BatchGetExecutionOrders,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ExecutionOrderAPI:
    """This file: http://go/eo-api-proto.

    An API for interacting with ExecutionOrder.
    """

    @staticmethod
    def GetExecutionOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/GetExecutionOrder",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.GetExecutionOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListExecutionOrderRevisions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/ListExecutionOrderRevisions",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrderRevisionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpsertExecutionOrder(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/UpsertExecutionOrder",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpsertExecutionOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListExecutionOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/ListExecutionOrders",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.ListExecutionOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchGetExecutionOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderAPI/BatchGetExecutionOrders",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchGetExecutionOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class ExecutionOrderEntityAPIStub:
    """An API for interacting with ExecutionOrder entities."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateExecutionOrderEntity = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderEntityAPI/UpdateExecutionOrderEntity",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityResponse.FromString,
        )
        self.BatchUpdateExecutionOrderEntity = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderEntityAPI/BatchUpdateExecutionOrderEntity",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityResponse.FromString,
        )


class ExecutionOrderEntityAPIServicer:
    """An API for interacting with ExecutionOrder entities."""

    def UpdateExecutionOrderEntity(self, request, context):
        """Update an entity for an ExecutionOrder."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchUpdateExecutionOrderEntity(self, request, context):
        """Update multiple entities for an ExecutionOrder."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExecutionOrderEntityAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UpdateExecutionOrderEntity": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateExecutionOrderEntity,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityResponse.SerializeToString,
        ),
        "BatchUpdateExecutionOrderEntity": grpc.unary_unary_rpc_method_handler(
            servicer.BatchUpdateExecutionOrderEntity,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.executioncoordinator.executionorder.v1.ExecutionOrderEntityAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ExecutionOrderEntityAPI:
    """An API for interacting with ExecutionOrder entities."""

    @staticmethod
    def UpdateExecutionOrderEntity(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderEntityAPI/UpdateExecutionOrderEntity",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderEntityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BatchUpdateExecutionOrderEntity(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderEntityAPI/BatchUpdateExecutionOrderEntity",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.BatchUpdateExecutionOrderEntityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class ExecutionOrderStatusAPIStub:
    """An API for interacting with ExecutionOrder status."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateExecutionOrderStatus = channel.unary_unary(
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderStatusAPI/UpdateExecutionOrderStatus",
            request_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.SerializeToString,
            response_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.FromString,
        )


class ExecutionOrderStatusAPIServicer:
    """An API for interacting with ExecutionOrder status."""

    def UpdateExecutionOrderStatus(self, request, context):
        """Update the status for an ExecutionOrder."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExecutionOrderStatusAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UpdateExecutionOrderStatus": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateExecutionOrderStatus,
            request_deserializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.FromString,
            response_serializer=flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.executioncoordinator.executionorder.v1.ExecutionOrderStatusAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ExecutionOrderStatusAPI:
    """An API for interacting with ExecutionOrder status."""

    @staticmethod
    def UpdateExecutionOrderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.executioncoordinator.executionorder.v1.ExecutionOrderStatusAPI/UpdateExecutionOrderStatus",
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_executionorder_dot_v1_dot_execution__order__api__pb2.UpdateExecutionOrderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
