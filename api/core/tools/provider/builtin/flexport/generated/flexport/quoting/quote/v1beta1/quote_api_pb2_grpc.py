# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.quoting.quote.v1beta1 import quote_api_pb2 as flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2


class QuoteAPIStub(object):
    """An API for reading quotes.
    A single RFQ (request-for-quotes) can produce multiple quotes. For example, we may want to
    offer the client an FCL quote as well as a cheaper, consolidated option (LCL). Each quote,
    individually, may also go through several revisions before being accepted. Every time a
    version of that quote is shared with the client, we increment the revision number.
    The API currently only supports reading the latest revision of a given quote.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQuote = channel.unary_unary(
                '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuote',
                request_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteRequest.SerializeToString,
                response_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteResponse.FromString,
                )
        self.GetQuoteJson = channel.unary_unary(
                '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuoteJson',
                request_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonRequest.SerializeToString,
                response_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonResponse.FromString,
                )
        self.GetQuotesJsonByShipmentFid = channel.unary_unary(
                '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuotesJsonByShipmentFid',
                request_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidRequest.SerializeToString,
                response_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidResponse.FromString,
                )
        self.ListShipmentsWithActiveAllocations = channel.unary_unary(
                '/flexport.quoting.quote.v1beta1.QuoteAPI/ListShipmentsWithActiveAllocations',
                request_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsRequest.SerializeToString,
                response_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsResponse.FromString,
                )


class QuoteAPIServicer(object):
    """An API for reading quotes.
    A single RFQ (request-for-quotes) can produce multiple quotes. For example, we may want to
    offer the client an FCL quote as well as a cheaper, consolidated option (LCL). Each quote,
    individually, may also go through several revisions before being accepted. Every time a
    version of that quote is shared with the client, we increment the revision number.
    The API currently only supports reading the latest revision of a given quote.
    """

    def GetQuote(self, request, context):
        """Retrieves the latest revision of a quote.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuoteJson(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuotesJsonByShipmentFid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListShipmentsWithActiveAllocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuoteAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuote,
                    request_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteRequest.FromString,
                    response_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteResponse.SerializeToString,
            ),
            'GetQuoteJson': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuoteJson,
                    request_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonRequest.FromString,
                    response_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonResponse.SerializeToString,
            ),
            'GetQuotesJsonByShipmentFid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuotesJsonByShipmentFid,
                    request_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidRequest.FromString,
                    response_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidResponse.SerializeToString,
            ),
            'ListShipmentsWithActiveAllocations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListShipmentsWithActiveAllocations,
                    request_deserializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsRequest.FromString,
                    response_serializer=flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.quoting.quote.v1beta1.QuoteAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuoteAPI(object):
    """An API for reading quotes.
    A single RFQ (request-for-quotes) can produce multiple quotes. For example, we may want to
    offer the client an FCL quote as well as a cheaper, consolidated option (LCL). Each quote,
    individually, may also go through several revisions before being accepted. Every time a
    version of that quote is shared with the client, we increment the revision number.
    The API currently only supports reading the latest revision of a given quote.
    """

    @staticmethod
    def GetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuote',
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteRequest.SerializeToString,
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuoteJson(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuoteJson',
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonRequest.SerializeToString,
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuoteJsonResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuotesJsonByShipmentFid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.quoting.quote.v1beta1.QuoteAPI/GetQuotesJsonByShipmentFid',
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidRequest.SerializeToString,
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.GetQuotesJsonByShipmentFidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListShipmentsWithActiveAllocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.quoting.quote.v1beta1.QuoteAPI/ListShipmentsWithActiveAllocations',
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsRequest.SerializeToString,
            flexport_dot_quoting_dot_quote_dot_v1beta1_dot_quote__api__pb2.ListShipmentsWithActiveAllocationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
