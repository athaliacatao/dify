# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.consolplanner.air.v1beta1 import (
    air_service_api_pb2 as flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2,
)


class AirServiceAPIStub:
    """This service is used to query/mutate `air` data in the consol_planner NIS.
    As this service contains all other services, we should seek to deprecate it
    and place each endpoint into an appropriate service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResolveShipmentRoute = channel.unary_unary(
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ResolveShipmentRoute",
            request_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteRequest.SerializeToString,
            response_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteResponse.FromString,
        )
        self.GetAirBuildPlans = channel.unary_unary(
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/GetAirBuildPlans",
            request_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansRequest.SerializeToString,
            response_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansResponse.FromString,
        )
        self.ListAirPlanningShipment = channel.unary_unary(
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ListAirPlanningShipment",
            request_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentRequest.SerializeToString,
            response_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentResponse.FromString,
        )
        self.ListFaeRecommendationFeedback = channel.unary_unary(
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ListFaeRecommendationFeedback",
            request_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackRequest.SerializeToString,
            response_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackResponse.FromString,
        )
        self.PublishAirEPC = channel.unary_unary(
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/PublishAirEPC",
            request_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCRequest.SerializeToString,
            response_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCResponse.FromString,
        )


class AirServiceAPIServicer:
    """This service is used to query/mutate `air` data in the consol_planner NIS.
    As this service contains all other services, we should seek to deprecate it
    and place each endpoint into an appropriate service.
    """

    def ResolveShipmentRoute(self, request, context):
        """This RPC is called when we update AllotmentScheduleInstance(s) and need to reconcile them
        with the build plans stored in consol_planner NIS.
        Essentially it does two things,
        1. Check whether the new AllotmentScheduleInstance(s)' routes are compatible with the
        shipments' preassigned routes.
        2.a If ALL compatible, update the shipments' AirCargoAllocation#allotment_fids
        2.b If ANY shipments involved are incompatible, abort the whole RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAirBuildPlans(self, request, context):
        """Rpc method to get the build plans by allotment_schedule_instance_fids
        Return the AirBuildPlans with corresponding ExecutionOrderFid,
        the sum of the ChargeableWeight, the sum of the GrossWeight of the corresponding MAWB plans.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListAirPlanningShipment(self, request, context):
        """RPC method to list eligible air planning shipments.
        Besides the filters set in the request, we also mandate the shipment 1) should have a
        main_freight_role different than "AIR_ROLE_NO_INVOLVEMENT" and 2) should not be delivered.
        A maximum of 5,000 shipments will be returned in one RPC call.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListFaeRecommendationFeedback(self, request, context):
        """RPC method to list fae recommendation feedbacks.
        Return the feedbacks with corresponding solution id, asi fid, shipment fid,
        user fid, action type, and reject reason.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PublishAirEPC(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AirServiceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ResolveShipmentRoute": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveShipmentRoute,
            request_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteRequest.FromString,
            response_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteResponse.SerializeToString,
        ),
        "GetAirBuildPlans": grpc.unary_unary_rpc_method_handler(
            servicer.GetAirBuildPlans,
            request_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansRequest.FromString,
            response_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansResponse.SerializeToString,
        ),
        "ListAirPlanningShipment": grpc.unary_unary_rpc_method_handler(
            servicer.ListAirPlanningShipment,
            request_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentRequest.FromString,
            response_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentResponse.SerializeToString,
        ),
        "ListFaeRecommendationFeedback": grpc.unary_unary_rpc_method_handler(
            servicer.ListFaeRecommendationFeedback,
            request_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackRequest.FromString,
            response_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackResponse.SerializeToString,
        ),
        "PublishAirEPC": grpc.unary_unary_rpc_method_handler(
            servicer.PublishAirEPC,
            request_deserializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCRequest.FromString,
            response_serializer=flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.consolplanner.air.v1beta1.AirServiceAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class AirServiceAPI:
    """This service is used to query/mutate `air` data in the consol_planner NIS.
    As this service contains all other services, we should seek to deprecate it
    and place each endpoint into an appropriate service.
    """

    @staticmethod
    def ResolveShipmentRoute(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ResolveShipmentRoute",
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteRequest.SerializeToString,
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ResolveShipmentRouteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetAirBuildPlans(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/GetAirBuildPlans",
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansRequest.SerializeToString,
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.GetAirBuildPlansResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListAirPlanningShipment(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ListAirPlanningShipment",
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentRequest.SerializeToString,
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListAirPlanningShipmentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListFaeRecommendationFeedback(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/ListFaeRecommendationFeedback",
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackRequest.SerializeToString,
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.ListFaeRecommendationFeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PublishAirEPC(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.consolplanner.air.v1beta1.AirServiceAPI/PublishAirEPC",
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCRequest.SerializeToString,
            flexport_dot_consolplanner_dot_air_dot_v1beta1_dot_air__service__api__pb2.PublishAirEPCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
