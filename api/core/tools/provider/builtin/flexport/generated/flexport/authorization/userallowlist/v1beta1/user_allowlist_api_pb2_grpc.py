# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.authorization.userallowlist.v1beta1 import user_allowlist_api_pb2 as flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2


class UserAllowlistAPIStub(object):
    """The gRPC API for http://go/user-allowlists.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HasAccessToService = channel.unary_unary(
                '/flexport.authorization.userallowlist.v1beta1.UserAllowlistAPI/HasAccessToService',
                request_serializer=flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceRequest.SerializeToString,
                response_deserializer=flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceResponse.FromString,
                )


class UserAllowlistAPIServicer(object):
    """The gRPC API for http://go/user-allowlists.
    """

    def HasAccessToService(self, request, context):
        """Checks whether the user has access to the given service. Takes:
        the userâ€™s email,
        the service's hostname (e.g.: core.flexport.com),
        the connection the user is attempting to log in with (e.g.: ProdCustomDB)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserAllowlistAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HasAccessToService': grpc.unary_unary_rpc_method_handler(
                    servicer.HasAccessToService,
                    request_deserializer=flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceRequest.FromString,
                    response_serializer=flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.authorization.userallowlist.v1beta1.UserAllowlistAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserAllowlistAPI(object):
    """The gRPC API for http://go/user-allowlists.
    """

    @staticmethod
    def HasAccessToService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.authorization.userallowlist.v1beta1.UserAllowlistAPI/HasAccessToService',
            flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceRequest.SerializeToString,
            flexport_dot_authorization_dot_userallowlist_dot_v1beta1_dot_user__allowlist__api__pb2.HasAccessToServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
