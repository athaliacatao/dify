# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.integrationtest.authorization.v1 import (
    authorization_test_api_pb2 as flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2,
)


class AuthorizationTestAPIStub:
    """The API for authorization integration tests."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServerInterceptorTestRegular = channel.unary_unary(
            "/flexport.integrationtest.authorization.v1.AuthorizationTestAPI/ServerInterceptorTestRegular",
            request_serializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularRequest.SerializeToString,
            response_deserializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularResponse.FromString,
        )
        self.ServerInterceptorNoMandatoryAuth = channel.unary_unary(
            "/flexport.integrationtest.authorization.v1.AuthorizationTestAPI/ServerInterceptorNoMandatoryAuth",
            request_serializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthRequest.SerializeToString,
            response_deserializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthResponse.FromString,
        )


class AuthorizationTestAPIServicer:
    """The API for authorization integration tests."""

    def ServerInterceptorTestRegular(self, request, context):
        """Test endpoint for authorization integration test, not included on the dont_enforce_mandatory_auth_for_methods list."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ServerInterceptorNoMandatoryAuth(self, request, context):
        """Test endpoint for authorization integration test, included on the dont_enforce_mandatory_auth_for_methods list."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthorizationTestAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ServerInterceptorTestRegular": grpc.unary_unary_rpc_method_handler(
            servicer.ServerInterceptorTestRegular,
            request_deserializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularRequest.FromString,
            response_serializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularResponse.SerializeToString,
        ),
        "ServerInterceptorNoMandatoryAuth": grpc.unary_unary_rpc_method_handler(
            servicer.ServerInterceptorNoMandatoryAuth,
            request_deserializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthRequest.FromString,
            response_serializer=flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.integrationtest.authorization.v1.AuthorizationTestAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class AuthorizationTestAPI:
    """The API for authorization integration tests."""

    @staticmethod
    def ServerInterceptorTestRegular(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.integrationtest.authorization.v1.AuthorizationTestAPI/ServerInterceptorTestRegular",
            flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularRequest.SerializeToString,
            flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorTestRegularResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ServerInterceptorNoMandatoryAuth(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.integrationtest.authorization.v1.AuthorizationTestAPI/ServerInterceptorNoMandatoryAuth",
            flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthRequest.SerializeToString,
            flexport_dot_integrationtest_dot_authorization_dot_v1_dot_authorization__test__api__pb2.ServerInterceptorNoMandatoryAuthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
