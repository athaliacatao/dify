# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.executioncoordinator.itinerary.v1beta1 import itinerary_api_pb2 as flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2


class ItineraryAPIStub(object):
    """An API for interacting with Itinerary entities.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetItinerary = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/GetItinerary',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryResponse.FromString,
                )
        self.ListItineraryRevisions = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/ListItineraryRevisions',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsResponse.FromString,
                )
        self.UpsertItinerary = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/UpsertItinerary',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryResponse.FromString,
                )
        self.BatchItineraryOperation = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/BatchItineraryOperation',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationResponse.FromString,
                )
        self.GetItineraries = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/GetItineraries',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesResponse.FromString,
                )


class ItineraryAPIServicer(object):
    """An API for interacting with Itinerary entities.
    """

    def GetItinerary(self, request, context):
        """Retrieves an Itinerary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListItineraryRevisions(self, request, context):
        """Retrieves all revisions of an Itinerary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertItinerary(self, request, context):
        """Creates or updates an Itinerary. Idempotent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchItineraryOperation(self, request, context):
        """Batch edits to the itinerary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetItineraries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItineraryAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItinerary,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryResponse.SerializeToString,
            ),
            'ListItineraryRevisions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListItineraryRevisions,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsResponse.SerializeToString,
            ),
            'UpsertItinerary': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertItinerary,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryResponse.SerializeToString,
            ),
            'BatchItineraryOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchItineraryOperation,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationResponse.SerializeToString,
            ),
            'GetItineraries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetItineraries,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ItineraryAPI(object):
    """An API for interacting with Itinerary entities.
    """

    @staticmethod
    def GetItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/GetItinerary',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItineraryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListItineraryRevisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/ListItineraryRevisions',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.ListItineraryRevisionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertItinerary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/UpsertItinerary',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpsertItineraryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchItineraryOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/BatchItineraryOperation',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchItineraryOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetItineraries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryAPI/GetItineraries',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.GetItinerariesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ItineraryUpdateAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdatePartialRoute = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdatePartialRoute',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteResponse.FromString,
                )
        self.UpdateFullRoute = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdateFullRoute',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteResponse.FromString,
                )
        self.BatchUpdateNode = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/BatchUpdateNode',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeResponse.FromString,
                )
        self.UpdateSchedule = channel.unary_unary(
                '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdateSchedule',
                request_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleRequest.SerializeToString,
                response_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleResponse.FromString,
                )


class ItineraryUpdateAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdatePartialRoute(self, request, context):
        """Update a part of the full route with schedule. This API keeps the other part of the route unchanged and
        cascade the schedule accordingly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFullRoute(self, request, context):
        """Update full route. This API can be used for use cases like requote acceptance route change(will override
        existing route, but keep schedule if any leg has actual dates)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdateNode(self, request, context):
        """Update multiple nodes in a route. This API keeps legs and other nodes unchanged and only update the associated
        node information for multiple existing nodes. Node id is unchanged.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSchedule(self, request, context):
        """Update only the schedule for a given order. This API updates the legs in the request and replace the schedule
        with the one in the request. Its request contains only the legs that need updates, not all legs in itinerary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ItineraryUpdateAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdatePartialRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePartialRoute,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteResponse.SerializeToString,
            ),
            'UpdateFullRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFullRoute,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteResponse.SerializeToString,
            ),
            'BatchUpdateNode': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpdateNode,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeResponse.SerializeToString,
            ),
            'UpdateSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSchedule,
                    request_deserializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleRequest.FromString,
                    response_serializer=flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ItineraryUpdateAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdatePartialRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdatePartialRoute',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdatePartialRouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFullRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdateFullRoute',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateFullRouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpdateNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/BatchUpdateNode',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.BatchUpdateNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.executioncoordinator.itinerary.v1beta1.ItineraryUpdateAPI/UpdateSchedule',
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleRequest.SerializeToString,
            flexport_dot_executioncoordinator_dot_itinerary_dot_v1beta1_dot_itinerary__api__pb2.UpdateScheduleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
