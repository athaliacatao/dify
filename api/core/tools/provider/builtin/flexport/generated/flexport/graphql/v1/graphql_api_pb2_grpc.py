# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.api import httpbody_pb2 as google_dot_api_dot_httpbody__pb2


class GraphqlAPIStub(object):
    """Common gRPC service used to handle GraphQL requests with support for transcoding.
    See https://graphql.org/learn/serving-over-http/ for more info on the different
    ways to serve GraphQL over HTTP.
    As of 4/9/2020, we only need to support POST /graphql with content-type "application/json".
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecutePost = channel.unary_unary(
                '/flexport.graphql.v1.GraphqlAPI/ExecutePost',
                request_serializer=google_dot_api_dot_httpbody__pb2.HttpBody.SerializeToString,
                response_deserializer=google_dot_api_dot_httpbody__pb2.HttpBody.FromString,
                )


class GraphqlAPIServicer(object):
    """Common gRPC service used to handle GraphQL requests with support for transcoding.
    See https://graphql.org/learn/serving-over-http/ for more info on the different
    ways to serve GraphQL over HTTP.
    As of 4/9/2020, we only need to support POST /graphql with content-type "application/json".
    """

    def ExecutePost(self, request, context):
        """Execute a GraphQL request via POST /graphql.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphqlAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecutePost': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecutePost,
                    request_deserializer=google_dot_api_dot_httpbody__pb2.HttpBody.FromString,
                    response_serializer=google_dot_api_dot_httpbody__pb2.HttpBody.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.graphql.v1.GraphqlAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphqlAPI(object):
    """Common gRPC service used to handle GraphQL requests with support for transcoding.
    See https://graphql.org/learn/serving-over-http/ for more info on the different
    ways to serve GraphQL over HTTP.
    As of 4/9/2020, we only need to support POST /graphql with content-type "application/json".
    """

    @staticmethod
    def ExecutePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.graphql.v1.GraphqlAPI/ExecutePost',
            google_dot_api_dot_httpbody__pb2.HttpBody.SerializeToString,
            google_dot_api_dot_httpbody__pb2.HttpBody.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
