# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.rulesengine.ruleservice.v2 import rule_service_api_pb2 as flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2


class RuleServiceAPIStub(object):
    """RuleAPI.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Evaluate = channel.unary_unary(
                '/flexport.rulesengine.ruleservice.v2.RuleServiceAPI/Evaluate',
                request_serializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateRequest.SerializeToString,
                response_deserializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateResponse.FromString,
                )
        self.Subscribe = channel.stream_stream(
                '/flexport.rulesengine.ruleservice.v2.RuleServiceAPI/Subscribe',
                request_serializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeResponse.FromString,
                )


class RuleServiceAPIServicer(object):
    """RuleAPI.
    """

    def Evaluate(self, request, context):
        """Evaluate.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request_iterator, context):
        """Subscription.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RuleServiceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Evaluate': grpc.unary_unary_rpc_method_handler(
                    servicer.Evaluate,
                    request_deserializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateRequest.FromString,
                    response_serializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateResponse.SerializeToString,
            ),
            'Subscribe': grpc.stream_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeRequest.FromString,
                    response_serializer=flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.rulesengine.ruleservice.v2.RuleServiceAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RuleServiceAPI(object):
    """RuleAPI.
    """

    @staticmethod
    def Evaluate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.rulesengine.ruleservice.v2.RuleServiceAPI/Evaluate',
            flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateRequest.SerializeToString,
            flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.EvaluateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/flexport.rulesengine.ruleservice.v2.RuleServiceAPI/Subscribe',
            flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeRequest.SerializeToString,
            flexport_dot_rulesengine_dot_ruleservice_dot_v2_dot_rule__service__api__pb2.SubscribeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
