# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.authorization.token.v1beta1 import (
    token_api_pb2 as flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2,
)


class TokenAPIStub:
    """Retrieve operations and resources relevant to permissions."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIamTokenForUserInfo = channel.unary_unary(
            "/flexport.authorization.token.v1beta1.TokenAPI/GetIamTokenForUserInfo",
            request_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoRequest.SerializeToString,
            response_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoResponse.FromString,
        )
        self.ExchangeIamTokenForToken = channel.unary_unary(
            "/flexport.authorization.token.v1beta1.TokenAPI/ExchangeIamTokenForToken",
            request_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenRequest.SerializeToString,
            response_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenResponse.FromString,
        )
        self.GetIamTokenPublicKeyJwks = channel.unary_unary(
            "/flexport.authorization.token.v1beta1.TokenAPI/GetIamTokenPublicKeyJwks",
            request_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.SerializeToString,
            response_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.FromString,
        )


class TokenAPIServicer:
    """Retrieve operations and resources relevant to permissions."""

    def GetIamTokenForUserInfo(self, request, context):
        """Used by the monolith for fetching the IAM JWT for a user. Will be replaced by access tokens.
        Passes in user data, returns encoded & signed IAM JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExchangeIamTokenForToken(self, request, context):
        """Used to verify a token as return an IAM JWT for that token."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetIamTokenPublicKeyJwks(self, request, context):
        """Used to fetch the IAM jwt public key in JWKS format. This is meant to to replace the practice of
        storing the key in application configuration, by providing an API to fetch the most recent copy of
        the key on-demand.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TokenAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetIamTokenForUserInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetIamTokenForUserInfo,
            request_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoRequest.FromString,
            response_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoResponse.SerializeToString,
        ),
        "ExchangeIamTokenForToken": grpc.unary_unary_rpc_method_handler(
            servicer.ExchangeIamTokenForToken,
            request_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenRequest.FromString,
            response_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenResponse.SerializeToString,
        ),
        "GetIamTokenPublicKeyJwks": grpc.unary_unary_rpc_method_handler(
            servicer.GetIamTokenPublicKeyJwks,
            request_deserializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.FromString,
            response_serializer=flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.authorization.token.v1beta1.TokenAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class TokenAPI:
    """Retrieve operations and resources relevant to permissions."""

    @staticmethod
    def GetIamTokenForUserInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.authorization.token.v1beta1.TokenAPI/GetIamTokenForUserInfo",
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoRequest.SerializeToString,
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenForUserInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExchangeIamTokenForToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.authorization.token.v1beta1.TokenAPI/ExchangeIamTokenForToken",
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenRequest.SerializeToString,
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.ExchangeIamTokenForTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetIamTokenPublicKeyJwks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.authorization.token.v1beta1.TokenAPI/GetIamTokenPublicKeyJwks",
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksRequest.SerializeToString,
            flexport_dot_authorization_dot_token_dot_v1beta1_dot_token__api__pb2.GetIamTokenPublicKeyJwksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
