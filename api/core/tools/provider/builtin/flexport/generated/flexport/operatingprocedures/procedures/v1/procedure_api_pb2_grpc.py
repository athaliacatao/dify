# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.operatingprocedures.procedures.v1 import (
    procedure_api_pb2 as flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2,
)


class ProcedureAPIStub:
    """The protocol for retrieving all procedures of a given category from the operating_procedures service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDestinationCoordinationProcedures = channel.unary_unary(
            "/flexport.operatingprocedures.procedures.v1.ProcedureAPI/GetDestinationCoordinationProcedures",
            request_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresRequest.SerializeToString,
            response_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresResponse.FromString,
        )


class ProcedureAPIServicer:
    """The protocol for retrieving all procedures of a given category from the operating_procedures service."""

    def GetDestinationCoordinationProcedures(self, request, context):
        """Retrieves a list of Procedures for a given client fid / company entity fid."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ProcedureAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetDestinationCoordinationProcedures": grpc.unary_unary_rpc_method_handler(
            servicer.GetDestinationCoordinationProcedures,
            request_deserializer=flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresRequest.FromString,
            response_serializer=flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.operatingprocedures.procedures.v1.ProcedureAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ProcedureAPI:
    """The protocol for retrieving all procedures of a given category from the operating_procedures service."""

    @staticmethod
    def GetDestinationCoordinationProcedures(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.operatingprocedures.procedures.v1.ProcedureAPI/GetDestinationCoordinationProcedures",
            flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresRequest.SerializeToString,
            flexport_dot_operatingprocedures_dot_procedures_dot_v1_dot_procedure__api__pb2.GetDestinationCoordinationProceduresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
