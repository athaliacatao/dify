# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.monolith.billing.carrier.v1 import (
    carrier_api_pb2 as flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2,
)


class CarrierAPIStub:
    """APIs to retrieve carrier entities."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCarrier = channel.unary_unary(
            "/flexport.monolith.billing.carrier.v1.CarrierAPI/GetCarrier",
            request_serializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierResponse.FromString,
        )
        self.GetCarrierBillingSources = channel.unary_unary(
            "/flexport.monolith.billing.carrier.v1.CarrierAPI/GetCarrierBillingSources",
            request_serializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesRequest.SerializeToString,
            response_deserializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesResponse.FromString,
        )


class CarrierAPIServicer:
    """APIs to retrieve carrier entities."""

    def GetCarrier(self, request, context):
        """Get carrier for a given fid (Flexport Resource Identifiers)."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCarrierBillingSources(self, request, context):
        """Get stats on billing sources for a given list of carrier fids."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CarrierAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetCarrier": grpc.unary_unary_rpc_method_handler(
            servicer.GetCarrier,
            request_deserializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierResponse.SerializeToString,
        ),
        "GetCarrierBillingSources": grpc.unary_unary_rpc_method_handler(
            servicer.GetCarrierBillingSources,
            request_deserializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesRequest.FromString,
            response_serializer=flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.monolith.billing.carrier.v1.CarrierAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class CarrierAPI:
    """APIs to retrieve carrier entities."""

    @staticmethod
    def GetCarrier(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.billing.carrier.v1.CarrierAPI/GetCarrier",
            flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierRequest.SerializeToString,
            flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetCarrierBillingSources(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.monolith.billing.carrier.v1.CarrierAPI/GetCarrierBillingSources",
            flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesRequest.SerializeToString,
            flexport_dot_monolith_dot_billing_dot_carrier_dot_v1_dot_carrier__api__pb2.GetCarrierBillingSourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
