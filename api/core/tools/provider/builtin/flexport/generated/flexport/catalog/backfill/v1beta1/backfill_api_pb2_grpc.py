# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.catalog.backfill.v1beta1 import backfill_api_pb2 as flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2


class BackfillAPIStub(object):
    """An API for managing backfills in Service Catalog.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartBackfill = channel.unary_unary(
                '/flexport.catalog.backfill.v1beta1.BackfillAPI/StartBackfill',
                request_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillRequest.SerializeToString,
                response_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillResponse.FromString,
                )
        self.CheckBackfill = channel.unary_unary(
                '/flexport.catalog.backfill.v1beta1.BackfillAPI/CheckBackfill',
                request_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillRequest.SerializeToString,
                response_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillResponse.FromString,
                )
        self.StopBackfill = channel.unary_unary(
                '/flexport.catalog.backfill.v1beta1.BackfillAPI/StopBackfill',
                request_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillRequest.SerializeToString,
                response_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillResponse.FromString,
                )


class BackfillAPIServicer(object):
    """An API for managing backfills in Service Catalog.
    """

    def StartBackfill(self, request, context):
        """Starts a backfill. Idempotent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckBackfill(self, request, context):
        """Checks the status of a backfill. Read-only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopBackfill(self, request, context):
        """Cancels a backfill.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackfillAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBackfill,
                    request_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillRequest.FromString,
                    response_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillResponse.SerializeToString,
            ),
            'CheckBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckBackfill,
                    request_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillRequest.FromString,
                    response_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillResponse.SerializeToString,
            ),
            'StopBackfill': grpc.unary_unary_rpc_method_handler(
                    servicer.StopBackfill,
                    request_deserializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillRequest.FromString,
                    response_serializer=flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.catalog.backfill.v1beta1.BackfillAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackfillAPI(object):
    """An API for managing backfills in Service Catalog.
    """

    @staticmethod
    def StartBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.catalog.backfill.v1beta1.BackfillAPI/StartBackfill',
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillRequest.SerializeToString,
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StartBackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.catalog.backfill.v1beta1.BackfillAPI/CheckBackfill',
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillRequest.SerializeToString,
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.CheckBackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopBackfill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.catalog.backfill.v1beta1.BackfillAPI/StopBackfill',
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillRequest.SerializeToString,
            flexport_dot_catalog_dot_backfill_dot_v1beta1_dot_backfill__api__pb2.StopBackfillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
