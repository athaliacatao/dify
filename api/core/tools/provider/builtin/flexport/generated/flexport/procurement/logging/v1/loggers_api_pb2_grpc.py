# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.procurement.logging.v1 import (
    loggers_api_pb2 as flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2,
)


class LoggersAPIStub:
    """Logging configuration API for NIS Procurement Service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLoggerLevels = channel.unary_unary(
            "/flexport.procurement.logging.v1.LoggersAPI/GetLoggerLevels",
            request_serializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsRequest.SerializeToString,
            response_deserializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsResponse.FromString,
        )
        self.ConfigureLoggerLevels = channel.unary_unary(
            "/flexport.procurement.logging.v1.LoggersAPI/ConfigureLoggerLevels",
            request_serializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsRequest.SerializeToString,
            response_deserializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsResponse.FromString,
        )


class LoggersAPIServicer:
    """Logging configuration API for NIS Procurement Service."""

    def GetLoggerLevels(self, request, context):
        """Find configured logger level for the given search criteria."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ConfigureLoggerLevels(self, request, context):
        """Configure configured logger level for the given search criteria."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_LoggersAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetLoggerLevels": grpc.unary_unary_rpc_method_handler(
            servicer.GetLoggerLevels,
            request_deserializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsRequest.FromString,
            response_serializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsResponse.SerializeToString,
        ),
        "ConfigureLoggerLevels": grpc.unary_unary_rpc_method_handler(
            servicer.ConfigureLoggerLevels,
            request_deserializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsRequest.FromString,
            response_serializer=flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.procurement.logging.v1.LoggersAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class LoggersAPI:
    """Logging configuration API for NIS Procurement Service."""

    @staticmethod
    def GetLoggerLevels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.procurement.logging.v1.LoggersAPI/GetLoggerLevels",
            flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsRequest.SerializeToString,
            flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.GetLoggerLevelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ConfigureLoggerLevels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.procurement.logging.v1.LoggersAPI/ConfigureLoggerLevels",
            flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsRequest.SerializeToString,
            flexport_dot_procurement_dot_logging_dot_v1_dot_loggers__api__pb2.ConfigureLoggerLevelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
