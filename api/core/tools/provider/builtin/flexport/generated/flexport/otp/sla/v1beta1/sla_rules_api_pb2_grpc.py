# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.otp.sla.v1beta1 import sla_rules_api_pb2 as flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2


class SlaRulesAPIStub:
    """API to get OTE from rules engine for trucking."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAirSla = channel.unary_unary(
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetAirSla",
            request_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetAirSlaRequest.SerializeToString,
            response_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
        )
        self.GetOceanSla = channel.unary_unary(
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetOceanSla",
            request_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetOceanSlaRequest.SerializeToString,
            response_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
        )
        self.GetTruckingSla = channel.unary_unary(
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetTruckingSla",
            request_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetTruckingSlaRequest.SerializeToString,
            response_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
        )


class SlaRulesAPIServicer:
    """API to get OTE from rules engine for trucking."""

    def GetAirSla(self, request, context):
        """Get SLA from rules engine for a process."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOceanSla(self, request, context):
        """Get SLA from rules engine for a process."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTruckingSla(self, request, context):
        """Get SLA from rules engine for a process."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SlaRulesAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetAirSla": grpc.unary_unary_rpc_method_handler(
            servicer.GetAirSla,
            request_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetAirSlaRequest.FromString,
            response_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.SerializeToString,
        ),
        "GetOceanSla": grpc.unary_unary_rpc_method_handler(
            servicer.GetOceanSla,
            request_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetOceanSlaRequest.FromString,
            response_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.SerializeToString,
        ),
        "GetTruckingSla": grpc.unary_unary_rpc_method_handler(
            servicer.GetTruckingSla,
            request_deserializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetTruckingSlaRequest.FromString,
            response_serializer=flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("flexport.otp.sla.v1beta1.SlaRulesAPI", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class SlaRulesAPI:
    """API to get OTE from rules engine for trucking."""

    @staticmethod
    def GetAirSla(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetAirSla",
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetAirSlaRequest.SerializeToString,
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOceanSla(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetOceanSla",
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetOceanSlaRequest.SerializeToString,
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetTruckingSla(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.otp.sla.v1beta1.SlaRulesAPI/GetTruckingSla",
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetTruckingSlaRequest.SerializeToString,
            flexport_dot_otp_dot_sla_dot_v1beta1_dot_sla__rules__api__pb2.GetSlaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
