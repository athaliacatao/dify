# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.offerings.pricing.v1 import pricing_api_pb2 as flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2


class PricingAPIStub(object):
    """The API definition for the Pricing Engine.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPricingRecommendations = channel.unary_unary(
                '/flexport.offerings.pricing.v1.PricingAPI/GetPricingRecommendations',
                request_serializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsRequest.SerializeToString,
                response_deserializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsResponse.FromString,
                )
        self.AdjustLineItems = channel.unary_unary(
                '/flexport.offerings.pricing.v1.PricingAPI/AdjustLineItems',
                request_serializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsRequest.SerializeToString,
                response_deserializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsResponse.FromString,
                )


class PricingAPIServicer(object):
    """The API definition for the Pricing Engine.
    """

    def GetPricingRecommendations(self, request, context):
        """Get the target OMDA markup and guardrails from the latest data science model output for different freight types.
        This is currently only supports quoting OMDA markups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustLineItems(self, request, context):
        """Adjust line items based on the pricing recommendations.
        This API will take in a collection of line items as input, perform some type of adjustment, and return all the line items passed in with the adjustments.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PricingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPricingRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPricingRecommendations,
                    request_deserializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsRequest.FromString,
                    response_serializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsResponse.SerializeToString,
            ),
            'AdjustLineItems': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustLineItems,
                    request_deserializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsRequest.FromString,
                    response_serializer=flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.offerings.pricing.v1.PricingAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PricingAPI(object):
    """The API definition for the Pricing Engine.
    """

    @staticmethod
    def GetPricingRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.offerings.pricing.v1.PricingAPI/GetPricingRecommendations',
            flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsRequest.SerializeToString,
            flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.GetPricingRecommendationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustLineItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.offerings.pricing.v1.PricingAPI/AdjustLineItems',
            flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsRequest.SerializeToString,
            flexport_dot_offerings_dot_pricing_dot_v1_dot_pricing__api__pb2.AdjustLineItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
