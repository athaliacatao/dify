# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.airexecution.sla.v1beta1 import (
    air_execution_sla_api_pb2 as flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2,
)


class AirExecutionSlaAPIStub:
    """This service is used by an NIS to get the air execution sla."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAirExecutionSla = channel.unary_unary(
            "/flexport.airexecution.sla.v1beta1.AirExecutionSlaAPI/GetAirExecutionSla",
            request_serializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaRequest.SerializeToString,
            response_deserializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaResponse.FromString,
        )
        self.ListAirExecutionSla = channel.unary_unary(
            "/flexport.airexecution.sla.v1beta1.AirExecutionSlaAPI/ListAirExecutionSla",
            request_serializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaRequest.SerializeToString,
            response_deserializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaResponse.FromString,
        )


class AirExecutionSlaAPIServicer:
    """This service is used by an NIS to get the air execution sla."""

    def GetAirExecutionSla(self, request, context):
        """Returns the execution sla for the giving criteria."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListAirExecutionSla(self, request, context):
        """Lists the execution sla for the giving criteria."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AirExecutionSlaAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetAirExecutionSla": grpc.unary_unary_rpc_method_handler(
            servicer.GetAirExecutionSla,
            request_deserializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaRequest.FromString,
            response_serializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaResponse.SerializeToString,
        ),
        "ListAirExecutionSla": grpc.unary_unary_rpc_method_handler(
            servicer.ListAirExecutionSla,
            request_deserializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaRequest.FromString,
            response_serializer=flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.airexecution.sla.v1beta1.AirExecutionSlaAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class AirExecutionSlaAPI:
    """This service is used by an NIS to get the air execution sla."""

    @staticmethod
    def GetAirExecutionSla(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.airexecution.sla.v1beta1.AirExecutionSlaAPI/GetAirExecutionSla",
            flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaRequest.SerializeToString,
            flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.GetAirExecutionSlaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListAirExecutionSla(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.airexecution.sla.v1beta1.AirExecutionSlaAPI/ListAirExecutionSla",
            flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaRequest.SerializeToString,
            flexport_dot_airexecution_dot_sla_dot_v1beta1_dot_air__execution__sla__api__pb2.ListAirExecutionSlaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
