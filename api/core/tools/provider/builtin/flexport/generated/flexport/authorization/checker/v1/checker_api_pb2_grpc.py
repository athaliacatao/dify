# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flexport.authorization.checker.v1 import checker_api_pb2 as flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2


class CheckerAPIStub(object):
    """Checks whether a user has permission to perform an operation.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckOperation = channel.unary_unary(
                '/flexport.authorization.checker.v1.CheckerAPI/CheckOperation',
                request_serializer=flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationRequest.SerializeToString,
                response_deserializer=flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationResponse.FromString,
                )


class CheckerAPIServicer(object):
    """Checks whether a user has permission to perform an operation.
    """

    def CheckOperation(self, request, context):
        """Check whether a user can perform an operation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CheckerAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckOperation,
                    request_deserializer=flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationRequest.FromString,
                    response_serializer=flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flexport.authorization.checker.v1.CheckerAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CheckerAPI(object):
    """Checks whether a user has permission to perform an operation.
    """

    @staticmethod
    def CheckOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flexport.authorization.checker.v1.CheckerAPI/CheckOperation',
            flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationRequest.SerializeToString,
            flexport_dot_authorization_dot_checker_dot_v1_dot_checker__api__pb2.CheckOperationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
