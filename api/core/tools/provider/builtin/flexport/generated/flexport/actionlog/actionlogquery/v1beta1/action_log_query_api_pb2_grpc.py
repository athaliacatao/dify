# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
from flexport.actionlog.actionlogquery.v1beta1 import (
    action_log_query_api_pb2 as flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2,
)


class ActionLogQueryAPIStub:
    """
    * Service Boundary Documentation:
    * -------------------------------


    * Set of GRPC APIS to query action logs
    *
    * This API is used to fetch the latest actions that have occurred and been logged to the ActionLog NIS
    * The purpose of this API is to render ActionLogs in a component other than the <ActionLog/> react component.
    * Do not use the returned in the Actions for *any BUSINESS LOG*. The returned Actions should be opaquely rendered on the frontend
    * and performing business logic based on the returned actions is an anti pattern?
    *
    * Interested in learning more about ActionLog? Check out go/actionlog to understand more about the product


    The API for returning the latest occurring actions according to a set of request filters.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetActionLogs = channel.unary_unary(
            "/flexport.actionlog.actionlogquery.v1beta1.ActionLogQueryAPI/GetActionLogs",
            request_serializer=flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsRequest.SerializeToString,
            response_deserializer=flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsResponse.FromString,
        )


class ActionLogQueryAPIServicer:
    """
    * Service Boundary Documentation:
    * -------------------------------


    * Set of GRPC APIS to query action logs
    *
    * This API is used to fetch the latest actions that have occurred and been logged to the ActionLog NIS
    * The purpose of this API is to render ActionLogs in a component other than the <ActionLog/> react component.
    * Do not use the returned in the Actions for *any BUSINESS LOG*. The returned Actions should be opaquely rendered on the frontend
    * and performing business logic based on the returned actions is an anti pattern?
    *
    * Interested in learning more about ActionLog? Check out go/actionlog to understand more about the product


    The API for returning the latest occurring actions according to a set of request filters.
    """

    def GetActionLogs(self, request, context):
        """The name of the function the stub calls to fetch action logs."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ActionLogQueryAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetActionLogs": grpc.unary_unary_rpc_method_handler(
            servicer.GetActionLogs,
            request_deserializer=flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsRequest.FromString,
            response_serializer=flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "flexport.actionlog.actionlogquery.v1beta1.ActionLogQueryAPI", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.


class ActionLogQueryAPI:
    """
    * Service Boundary Documentation:
    * -------------------------------


    * Set of GRPC APIS to query action logs
    *
    * This API is used to fetch the latest actions that have occurred and been logged to the ActionLog NIS
    * The purpose of this API is to render ActionLogs in a component other than the <ActionLog/> react component.
    * Do not use the returned in the Actions for *any BUSINESS LOG*. The returned Actions should be opaquely rendered on the frontend
    * and performing business logic based on the returned actions is an anti pattern?
    *
    * Interested in learning more about ActionLog? Check out go/actionlog to understand more about the product


    The API for returning the latest occurring actions according to a set of request filters.
    """

    @staticmethod
    def GetActionLogs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/flexport.actionlog.actionlogquery.v1beta1.ActionLogQueryAPI/GetActionLogs",
            flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsRequest.SerializeToString,
            flexport_dot_actionlog_dot_actionlogquery_dot_v1beta1_dot_action__log__query__api__pb2.GetActionLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
